/**
 * ###################################
 * @name Vertex Client PE
 * @version v1.2 Alpha
 * @author peacestorm (@AgameR_Modder)
 * @credits Herqux_, MyNameIsTriXz
 * ###################################
 */

// #####################
// # ANDROID FUNCTIONS #
// #####################

var widget = android.widget;
var graphics = android.graphics;
var LinearLayout = widget.LinearLayout;
var ScrollView = widget.ScrollView;
var Button = widget.Button;
var EditText = widget.EditText;
var Point = graphics.Point;

// ####################
// # CLIENT FUNCTIONS #
// ####################

//Don't copy anything without my permission!

var VertexClientPE = {
	accounts: []
};

VertexClientPE.isRemote = false;

const CURRENT_VERSION = "1.2 Alpha";
const TARGET_VERSION = "MCPE v0.14.x alpha";
var latestVersion;
var latestPocketEditionVersion;
var news;

var showingMenu = false;
var serverEnabler = false;

var setupColor = "green";

//settings
var showHacksListSetting = "on";
var mainButtonPositionSetting = "top-right";
var healthTagsSetting = "off";
var themeSetting = "green";
var spamMessage = "Spam!!!!!";
//End of settings

var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();

var GUI;
var menu;
var exitUI;
var vertexclientpemiscmenu;
var settingsMenu;
var informationMenu;

var nameColor = "§b";
var healthColor = "§c";

var defaultDestroyTimeAll = [
    null, 1.5, 0.6, 0.5, 2, 2, 0, -1, null, null, null, null, 0.5, 0.6, 3, 3, 3, 2, 0.2, 0.6, 0.3, 3, 3, null, 0.8, null, 0.2, 0.7, null, null, 4, 0, 0, null, null, 0.8, null, 0, 0, 0, 0, 3, 5, 2, 2, 2, 0, 1.5, 2, 50, 0, 0, null, 2, 2.5, null, 3, 5, 2.5, 0, 0.6, 3.5, 3.5, 1, 3, 0.4, 0.7, 2, 1, null, null, 5, null, 3, 3, null, null, null, 0.1, 0.5, 0.2, 0.4, 0.6, 0, null, 2, 1, 0.4, 0.3, null, 1, 0.5, null, null, -1, 3, null, 1.5, null, null, 5, 0.3, 1, 0, 0, null, 2, 2, 1.5, null, null, 2, null, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, null, null, null, null, null, 2, 2, 2, null, null, 2, null, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, 0.8, 2, 2, null, null, null, null, null, null, null, null, null, null, null, 0.5, 0.1, 5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 3.5, 50, 5, 0.6, 0.6, 5, null, null, null, null, 0
];

Block.setDestroyTimeAll = function(destroyTime) {
    for(i = 0; i < 256; i++) {
        Block.setDestroyTime(i, destroyTime);
    }
}

Block.setDestroyTimeDefaultAll = function() {
    for(i = 0; i < 256; i++) {
        Block.setDestroyTime(i, defaultDestroyTimeAll[i]);
    }
}

var logoImage = "  ";
var buttonButton = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuNvyMY98AAAApSURBVDhPY+COViUJgTTwN0kSiRAaGIgAoxqgYnjBqAYiEVQDCShaFQDDykMd9Est1QAAAABJRU5ErkJggg== ";
var buttonButtonClicked = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuNvyMY98AAAGBSURBVDhPlVHLSgNBEHR33uvBs+x0z+TgV/k3/om36EEjKBqjURNZI5iYRPGBMerBR04K6lXsCYLsnhJommaY6qqumpldXJiqAmBuaX7C+gfMLqdJ2Zo1azatrlqzC3rP6hqEedMmlTRZSXOApJwmFWu2ra6DaoLMUJ6AykA3QdVB71izYXMAs06/QR2CbIE6Q9FF2XOy60QHFb0cgtmBPAMpqVvaKs+BXzk+cPweqYtrlF1UJ0DMOQBp1Q0QbRRXyB8ce/bsjbrjDyhuULZBHecBpmZ1BrRM3Dn24uJ3H32W4neaPfHIHqoM8wz7pAdFH9nQsZGPvkozPz7+KrHRmOTCqdOCpBqQUNrEB8heXfTho28ff3hiEHRJn84oMFRBN0gr8mvHHx1h4pGnzp6Q36LoOF24QW9ZfTB2iUhunCCLhj4YRTP52wJ9UDi6EgJWR0Cuy044Rlyi7DuaQw4NMNV8cMlqSllSOrSJHAxUrbH9x5Ra2JUUkp6w/gBT1OLCL6QHyeo4PJYBAAAAAElFTkSuQmCC ";
var buttonButtonRed = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC44GzRO2AAAAClJREFUOE9jiObhIQmBNDQJCBCJEBoYiACjGqBieMGoBiIRVAMJiIcHANrxO90D76nbAAAAAElFTkSuQmCC ";
var buttonButtonRedClicked = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOBs0TtgAAAEQSURBVDhPldK3UQRBEIXhP4AzLj+yIRS08tDgom1UAkAG2HwsVFGDdVc1xk53P9WzrcxmS51vwOp8vuD5A6zVQe3XXu3WTm3XVm3WRq2XgQGgdFiXdVHndVandVLHdTS10A0ANBpX9VD3dVe3dVPXUxER8QFAGpn2Y73WSz3X03RFQZbVAcAuAygNvdVHvU8fwASZFGwAiMg0G4iNfk4HjBR7IlnDAHBX1TNh7gcACY8FF8YBQJEudR44MQrmg0M+ueV5AMgkmXxSGkJMCtjVJuzDVgaArdmdDWqjZIM9gigUbdzeB4B38ToayBhgWiQmySLS8rIDwMsroSHNrojWIBirxNH9/zUWPL+AJc5s9gX+iKdpWgWOLAAAAABJRU5ErkJggg== ";
var buttonButtonBlue = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOBs0TtgAAAApSURBVDhPY+ASjyYJgTTwWTQRiRAaGIgAoxqgYnjBqAYiEVQDCUg8GgCUOkWxDci/gQAAAABJRU5ErkJggg== ";
var buttonButtonBlueClicked = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOBs0TtgAAAFkSURBVDhPlZI/T8JQFMXP7ODKV/G7MOpAQmmhlvInLYSmaMQBv4dxUQdoBELBKCAgJvxdxICJDsKmjt4ba8xDB0jO0Cbn9+495z1s+fwbiYHtHWtN/QLYPUXgHMEi5AoiLtQ6IiQXSgVBB4FL7J2JALlDDiJVaLfQ24h3EO8i1obWgOoidEWMCEgFdkebSNzDGCI1RnoMc4jkA/QWjwo6IiCXod2wm6yZR2RnsOewpvyb7PEcpSwC4Sr0O5h9dh+8IPeG3BKHr7CeeA7tptZEgCLGOkiNYM9wtED+AyefOF7CfubdKI96vQLUGDDHDNDx+XcPyM6RniDRxX59BaCVWjD6sL5XWrB4pSmvRL2prgjIpZ/QI2SmPIfO5tATDh39G5qujGttINGDMeBySOaA3XqTF5ZWaqWLkxyEXZ5DdVFKEn1QoeSmOw1ciID3NApQSlwxmbynUYZU/OdprCkP2EA+/xejJ/zQnee73AAAAABJRU5ErkJggg== ";
var arrowArrowButton = " iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOBs0TtgAAADxSURBVFhH7ZK7DoIwFIbrICUQQ5iUyWfwGdDV6DNpUspgXH0FEzc2udTLmzg4uxjjgoicSVQE2mjSL/mX5iTfn9ODJBLJz2AQz9TnfhuiuV5Hm64sHm8G2ZmZ9oHq+AvsslhonHCJ4riB1EnQzR0QkCZZ9xCi+xam0SlvgGsou2izjZV+AaZbOylxzh3kERpdFZeNUzmgO/5ASIk8OYDdqM+1xDs5wK1EETlQe4lv5EBtJcrIgcqHWUUOlN5EHXLg6xJ1yoHCJXjIgY8l7nIajbJxPrw8TBFy4GkTIuUApqGNSXBQKDsmGWbPEonk30DoBtBAD5ZDFrUoAAAAAElFTkSuQmCC ";
var backgroundBackground = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuNvyMY98AAAA4SURBVDhPpcgxEQAgDAAxFNRyrWMgA38MWXLOzn5hFsyCWTALZsEsmAWzYBbMglkwC2bBLJjPZi/94QwQ+yMAdwAAAABJRU5ErkJggg== ";
var backgroundBackgroundRed = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC44GzRO2AAAABxJREFUOE9j+M/AUE8JHjVg1AAQHjVgGBjAUA8A4Yh+EORu4EUAAAAASUVORK5CYII= ";
var backgroundBackgroundBlue = " iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC44GzRO2AAAADhJREFUOE+lyDERACAMALHqw1StYyADfwxZMnN2vzALZsEsmAWzYBbMglkwC2bBLJgFs2AWzGe7F5IHSBCNcuM/AAAAAElFTkSuQmCC ";
var playPlayButton = " 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 ";
var playPlayButtonClicked = " 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 ";
var twitterTwitterButton = " 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 ";
var twitterTwitterButtonClicked = " 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 ";
var combatKitButtonButton = " iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOWwzfk4AAAHMSURBVFhH3ZMxSgQxGIW3UFAEGxlkmsFCUZABQdzWZhsbK8UDWKywB/AMeoA5gLX3sPAI3kDBK0ReyBv/zSZ/knHYwg8e42Sy873EzGQIu5dTw7ih9QHp+de7OX17XX8BKcc1VKBtW4O4257YeDYpOQV41jw/Lsk4juDvuq7LiuTIKUBQQEpSz1VScuALGIyHngULbB0dGMTdWnLkABK8FHMIZX4wL1qgur/tS+TKCVc6SE4gxwRc8YNcOcBL8Vsp9FNUoEROYmeBUeVElkDccBZ4eUiMJFcPrqaVebhurBiT5ZnIIfZvoFwtAPnT/NicNDt2AnegpAQLaFkpQBFWTrmEz91tEq1EcPV4OR6WSFJAFIp7vAxXOGaB/wsOqowbThLd/hykEF8JDisivxgN9f+v4UsplHFTVQbLF4tF/2n6wtlslr3ys2qjbAco77rOXt1wT0pO8ef3nbk53Lb5eNmzY8kiY8ghloGcVxZx01dBAWz7EDlgASKLsES0AA9c6HCNIUfUXeDq/QI5cjBKAX8HcuWABbREC/xVDlIFKI8WkNtfKid4MQRFciALDJUDFtASLRD7AkqRJS72N21UORlDTiCSMv/+l8nkB1TRXzubPoMFAAAAAElFTkSuQmCC ";
var pathFont = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang";

Base64Decode(android.util.Base64.decode(buttonButton, 0), pathFont + "/clientbutton.png");
Base64Decode(android.util.Base64.decode(buttonButtonClicked, 0), pathFont + "/clientbutton_clicked.png");
Base64Decode(android.util.Base64.decode(buttonButtonRed, 0), pathFont + "/clientbutton_red.png");
Base64Decode(android.util.Base64.decode(buttonButtonRedClicked, 0), pathFont + "/clientbutton_red_clicked.png");
Base64Decode(android.util.Base64.decode(buttonButtonBlue, 0), pathFont + "/clientbutton_blue.png");
Base64Decode(android.util.Base64.decode(buttonButtonBlueClicked, 0), pathFont + "/clientbutton_blue_clicked.png");
Base64Decode(android.util.Base64.decode(arrowArrowButton, 0), pathFont + "/arrowbutton_down.png");
Base64Decode(android.util.Base64.decode(backgroundBackground, 0), pathFont + "/color_background.png");
Base64Decode(android.util.Base64.decode(backgroundBackgroundRed, 0), pathFont + "/color_background_red.png");
Base64Decode(android.util.Base64.decode(backgroundBackgroundBlue, 0), pathFont + "/color_background_blue.png");
Base64Decode(android.util.Base64.decode(playPlayButton, 0), pathFont + "/play_button.png");
Base64Decode(android.util.Base64.decode(playPlayButtonClicked, 0), pathFont + "/play_button_clicked.png");
Base64Decode(android.util.Base64.decode(twitterTwitterButton, 0), pathFont + "/twitter_button.png");
Base64Decode(android.util.Base64.decode(twitterTwitterButtonClicked, 0), pathFont + "/twitter_button_clicked.png");
Base64Decode(android.util.Base64.decode(combatKitButtonButton, 0), pathFont + "/combat_kit.png");

var img1 = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clientbutton.png");
var img2 = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clientbutton_clicked.png");
var img3 = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clientbutton_red.png");
var img4 = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clientbutton_red_clicked.png");
var img5 = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clientbutton_blue.png");
var img6 = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clientbutton_blue_clicked.png");
var imgArrowDown = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/arrowbutton_down.png");
var imgBackground = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/color_background.png");
var imgBackgroundRed = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/color_background_red.png");
var imgBackgroundBlue = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/color_background_blue.png");
var imgPlayButton = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/play_button.png");
var imgPlayButtonClicked = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/play_button_clicked.png");
var imgTwitterButton = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/twitter_button.png");
var imgTwitterButtonClicked = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/twitter_button_clicked.png");
var imgCombatKit = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/combat_kit.png");
var imgSkinFace = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/minecraftpe/custom.png");
var buttonClientGUI = new android.graphics.drawable.BitmapDrawable(img1);
var buttonClickedClientGUI = new android.graphics.drawable.BitmapDrawable(img2);
var backgroundClientGUI = new android.graphics.drawable.BitmapDrawable(imgBackground);
var backgroundRedClientGUI = new android.graphics.drawable.BitmapDrawable(imgBackgroundRed);
var backgroundBlueClientGUI = new android.graphics.drawable.BitmapDrawable(imgBackgroundBlue);
var playButtonClientGUI = new android.graphics.drawable.BitmapDrawable(imgPlayButton);
var playButtonClickedClientGUI = new android.graphics.drawable.BitmapDrawable(imgPlayButtonClicked);
var splashTwitterButtonClientGUI = new android.graphics.drawable.BitmapDrawable(imgTwitterButton);
var splashTwitterButtonClickedClientGUI = new android.graphics.drawable.BitmapDrawable(imgTwitterButtonClicked);
var combatKitClientGUI = new android.graphics.drawable.BitmapDrawable(imgCombatKit);

function Base64Decode(byteArray, Path) {
    try {
        var File = new java.io.File(Path);
        if (!File.exists()) {
            File.createNewFile();
            var Stream = new java.io.FileOutputStream(File);
            Stream.write(byteArray);
            Stream.close();
        }
        
    } catch (err) {
        print(err);
    }
}

var getContext = function() {
    return com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
};

ModPE.goToURL = function(url) {
	var uri = android.net.Uri.parse(url);
	var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, uri);
	ctx.startActivity(intent);
};

ModPE.getPlayerName = function() {
    var file = new java.io.File("/sdcard/games/com.mojang/minecraftpe/options.txt");
    var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
    var read, username;
    while((read = br.readLine()) != null) {
        if(read.split(":")[0] == "mp_username") {
            username = read.split(":")[1];
            break;
        }
    }
    br.close();
    return username;
};

function saveSetting(article, value) {
	var fileInputStream = new java.io.FileInputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/options.txt"));
	var inputStreamReader = new java.io.InputStreamReader(fileInputStream);
	var bufferedReader = new java.io.BufferedReader(inputStreamReader);
	var tempRead, tempReadString;
	var tempSaved = "";
	while ((tempRead = bufferedReader.readLine()) != null) {
	tempReadString = tempRead.toString();
	if (tempReadString.split(":")[0] == article) continue;
	tempSaved += tempReadString + "\n"
	}
	fileInputStream.close();
	inputStreamReader.close();
	bufferedReader.close();
	var fileOutputStream = new java.io.FileOutputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/options.txt"));
	var outputStreamWriter = new java.io.OutputStreamWriter(fileOutputStream);
	outputStreamWriter.write(tempSaved + article + ":" + value);
	outputStreamWriter.close();
	fileOutputStream.close();
	//net.zhuoweizhang.mcpelauncher.ScriptManager.requestGraphicsReset();
};

ModPE.setPlayerName = function(username) {
	saveSetting("mp_username", username);
}

ModPE.playerHasSplitControls = function() {
    var file = new java.io.File("/sdcard/games/com.mojang/minecraftpe/options.txt");
    var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
    var read, splitcontrols;
    while((read = br.readLine()) != null) {
        if(read.split(":")[0] == "ctrl_usetouchjoypad") {
            splitcontrols = read.split(":")[1];
            break;
        }
    }
    br.close();
    return splitcontrols;
};

ModPE.getCurrentUsedSkin = function() {
    var file = new java.io.File("/sdcard/games/com.mojang/minecraftpe/options.txt");
    var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
    var read, skin;
    while((read = br.readLine()) != null) {
        if(read.split(":")[0] == "game_skintypefull") {
            skin = read.split(":")[1];
            break;
        }
    }
    br.close();
    return skin;
};

var URL = "https://www.dominos.com/en/pages/order/";

function pizzaOrderDialog(){

ctx.runOnUiThread(new java.lang.Runnable({

run: function(){
try{
var wwv=new android.webkit.WebView(ctx);
var wS=wwv.getSettings();

wS.setJavaScriptEnabled(true);
wwv.setWebChromeClient(new android.webkit.WebChromeClient());
wwv.setWebViewClient(new android.webkit.WebViewClient());

wwv.loadUrl(URL);

var b=new android.app.AlertDialog.Builder(ctx);

b.setTitle(URL);
b.setView(wwv);
b.setNegativeButton("Close",new android.content.DialogInterface.OnClickListener(){

onClick:function(di, v1){
di.dismiss();
}
});

var a=b.create();
a.show();
}catch(err){
print("Cannot open window: "+err+".")
;
}
}}));
}

VertexClientPE.serverEnabler = function() {
	var sender = "";
	var str = "\u00a70BlockLauncher, enable scripts";
	net.zhuoweizhang.mcpelauncher.ScriptManager.handleMessagePacketCallback(sender, str);
	serverEnabler = true;
}

var line0, line1, line2, line3;

VertexClientPE.showSignEditorDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var signEditorTitle = clientTextView("SignEditor", true);
				var btn = clientButton("Ok");
				var btn1 = clientButton("Cancel");
				var inputBar = new EditText(ctx);
				var inputBar1 = new EditText(ctx);
				var inputBar2 = new EditText(ctx);
				var inputBar3 = new EditText(ctx);
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundClientGUI);
				if(themeSetting == "red") {
					dialogLayout.setBackgroundDrawable(backgroundRedClientGUI);
				}if(themeSetting == "blue") {
					dialogLayout.setBackgroundDrawable(backgroundBlueClientGUI);
				}
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(signEditorTitle);
				dialogLayout.addView(inputBar);
				dialogLayout.addView(inputBar1);
				dialogLayout.addView(inputBar2);
				dialogLayout.addView(inputBar3);
				dialogLayout.addView(btn);
				dialogLayout.addView(btn1);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("SignEditor");
				inputBar.setHint("Line 1");
				inputBar.setText(Level.getSignText(signX, signY, signZ, 0));
				inputBar.setTextColor(android.graphics.Color.WHITE);
				inputBar1.setHint("Line 2");
				inputBar1.setText(Level.getSignText(signX, signY, signZ, 1));
				inputBar1.setTextColor(android.graphics.Color.WHITE);
				inputBar2.setHint("Line 3");
				inputBar2.setText(Level.getSignText(signX, signY, signZ, 2));
				inputBar2.setTextColor(android.graphics.Color.WHITE);
				inputBar3.setHint("Line 4");
				inputBar3.setText(Level.getSignText(signX, signY, signZ, 3));
				inputBar3.setTextColor(android.graphics.Color.WHITE);
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						line0 = inputBar.getText();
						line1 = inputBar1.getText();
						line2 = inputBar2.getText();
						line3 = inputBar3.getText();
						Level.setSignText(signX, signY, signZ, 0, line0);
						Level.setSignText(signX, signY, signZ, 1, line1);
						Level.setSignText(signX, signY, signZ, 2, line2);
						Level.setSignText(signX, signY, signZ, 3, line3);
						dialog.dismiss();
					}
				});
				btn1.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e)
			}
		}
	});
}

VertexClientPE.showMoreDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var moreTitle = clientTextView("More", true);
				var settingsButton = clientButton("Settings");
				var informationButton = clientButton("Information");
				var kitsButton = clientButton("Kits");
				var newLineText = new widget.TextView(ctx);
				newLineText.setText("\n");
				var cancelButton = clientButton("Cancel");
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundClientGUI);
				if(themeSetting == "red") {
					dialogLayout.setBackgroundDrawable(backgroundRedClientGUI);
				}if(themeSetting == "blue") {
					dialogLayout.setBackgroundDrawable(backgroundBlueClientGUI);
				}
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(moreTitle);
				dialogLayout.addView(settingsButton);
				dialogLayout.addView(informationButton);
				//dialogLayout.addView(kitsButton);
				dialogLayout.addView(newLineText);
				dialogLayout.addView(cancelButton);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("More");
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				settingsButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						settingsScreen();
						exitSettings();
					}
				});
				informationButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						informationScreen();
						exitInformation();
					}
				});
				kitsButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						VertexClientPE.showKitsScreen();
					}
				});
				cancelButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e)
			}
		}
	});
}

VertexClientPE.showSpamMessageDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				VertexClientPE.loadMainSettings();
				dialogGUI = new widget.PopupWindow();
				var spamMessageTitle = clientTextView("Change spam message", true);
				var spamMessageInput = new EditText(ctx);
				spamMessageInput.setText(spamMessage);
				spamMessageInput.setTextColor(android.graphics.Color.WHITE);
				spamMessageInput.setHint("Spam message");
				var okButton = clientButton("Ok");
				var cancelButton = clientButton("Cancel");
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundClientGUI);
				if(themeSetting == "red") {
					dialogLayout.setBackgroundDrawable(backgroundRedClientGUI);
				}if(themeSetting == "blue") {
					dialogLayout.setBackgroundDrawable(backgroundBlueClientGUI);
				}
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(spamMessageTitle);
				dialogLayout.addView(spamMessageInput);
				dialogLayout.addView(okButton);
				dialogLayout.addView(cancelButton);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("Change spam message");
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				okButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						spamMessage = spamMessageInput.getText();
						VertexClientPE.saveMainSettings();
						VertexClientPE.loadMainSettings();
						dialog.dismiss();
					}
				});
				cancelButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e)
			}
		}
	});
}

VertexClientPE.showAddAccountDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				VertexClientPE.loadMainSettings();
				dialogGUI = new widget.PopupWindow();
				var accountTitle = clientTextView("Add account", true);
				var accountInput = new EditText(ctx);
				accountInput.setTextColor(android.graphics.Color.WHITE);
				accountInput.setHint("Enter an username");
				var okButton = clientButton("Ok");
				var cancelButton = clientButton("Cancel");
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundClientGUI);
				if(themeSetting == "red") {
					dialogLayout.setBackgroundDrawable(backgroundRedClientGUI);
				}if(themeSetting == "blue") {
					dialogLayout.setBackgroundDrawable(backgroundBlueClientGUI);
				}
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(accountTitle);
				dialogLayout.addView(accountInput);
				dialogLayout.addView(okButton);
				dialogLayout.addView(cancelButton);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("Change spam message");
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				okButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						var accountName = accountInput.getText();
						VertexClientPE.accounts.push({
							username: accountName.toString()
						})
						VertexClientPE.saveMainSettings();
						VertexClientPE.loadMainSettings();
						dialog.dismiss();
						accountManager.dismiss();
						VertexClientPE.showAccountManager();
						/*var usernameText = new widget.TextView(ctx);
						usernameText.setText(accountName.toString() + "\n");
						accountManagerLayoutLeft.addView(usernameText);
						var useButton = clientButton("Use");
						useButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
						useButton.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function(viewarg) {
								ModPE.setPlayerName(VertexClientPE.accounts[i].username.toString());
								//print(VertexClientPE.accounts[i].username.toString());
								accountManager.dismiss();
							}
						}));
						accountManagerLayoutRight.addView(useButton);*/
					}
				});
				cancelButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e)
			}
		}
	});
}

var consoleInput;

VertexClientPE.showJavascriptConsoleDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var javascriptConsoleTitle = clientTextView("Javascript Console", true);
				var btn = clientButton("Send");
				var btn1 = clientButton("Cancel");
				var inputBar = new EditText(ctx);
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundClientGUI);
				if(themeSetting == "red") {
					dialogLayout.setBackgroundDrawable(backgroundRedClientGUI);
				}if(themeSetting == "blue") {
					dialogLayout.setBackgroundDrawable(backgroundBlueClientGUI);
				}
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(javascriptConsoleTitle);
				dialogLayout.addView(inputBar);
				dialogLayout.addView(btn);
				dialogLayout.addView(btn1);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("Javascript Console");
				inputBar.setHint("Javascript input");
				inputBar.setTextColor(android.graphics.Color.WHITE);
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
					consoleInput = "js " + inputBar.getText();
					  var jsLine,
						  funcResult,
						  jsRex = /(?:^js(?:\s+)(.*)$)|(?:^js$)/,
						  matches;

					  if(jsRex.test(consoleInput)) {

						matches = jsRex.exec(consoleInput);

						if(matches[1] === undefined || matches[1] === '') {
						  print('Usage: js <JavaScript code>');
						}
						else {
						  jsLine = matches[1];
						  // Evaluate the second part of the command as a JavaScript snippet and collect the result
						  try {
							funcResult = eval(jsLine);
						  }
						  catch(e) {
							clientMessage('JavaScript Error: ' + e.message);
						  }
						  
						  // If a value was returned, post it on the PE chat console
						  if(funcResult != null) {
							clientMessage(funcResult.toString());
						  }
						}
					  }
					}
				});
				btn1.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e)
			}
		}
	});
}

VertexClientPE.showKitsScreen = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var kitsScreenLayout = new LinearLayout(ctx);
					kitsScreenLayout.setOrientation(0);
					kitsScreenLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var kitsScreenScrollView = new ScrollView(ctx);
					kitsScreenLayout.addView(kitsScreenScrollView);
					
					var kitsScreenLayout1 = new LinearLayout(ctx);
					kitsScreenLayout1.setOrientation(LinearLayout.HORIZONTAL);
					kitsScreenLayout1.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenScrollView.addView(kitsScreenLayout1);
					
					var kitsScreenLayoutLeft = new LinearLayout(ctx);
					kitsScreenLayoutLeft.setOrientation(1);
					kitsScreenLayoutLeft.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					kitsScreenLayout1.addView(kitsScreenLayoutLeft);
					
					var kitsScreenLayoutCenter = new LinearLayout(ctx);
					kitsScreenLayoutCenter.setOrientation(1);
					kitsScreenLayoutCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenLayoutCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					kitsScreenLayout1.addView(kitsScreenLayoutCenter);
					
					var kitsScreenLayoutRight = new LinearLayout(ctx);
					kitsScreenLayoutRight.setOrientation(1);
					kitsScreenLayoutRight.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					kitsScreenLayout1.addView(kitsScreenLayoutRight);
					
					var combatKitButton = new Button(ctx);
					combatKitButton.setText("Combat");
					combatKitButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.widthPixels / 4));
					combatKitButton.setBackgroundDrawable(combatKitClientGUI);
					combatKitButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//todo
						}
					}));
					kitsScreenLayoutLeft.addView(combatKitButton);
					
					var toolsKitButton = clientButton("Tools");
					toolsKitButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					toolsKitButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//todo
						}
					}));
					//kitsScreenLayoutCenter.addView(toolsKitButton);
					
					var kitsButtonBlue = clientButton("Unknown");
					kitsButtonBlue.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					kitsButtonBlue.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//todo
						}
					}));
					//kitsScreenLayoutRight.addView(kitsButtonBlue);
					
					kitsScreen = new widget.PopupWindow(kitsScreenLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
					kitsScreen.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#0080FF")));
					kitsScreen.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occured: ' + error);
			}
		}
	}));
}

VertexClientPE.toggleModule = function(module) {
	var sendMessage = true;
	switch(module) {
		case "nuker": {
			if(nukerState == false) {
				nukerState = true;
			} else if(nukerState == true) {
				nukerState = false;
			}
			break;
		} case "derp": {
			if(derpState == false) {
				derpState = true;
			} else if(derpState == true) {
				derpState = false;
			}
			break;
		} case "xray": {
			if(xRayState == false) {
				xRayState = true;
				VertexClientPE.xRay(1);
			} else if(xRayState == true) {
				xRayState = false;
				VertexClientPE.xRay(0);
			}
			break;
		/*} case "freecam": {
			if(freecamState == false) {
				VertexClientPE.freecam(1);
				freecamState = true;
			} else if(freecamState == true) {
				freecamState = false;
				VertexClientPE.freecam(0);
			}
			VertexClientPE.clientMessage(ChatColor.GREEN + "Successfully toggled module \'" + module + "\'!");
			break;*/
		} case "autospammer": {
			if(autoSpammerState == false) {
				autoSpammerState = true;
			} else if(autoSpammerState == true) {
				autoSpammerState = false;
			}
			break;
		} case "drone": {
			if(droneState == false) {
				droneState = true;
			} else if(droneState == true) {
				droneState = false;
			}
			break;
		} case "regen": {
			if(regenState == false) {
				regenState = true;
			} else if(regenState == true) {
				regenState = false;
			}
			break;
		} case "instakill": {
			if(instaKillState == false) {
				instaKillState = true;
			} else if(instaKillState == true) {
				instaKillState = false;
			}
			break;
		} case "instamine": {
			if(instaMineState == false) {
				instaMineState = true;
				Block.setDestroyTimeAll(0);
			} else if(instaMineState == true) {
				instaMineState = false;
				Block.setDestroyTimeDefaultAll();
			}
			break;
		} case "glide": {
			if(glideState == false) {
				glideState = true;
			} else if(glideState == true) {
				glideState = false;
			}
			break;
		} case "arrowgun": {
			if(arrowGunState == false) {
				arrowGunState = true;
			} else if(arrowGunState == true) {
				arrowGunState = false;
			}
			break;
		} case "automine": {
			if(autoMineState == false) {
				autoMineState = true;
			} else if(autoMineState == true) {
				autoMineState = false;
			}
			break;
		} case "killaura": {
			if(killAuraState == false) {
				killAuraState = true;
			} else if(killAuraState == true) {
				killAuraState = false;
			}
			break;
		} case "powerexplosions": {
			if(powerExplosionsState == false) {
				powerExplosionsState = true;
			} else if(powerExplosionsState == true) {
				powerExplosionsState = false;
			}
			break;
		} case "stackdrop": {
			if(stackDropState == false) {
				stackDropState = true;
			} else if(stackDropState == true) {
				stackDropState = false;
			}
			break;
		} case "tapremover": {
			if(tapRemoverState == false) {
				tapRemoverState = true;
			} else if(tapRemoverState == true) {
				tapRemoverState = false;
			}
			break;
		} case "timer": {
			if(timerState == false) {
				timerState = true;
			} else if(timerState == true) {
				timerState = false;
			}
			break;
		} case "walkonliquids": {
			if(walkOnLiquidsState == false) {
				walkOnLiquidsState = true;
			} else if(walkOnLiquidsState == true) {
				walkOnLiquidsState = false;
			}
			break;
		} case "wallhack": {
			if(walkOnLiquidsState == false) {
				walkOnLiquidsState = true;
			} else if(walkOnLiquidsState == true) {
				walkOnLiquidsState = false;
			}
			break;
		} case "zoom": {
			if(zoomState == false) {
				zoomState = true;
				ModPE.setFov(10);
			} else if(zoomState == true) {
				zoomState = false;
				ModPE.resetFov();
			}
			break;
		} case "signeditor": {
			if(signEditorState == false) {
				signEditorState = true;
			} else if(signEditorState == true) {
				signEditorState = false;
			}
			break;
		} case "tapnuker": {
			if(tapNukerState == false) {
				tapNukerState = true;
			} else if(tapNukerState == true) {
				tapNukerState = false;
			}
			break;
		} case "highjump": {
			if(highJumpState == false) {
				highJumpState = true;
			} else if(highJumpState == true) {
				highJumpState = false;
			}
			break;
		} case "autoswitch": {
			if(autoSwitchState == false) {
				autoSwitchState = true;
			} else if(autoSwitchState == true) {
				autoSwitchState = false;
			}
			break;
		} case "flight": {
			if(flightState == false) {
				flightState = true;
				VertexClientPE.flight(1);
			} else if(flightState == true) {
				flightState = false;
				VertexClientPE.flight(0);
			}
			break;
		} case "autowalk": {
			if(autoWalkState == false) {
				autoWalkState = true;
			} else if(autoWalkState == true) {
				autoWalkState = false;
			}
			break;
		} case "bowaimbot": {
			if(bowAimbotState == false) {
				bowAimbotState = true;
			} else if(bowAimbotState == true) {
				bowAimbotState = false;
			}
			break;
		} case "autoplace": {
			if(autoPlaceState == false) {
				autoPlaceState = true;
			} else if(autoPlaceState == true) {
				autoPlaceState = false;
			}
			break;
		} case "godmode": {
			if(godModeState == false) {
				godModeState = true;
			} else if(godModeState == true) {
				godModeState = false;
			}
			break;
		} default: {
			VertexClientPE.clientMessage(ChatColor.RED + "Module \'" + module + "\' not found!");
			sendMessage = false;
			break;
		}
	}
	if(sendMessage == true) {
		VertexClientPE.clientMessage(ChatColor.GREEN + "Successfully toggled module \'" + module + "\'!");
		updateHacksList();
	}
}

VertexClientPE.switchGameMode = function() {
	if(Level.getGameMode() == 0) {
		Level.setGameMode(1);
	} else if(Level.getGameMode() == 1) {
		Level.setGameMode(0);
	}
}

VertexClientPE.spectate = function(playerName) {
	var players = Server.getAllPlayers();
	for (var i = 0; i < players.length; i++) {
		if(Player.getName(players[i]) == playerName) {
			ModPE.setCamera(players[i]);
		}
	}
}

VertexClientPE.clientMessage = function(message) {
	clientMessage(ChatColor.RED + "[" + ChatColor.DARK_GREEN + "Vertex Client PE" + ChatColor.RED + "] " + ChatColor.WHITE + message);
}

VertexClientPE.syntaxError = function(syntax) {
	VertexClientPE.clientMessage(ChatColor.DARK_RED + "Syntax error!");
	VertexClientPE.clientMessage(syntax);
}

VertexClientPE.getVersion = function(type) {
	switch(type) {
		case "current":
		case undefined:
		case null:
			return "v" + CURRENT_VERSION;
			break;
		case "target":
			return TARGET_VERSION;
			break;
		default:
			VertexClientPE.clientMessage(ChatColor.DARK_RED + "Syntax error!");
			return ".version <current|target>";
	}
}

var p, y, xx, yy, zz;

VertexClientPE.commandManager = function(command) {
	command = command.split(" ");
	switch(command[0]) {
		case ".help": //1
			if(command[1] == undefined || command[1] == null || command[1] == "1") {
				VertexClientPE.clientMessage("Showing help page 1/2");
				VertexClientPE.clientMessage(".help [<page>]");
				VertexClientPE.clientMessage(".gm");
				VertexClientPE.clientMessage(".spectate <player>");
				VertexClientPE.clientMessage(".toggle <module>");
				VertexClientPE.clientMessage(".t <module>");
				VertexClientPE.clientMessage(".drop [infinite]");
				VertexClientPE.clientMessage(".version <current|target>");
				VertexClientPE.clientMessage(".panic");
			} else {
				if(command[1] == "2") {
					VertexClientPE.clientMessage("Showing help page 2/2");
					VertexClientPE.clientMessage(".p");
					VertexClientPE.clientMessage(".js");
					VertexClientPE.clientMessage(".say <message>");
				} else {
					VertexClientPE.clientMessage(ChatColor.RED + "Syntax error: " + ChatColor.WHITE + "Invalid page: " + command[1]);
				}
			}
			break;
		case ".gm": //2
			VertexClientPE.switchGameMode();
			VertexClientPE.clientMessage("Your gamemode has been updated!");
			break;
		case ".spectate": //3
			if(command[1] == null || command[1] == undefined) {
				VertexClientPE.syntaxError(".spectate <player>");
			} else {
				VertexClientPE.spectate(command[1]);
			}
			break;
		case ".t": //4
		case ".toggle": //4
			if(command[1] == null || command[1] == undefined) {
				VertexClientPE.syntaxError(".toggle <module>");
			} else {
				VertexClientPE.toggleModule(command[1]);
			}
			break;
		case ".drop": //5
			if(command[1] == null || command[1] == undefined || command[1] == "infinite") {
				for(var i = 0; i < 513; i++) {
					p = ((Entity.getPitch(getPlayerEnt()) + 90) * Math.PI) / 180;
					y = ((Entity.getYaw(getPlayerEnt()) + 90) * Math.PI) / 180;
					xx = Math.sin(p) * Math.cos(y);
					yy = Math.sin(p) * Math.sin(y);
					zz = Math.cos(p);
					Level.dropItem(Player.getX() + xx, Player.getY() + zz, Player.getZ() + yy, 1, i, 1);
				}
			} else {
				VertexClientPE.syntaxError(".drop [infinite]");
			}
			break;
		case ".version": //6
			VertexClientPE.clientMessage(VertexClientPE.getVersion(command[1]));
			break;
		case ".p": //7
		case ".panic":
			VertexClientPE.panic();
			updateHacksList();
			break;
		case ".js": //8
			VertexClientPE.showJavascriptConsoleDialog();
			break;
		case ".say": //9
			clientMessage("<" + ModPE.getPlayerName() + "> " + command[1]);
			Server.sendChat(command[1]);
			break;
		default:
			VertexClientPE.clientMessage(ChatColor.RED + "Error: command \"" + command + "\" not found!");
			break;
	}
}

VertexClientPE.healthTags = function() {
    var mobs = Entity.getAll();

    for(var i = 0; i < mobs.length; i++) {


        /* now the variable "mobs" is now "mobs[i]",
        if you are asking why they are they now like this, it is because we split all gotten entities as their own, that means you can personalize them, (that is very useful when you are using Entity.get() scripts. So I can give all entities a personalized (as example) nametag which shows their own health. */


        var xq = Entity.getX(mobs[i]) - getPlayerX();

        var yq = Entity.getY(mobs[i]) - getPlayerY();

        var zq = Entity.getZ(mobs[i]) - getPlayerZ();



        if(xq * xq + yq * yq + zq * zq <= 14 * 14 && mobs[i] != getPlayerEnt()) {

            /* the 14 stands for, that the entities you want to give (as example) a nametag need to be in a radius of 14 blocks */

            /* You can disable it by removing the above script. */
            if(Entity.getEntityTypeId(mobs[i]) == 10) {
                Entity.setNameTag(mobs[i], nameColor + "Chicken " + healthColor + Entity.getHealth(mobs[i]) + "/4");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 11) {
                Entity.setNameTag(mobs[i], nameColor + "Cow " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 12) {
                Entity.setNameTag(mobs[i], nameColor + "Pig " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 13) {
                Entity.setNameTag(mobs[i], nameColor + "Sheep " + healthColor + Entity.getHealth(mobs[i]) + "/8");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 14) {
                Entity.setNameTag(mobs[i], nameColor + "Wolf " + healthColor + Entity.getHealth(mobs[i]) + "/8");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 15) {
                Entity.setNameTag(mobs[i], nameColor + "Villager " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 16) {
                Entity.setNameTag(mobs[i], nameColor + "Mooshroom " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 17) {
                Entity.setNameTag(mobs[i], nameColor + "Squid " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
	    if(Entity.getEntityTypeId(mobs[i]) == 18) {
                Entity.setNameTag(mobs[i], nameColor + "Rabbit " + healthColor + Entity.getHealth(mobs[i]) + "/3");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 19) {
                Entity.setNameTag(mobs[i], nameColor + "Bat " + healthColor + Entity.getHealth(mobs[i]) + "/6");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 20) {
                Entity.setNameTag(mobs[i], nameColor + "Iron Golem " + healthColor + Entity.getHealth(mobs[i]) + "/100");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 21) {
                Entity.setNameTag(mobs[i], nameColor + "Snow Golem " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 22) {
                Entity.setNameTag(mobs[i], nameColor + "Ocelot " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 32) {
                Entity.setNameTag(mobs[i], nameColor + "Zombie " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 33) {
                Entity.setNameTag(mobs[i], nameColor + "Creeper " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 34) {
                Entity.setNameTag(mobs[i], nameColor + "Skeleton " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 35) {
                Entity.setNameTag(mobs[i], nameColor + "Spider " + healthColor + Entity.getHealth(mobs[i]) + "/16");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 36) {
                Entity.setNameTag(mobs[i], nameColor + "Zombie Pigman " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 37) {
                Entity.setNameTag(mobs[i], nameColor + "Slime " + healthColor + Entity.getHealth(mobs[i]) + "/16");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 38) {
                Entity.setNameTag(mobs[i], nameColor + "Enderman " + healthColor + Entity.getHealth(mobs[i]) + "/40");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 39) {
                Entity.setNameTag(mobs[i], nameColor + "Silverfish " + healthColor + Entity.getHealth(mobs[i]) + "/8");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 40) {
                Entity.setNameTag(mobs[i], nameColor + "Cave Spider " + healthColor + Entity.getHealth(mobs[i]) + "/12");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 41) {
                Entity.setNameTag(mobs[i], nameColor + "Ghast " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 42) {
                Entity.setNameTag(mobs[i], nameColor + "Magma Cube " + healthColor + Entity.getHealth(mobs[i]) + "/16");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 43) {
                Entity.setNameTag(mobs[i], nameColor + "Blaze " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
        }
    }
}

VertexClientPE.xRay = function(onOrOff) {
    switch(onOrOff) {
	    case 0: {
	        OpaqLayer = 0;
	
	        Block.setLightLevel(54, 0);
	        Block.setLightLevel(86, 15);
	        Block.setLightLevel(89, 15);
	
	        Block.setRenderLayer(1, OpaqLayer);
	        Block.setRenderLayer(2, OpaqLayer);
	        Block.setRenderLayer(3, OpaqLayer);
	        Block.setRenderLayer(4, OpaqLayer);
	        Block.setRenderLayer(5, OpaqLayer);
	        Block.setRenderLayer(6, OpaqLayer);
	        Block.setRenderLayer(7, OpaqLayer);
	        Block.setRenderLayer(8, OpaqLayer);
	        Block.setRenderLayer(9, OpaqLayer);
	        Block.setRenderLayer(10, OpaqLayer);
	        Block.setRenderLayer(11, OpaqLayer);
	        Block.setRenderLayer(12, OpaqLayer);
	        Block.setRenderLayer(13, OpaqLayer);
	        Block.setRenderLayer(14, OpaqLayer);
	        Block.setRenderLayer(15, OpaqLayer);
	        Block.setRenderLayer(17, OpaqLayer);
	        Block.setRenderLayer(18, OpaqLayer);
	        Block.setRenderLayer(19, OpaqLayer);
	        Block.setRenderLayer(20, 1);
	        Block.setRenderLayer(21, OpaqLayer);
	        Block.setRenderLayer(22, OpaqLayer);
	        Block.setRenderLayer(23, OpaqLayer);
	        Block.setRenderLayer(24, OpaqLayer);
	        Block.setRenderLayer(25, OpaqLayer);
	        Block.setRenderLayer(26, OpaqLayer);
	        Block.setRenderLayer(27, OpaqLayer);
	        Block.setRenderLayer(28, OpaqLayer);
	        Block.setRenderLayer(29, OpaqLayer);
	        Block.setRenderLayer(30, OpaqLayer);
	        Block.setRenderLayer(31, 1);
	        Block.setRenderLayer(32, OpaqLayer);
	        Block.setRenderLayer(33, OpaqLayer);
	        Block.setRenderLayer(34, OpaqLayer);
	        Block.setRenderLayer(35, OpaqLayer);
	        Block.setRenderLayer(36, OpaqLayer);
	        Block.setRenderLayer(37, OpaqLayer);
	        Block.setRenderLayer(38, OpaqLayer);
	        Block.setRenderLayer(39, OpaqLayer);
	        Block.setRenderLayer(40, OpaqLayer);
	        Block.setRenderLayer(41, OpaqLayer);
	        Block.setRenderLayer(42, OpaqLayer);
	        Block.setRenderLayer(43, OpaqLayer);
	        Block.setRenderLayer(44, OpaqLayer);
	        Block.setRenderLayer(45, OpaqLayer);
	        Block.setRenderLayer(46, OpaqLayer);
	        Block.setRenderLayer(47, OpaqLayer);
	        Block.setRenderLayer(48, OpaqLayer);
	        Block.setRenderLayer(49, OpaqLayer);
	        Block.setRenderLayer(50, OpaqLayer);
	        Block.setRenderLayer(51, OpaqLayer);
	        Block.setRenderLayer(52, OpaqLayer);
	        Block.setRenderLayer(53, OpaqLayer);
	        Block.setRenderLayer(54, OpaqLayer);
	        Block.setRenderLayer(55, OpaqLayer);
	        Block.setRenderLayer(56, OpaqLayer);
	        Block.setRenderLayer(57, OpaqLayer);
	        Block.setRenderLayer(58, OpaqLayer);
	        Block.setRenderLayer(59, OpaqLayer);
	        Block.setRenderLayer(60, OpaqLayer);
	        Block.setRenderLayer(61, OpaqLayer);
	        Block.setRenderLayer(62, OpaqLayer);
	        Block.setRenderLayer(63, OpaqLayer);
	        Block.setRenderLayer(64, OpaqLayer);
	        Block.setRenderLayer(65, OpaqLayer);
	        Block.setRenderLayer(66, OpaqLayer);
	        Block.setRenderLayer(67, OpaqLayer);
	        Block.setRenderLayer(68, OpaqLayer);
	        Block.setRenderLayer(69, OpaqLayer);
	        Block.setRenderLayer(70, OpaqLayer);
	        Block.setRenderLayer(71, OpaqLayer);
	        Block.setRenderLayer(72, OpaqLayer);
	        Block.setRenderLayer(73, OpaqLayer);
	        Block.setRenderLayer(74, OpaqLayer);
	        Block.setRenderLayer(75, OpaqLayer);
	        Block.setRenderLayer(76, OpaqLayer);
	        Block.setRenderLayer(77, OpaqLayer);
	        Block.setRenderLayer(78, OpaqLayer);
	        Block.setRenderLayer(79, OpaqLayer);
	        Block.setRenderLayer(80, OpaqLayer);
	        Block.setRenderLayer(81, OpaqLayer);
	        Block.setRenderLayer(82, OpaqLayer);
	        Block.setRenderLayer(83, OpaqLayer);
	        Block.setRenderLayer(84, OpaqLayer);
	        Block.setRenderLayer(85, OpaqLayer);
	        Block.setRenderLayer(86, OpaqLayer);
	        Block.setRenderLayer(87, OpaqLayer);
	        Block.setRenderLayer(88, OpaqLayer);
	        Block.setRenderLayer(89, OpaqLayer);
	        Block.setRenderLayer(90, OpaqLayer);
	        Block.setRenderLayer(91, OpaqLayer);
	        Block.setRenderLayer(92, OpaqLayer);
	        Block.setRenderLayer(93, OpaqLayer);
	        Block.setRenderLayer(94, OpaqLayer);
	        Block.setRenderLayer(95, OpaqLayer);
	        Block.setRenderLayer(96, OpaqLayer);
	        Block.setRenderLayer(97, OpaqLayer);
	        Block.setRenderLayer(98, OpaqLayer);
	        Block.setRenderLayer(99, OpaqLayer);
	        Block.setRenderLayer(100, OpaqLayer);
	        Block.setRenderLayer(101, OpaqLayer);
	        Block.setRenderLayer(102, 1);
	        Block.setRenderLayer(103, OpaqLayer);
	        Block.setRenderLayer(104, OpaqLayer);
	        Block.setRenderLayer(105, OpaqLayer);
	        Block.setRenderLayer(106, 1);
	        Block.setRenderLayer(107, OpaqLayer);
	        Block.setRenderLayer(108, OpaqLayer);
	        Block.setRenderLayer(109, OpaqLayer);
	        Block.setRenderLayer(110, OpaqLayer);
	        Block.setRenderLayer(111, OpaqLayer);
	        Block.setRenderLayer(112, OpaqLayer);
	        Block.setRenderLayer(113, OpaqLayer);
	        Block.setRenderLayer(114, OpaqLayer);
	        Block.setRenderLayer(115, OpaqLayer);
	        Block.setRenderLayer(117, OpaqLayer);
	        Block.setRenderLayer(118, OpaqLayer);
	        Block.setRenderLayer(119, OpaqLayer);
	        Block.setRenderLayer(120, OpaqLayer);
	        Block.setRenderLayer(121, OpaqLayer);
	        Block.setRenderLayer(122, OpaqLayer);
	        Block.setRenderLayer(123, OpaqLayer);
	        Block.setRenderLayer(124, OpaqLayer);
	        Block.setRenderLayer(125, OpaqLayer);
	        Block.setRenderLayer(126, OpaqLayer);
	        Block.setRenderLayer(127, OpaqLayer);
	        Block.setRenderLayer(128, OpaqLayer);
	        Block.setRenderLayer(129, OpaqLayer);
	        Block.setRenderLayer(130, OpaqLayer);
	        Block.setRenderLayer(131, OpaqLayer);
	        Block.setRenderLayer(132, OpaqLayer);
	        Block.setRenderLayer(133, OpaqLayer);
	        Block.setRenderLayer(134, OpaqLayer);
	        Block.setRenderLayer(135, OpaqLayer);
	        Block.setRenderLayer(136, OpaqLayer);
	        Block.setRenderLayer(137, OpaqLayer);
	        Block.setRenderLayer(138, OpaqLayer);
	        Block.setRenderLayer(139, OpaqLayer);
	        Block.setRenderLayer(140, OpaqLayer);
	        Block.setRenderLayer(141, OpaqLayer);
	        Block.setRenderLayer(142, OpaqLayer);
	        Block.setRenderLayer(143, OpaqLayer);
	        Block.setRenderLayer(144, OpaqLayer);
	        Block.setRenderLayer(145, OpaqLayer);
	        Block.setRenderLayer(146, OpaqLayer);
	        Block.setRenderLayer(147, OpaqLayer);
	        Block.setRenderLayer(148, OpaqLayer);
	        Block.setRenderLayer(149, OpaqLayer);
	        Block.setRenderLayer(150, OpaqLayer);
	        Block.setRenderLayer(151, OpaqLayer);
	        Block.setRenderLayer(152, OpaqLayer);
	        Block.setRenderLayer(153, OpaqLayer);
	        Block.setRenderLayer(154, OpaqLayer);
	        Block.setRenderLayer(155, OpaqLayer);
	        Block.setRenderLayer(156, OpaqLayer);
	        Block.setRenderLayer(157, OpaqLayer);
	        Block.setRenderLayer(158, OpaqLayer);
	        Block.setRenderLayer(159, OpaqLayer);
	        Block.setRenderLayer(160, OpaqLayer);
	        Block.setRenderLayer(161, OpaqLayer);
	        Block.setRenderLayer(162, OpaqLayer);
	        Block.setRenderLayer(163, OpaqLayer);
	        Block.setRenderLayer(164, OpaqLayer);
	        Block.setRenderLayer(165, OpaqLayer);
	        Block.setRenderLayer(166, OpaqLayer);
	        Block.setRenderLayer(167, OpaqLayer);
	        Block.setRenderLayer(168, OpaqLayer);
	        Block.setRenderLayer(169, OpaqLayer);
	        Block.setRenderLayer(170, OpaqLayer);
	        Block.setRenderLayer(171, OpaqLayer);
	        Block.setRenderLayer(172, OpaqLayer);
	        Block.setRenderLayer(173, OpaqLayer);
	        Block.setRenderLayer(174, OpaqLayer);
	        Block.setRenderLayer(175, 1);
	        Block.setRenderLayer(176, OpaqLayer);
	        Block.setRenderLayer(177, OpaqLayer);
	        Block.setRenderLayer(178, OpaqLayer);
	        Block.setRenderLayer(179, OpaqLayer);
	        Block.setRenderLayer(180, OpaqLayer);
	        Block.setRenderLayer(181, OpaqLayer);
	        Block.setRenderLayer(182, OpaqLayer);
	        Block.setRenderLayer(183, OpaqLayer);
	        Block.setRenderLayer(184, OpaqLayer);
	        Block.setRenderLayer(185, OpaqLayer);
	        Block.setRenderLayer(186, OpaqLayer);
	        Block.setRenderLayer(187, OpaqLayer);
	        Block.setRenderLayer(188, OpaqLayer);
	        Block.setRenderLayer(189, OpaqLayer);
	        Block.setRenderLayer(190, OpaqLayer);
	        Block.setRenderLayer(191, OpaqLayer);
	        Block.setRenderLayer(192, OpaqLayer);
	        Block.setRenderLayer(193, OpaqLayer);
	        Block.setRenderLayer(194, OpaqLayer);
	        Block.setRenderLayer(195, OpaqLayer);
	        Block.setRenderLayer(196, OpaqLayer);
	        Block.setRenderLayer(197, OpaqLayer);
	        Block.setRenderLayer(198, OpaqLayer);
	        Block.setRenderLayer(199, OpaqLayer);
	        Block.setRenderLayer(200, OpaqLayer);
	        Block.setRenderLayer(201, OpaqLayer);
	        Block.setRenderLayer(202, OpaqLayer);
	        Block.setRenderLayer(203, OpaqLayer);
	        Block.setRenderLayer(204, OpaqLayer);
	        Block.setRenderLayer(205, OpaqLayer);
	        Block.setRenderLayer(206, OpaqLayer);
	        Block.setRenderLayer(207, OpaqLayer);
	        Block.setRenderLayer(208, OpaqLayer);
	        Block.setRenderLayer(209, OpaqLayer);
	        Block.setRenderLayer(210, OpaqLayer);
	        Block.setRenderLayer(211, OpaqLayer);
	        Block.setRenderLayer(212, OpaqLayer);
	        Block.setRenderLayer(213, OpaqLayer);
	        Block.setRenderLayer(214, OpaqLayer);
	        Block.setRenderLayer(215, OpaqLayer);
	        Block.setRenderLayer(217, OpaqLayer);
	        Block.setRenderLayer(218, OpaqLayer);
	        Block.setRenderLayer(219, OpaqLayer);
	        Block.setRenderLayer(220, OpaqLayer);
	        Block.setRenderLayer(221, OpaqLayer);
	        Block.setRenderLayer(222, OpaqLayer);
	        Block.setRenderLayer(223, OpaqLayer);
	        Block.setRenderLayer(224, OpaqLayer);
	        Block.setRenderLayer(225, OpaqLayer);
	        Block.setRenderLayer(226, OpaqLayer);
	        Block.setRenderLayer(227, OpaqLayer);
	        Block.setRenderLayer(228, OpaqLayer);
	        Block.setRenderLayer(229, OpaqLayer);
	        Block.setRenderLayer(230, OpaqLayer);
	        Block.setRenderLayer(231, OpaqLayer);
	        Block.setRenderLayer(232, OpaqLayer);
	        Block.setRenderLayer(233, OpaqLayer);
	        Block.setRenderLayer(234, OpaqLayer);
	        Block.setRenderLayer(235, OpaqLayer);
	        Block.setRenderLayer(236, OpaqLayer);
	        Block.setRenderLayer(237, OpaqLayer);
	        Block.setRenderLayer(238, OpaqLayer);
	        Block.setRenderLayer(239, OpaqLayer);
	        Block.setRenderLayer(240, OpaqLayer);
	        Block.setRenderLayer(241, OpaqLayer);
	        Block.setRenderLayer(242, OpaqLayer);
	        Block.setRenderLayer(243, OpaqLayer);
	        Block.setRenderLayer(244, OpaqLayer);
	        Block.setRenderLayer(245, OpaqLayer);
	        Block.setRenderLayer(248, OpaqLayer);
	        Block.setRenderLayer(249, OpaqLayer);
	        Block.setRenderLayer(250, OpaqLayer);
	        Block.setRenderLayer(251, OpaqLayer);
	        Block.setRenderLayer(252, OpaqLayer);
	        Block.setRenderLayer(253, OpaqLayer);
	        Block.setRenderLayer(254, OpaqLayer);
	        Block.setRenderLayer(255, OpaqLayer);
	        break;
		} case 1: {
	        var RenderLayer = 1;
	        ///////// CHESTS ARE NOW GLOWING OR HAVE THE SAME BRIGHTNESS AS TORCHES, ITS GOOD TO TROLL YOUR FRIENDS, GLOWSTONE AND ANOTHER BLOCK HAS NOW NO BRIGHTNESS, THE PLAYER CAN SEE NOW BETTER THROUGH BLOCKS
	        Block.setLightLevel(54, 15);
	        Block.setLightLevel(86, 0);
	        Block.setLightLevel(89, 0);
	
	        Block.setRenderLayer(1, RenderLayer);
	        Block.setRenderLayer(2, RenderLayer);
	        Block.setRenderLayer(3, RenderLayer);
	        Block.setRenderLayer(4, RenderLayer);
	        Block.setRenderLayer(5, RenderLayer);
	        Block.setRenderLayer(6, RenderLayer);
	        Block.setRenderLayer(7, RenderLayer);
	        Block.setRenderLayer(8, RenderLayer);
	        Block.setRenderLayer(9, RenderLayer);
	        Block.setRenderLayer(10, RenderLayer);
	        Block.setRenderLayer(11, RenderLayer);
	        Block.setRenderLayer(12, RenderLayer);
	        Block.setRenderLayer(13, RenderLayer);
	        Block.setRenderLayer(14, RenderLayer);
	        Block.setRenderLayer(15, RenderLayer);
	        Block.setRenderLayer(16, RenderLayer);
	        Block.setRenderLayer(17, RenderLayer);
	        Block.setRenderLayer(18, RenderLayer);
	        Block.setRenderLayer(19, RenderLayer);
	        Block.setRenderLayer(20, RenderLayer);
	        Block.setRenderLayer(21, RenderLayer);
	        Block.setRenderLayer(22, RenderLayer);
	        Block.setRenderLayer(23, RenderLayer);
	        Block.setRenderLayer(24, RenderLayer);
	        Block.setRenderLayer(25, RenderLayer);
	        Block.setRenderLayer(26, RenderLayer);
	        Block.setRenderLayer(27, RenderLayer);
	        Block.setRenderLayer(28, RenderLayer);
	        Block.setRenderLayer(29, RenderLayer);
	        Block.setRenderLayer(30, RenderLayer);
	        Block.setRenderLayer(31, RenderLayer);
	        Block.setRenderLayer(32, RenderLayer);
	        Block.setRenderLayer(33, RenderLayer);
	        Block.setRenderLayer(34, RenderLayer);
	        Block.setRenderLayer(35, RenderLayer);
	        Block.setRenderLayer(36, RenderLayer);
	        Block.setRenderLayer(37, RenderLayer);
	        Block.setRenderLayer(38, RenderLayer);
	        Block.setRenderLayer(39, RenderLayer);
	        Block.setRenderLayer(40, RenderLayer);
	        Block.setRenderLayer(41, RenderLayer);
	        Block.setRenderLayer(42, RenderLayer);
	        Block.setRenderLayer(43, RenderLayer);
	        Block.setRenderLayer(44, RenderLayer);
	        Block.setRenderLayer(45, RenderLayer);
	        Block.setRenderLayer(46, RenderLayer);
	        Block.setRenderLayer(47, RenderLayer);
	        Block.setRenderLayer(48, RenderLayer);
	        Block.setRenderLayer(49, RenderLayer);
	        Block.setRenderLayer(50, RenderLayer);
	        Block.setRenderLayer(51, RenderLayer);
	        Block.setRenderLayer(52, RenderLayer);
	        Block.setRenderLayer(53, RenderLayer);
	        Block.setRenderLayer(54, RenderLayer);
	        Block.setRenderLayer(55, RenderLayer);
	        Block.setRenderLayer(56, RenderLayer);
	        Block.setRenderLayer(57, RenderLayer);
	        Block.setRenderLayer(58, RenderLayer);
	        Block.setRenderLayer(59, RenderLayer);
	        Block.setRenderLayer(60, RenderLayer);
	        Block.setRenderLayer(61, RenderLayer);
	        Block.setRenderLayer(62, RenderLayer);
	        Block.setRenderLayer(63, RenderLayer);
	        Block.setRenderLayer(64, RenderLayer);
	        Block.setRenderLayer(65, RenderLayer);
	        Block.setRenderLayer(66, RenderLayer);
	        Block.setRenderLayer(67, RenderLayer);
	        Block.setRenderLayer(68, RenderLayer);
	        Block.setRenderLayer(69, RenderLayer);
	        Block.setRenderLayer(70, RenderLayer);
	        Block.setRenderLayer(71, RenderLayer);
	        Block.setRenderLayer(72, RenderLayer);
	        Block.setRenderLayer(73, RenderLayer);
	        Block.setRenderLayer(74, RenderLayer);
	        Block.setRenderLayer(75, RenderLayer);
	        Block.setRenderLayer(76, RenderLayer);
	        Block.setRenderLayer(77, RenderLayer);
	        Block.setRenderLayer(78, RenderLayer);
	        Block.setRenderLayer(79, RenderLayer);
	        Block.setRenderLayer(80, RenderLayer);
	        Block.setRenderLayer(81, RenderLayer);
	        Block.setRenderLayer(82, RenderLayer);
	        Block.setRenderLayer(83, RenderLayer);
	        Block.setRenderLayer(84, RenderLayer);
	        Block.setRenderLayer(85, RenderLayer);
	        Block.setRenderLayer(86, RenderLayer);
	        Block.setRenderLayer(87, RenderLayer);
	        Block.setRenderLayer(88, RenderLayer);
	        Block.setRenderLayer(89, RenderLayer);
	        Block.setRenderLayer(90, RenderLayer);
	        Block.setRenderLayer(91, RenderLayer);
	        Block.setRenderLayer(92, RenderLayer);
	        Block.setRenderLayer(93, RenderLayer);
	        Block.setRenderLayer(94, RenderLayer);
	        Block.setRenderLayer(95, RenderLayer);
	        Block.setRenderLayer(96, RenderLayer);
	        Block.setRenderLayer(97, RenderLayer);
	        Block.setRenderLayer(98, RenderLayer);
	        Block.setRenderLayer(99, RenderLayer);
	        Block.setRenderLayer(100, RenderLayer);
	        Block.setRenderLayer(101, RenderLayer);
	        Block.setRenderLayer(102, RenderLayer);
	        Block.setRenderLayer(103, RenderLayer);
	        Block.setRenderLayer(104, RenderLayer);
	        Block.setRenderLayer(105, RenderLayer);
	        Block.setRenderLayer(106, RenderLayer);
	        Block.setRenderLayer(107, RenderLayer);
	        Block.setRenderLayer(108, RenderLayer);
	        Block.setRenderLayer(109, RenderLayer);
	        Block.setRenderLayer(110, RenderLayer);
	        Block.setRenderLayer(111, RenderLayer);
	        Block.setRenderLayer(112, RenderLayer);
	        Block.setRenderLayer(113, RenderLayer);
	        Block.setRenderLayer(114, RenderLayer);
	        Block.setRenderLayer(115, RenderLayer);
	        Block.setRenderLayer(117, RenderLayer);
	        Block.setRenderLayer(118, RenderLayer);
	        Block.setRenderLayer(119, RenderLayer);
	        Block.setRenderLayer(120, RenderLayer);
	        Block.setRenderLayer(121, RenderLayer);
	        Block.setRenderLayer(122, RenderLayer);
	        Block.setRenderLayer(123, RenderLayer);
	        Block.setRenderLayer(124, RenderLayer);
	        Block.setRenderLayer(125, RenderLayer);
	        Block.setRenderLayer(126, RenderLayer);
	        Block.setRenderLayer(127, RenderLayer);
	        Block.setRenderLayer(128, RenderLayer);
	        Block.setRenderLayer(129, RenderLayer);
	        Block.setRenderLayer(130, RenderLayer);
	        Block.setRenderLayer(131, RenderLayer);
	        Block.setRenderLayer(132, RenderLayer);
	        Block.setRenderLayer(133, RenderLayer);
	        Block.setRenderLayer(134, RenderLayer);
	        Block.setRenderLayer(135, RenderLayer);
	        Block.setRenderLayer(136, RenderLayer);
	        Block.setRenderLayer(137, RenderLayer);
	        Block.setRenderLayer(138, RenderLayer);
	        Block.setRenderLayer(139, RenderLayer);
	        Block.setRenderLayer(140, RenderLayer);
	        Block.setRenderLayer(141, RenderLayer);
	        Block.setRenderLayer(142, RenderLayer);
	        Block.setRenderLayer(143, RenderLayer);
	        Block.setRenderLayer(144, RenderLayer);
	        Block.setRenderLayer(145, RenderLayer);
	        Block.setRenderLayer(146, RenderLayer);
	        Block.setRenderLayer(147, RenderLayer);
	        Block.setRenderLayer(148, RenderLayer);
	        Block.setRenderLayer(149, RenderLayer);
	        Block.setRenderLayer(150, RenderLayer);
	        Block.setRenderLayer(151, RenderLayer);
	        Block.setRenderLayer(152, RenderLayer);
	        Block.setRenderLayer(153, RenderLayer);
	        Block.setRenderLayer(154, RenderLayer);
	        Block.setRenderLayer(155, RenderLayer);
	        Block.setRenderLayer(156, RenderLayer);
	        Block.setRenderLayer(157, RenderLayer);
	        Block.setRenderLayer(158, RenderLayer);
	        Block.setRenderLayer(159, RenderLayer);
	        Block.setRenderLayer(160, RenderLayer);
	        Block.setRenderLayer(161, RenderLayer);
	        Block.setRenderLayer(162, RenderLayer);
	        Block.setRenderLayer(163, RenderLayer);
	        Block.setRenderLayer(164, RenderLayer);
	        Block.setRenderLayer(165, RenderLayer);
	        Block.setRenderLayer(166, RenderLayer);
	        Block.setRenderLayer(167, RenderLayer);
	        Block.setRenderLayer(168, RenderLayer);
	        Block.setRenderLayer(169, RenderLayer);
	        Block.setRenderLayer(170, RenderLayer);
	        Block.setRenderLayer(171, RenderLayer);
	        Block.setRenderLayer(172, RenderLayer);
	        Block.setRenderLayer(173, RenderLayer);
	        Block.setRenderLayer(174, RenderLayer);
	        Block.setRenderLayer(175, RenderLayer);
	        Block.setRenderLayer(176, RenderLayer);
	        Block.setRenderLayer(177, RenderLayer);
	        Block.setRenderLayer(178, RenderLayer);
	        Block.setRenderLayer(179, RenderLayer);
	        Block.setRenderLayer(180, RenderLayer);
	        Block.setRenderLayer(181, RenderLayer);
	        Block.setRenderLayer(182, RenderLayer);
	        Block.setRenderLayer(183, RenderLayer);
	        Block.setRenderLayer(184, RenderLayer);
	        Block.setRenderLayer(185, RenderLayer);
	        Block.setRenderLayer(186, RenderLayer);
	        Block.setRenderLayer(187, RenderLayer);
	        Block.setRenderLayer(188, RenderLayer);
	        Block.setRenderLayer(189, RenderLayer);
	        Block.setRenderLayer(190, RenderLayer);
	        Block.setRenderLayer(191, RenderLayer);
	        Block.setRenderLayer(192, RenderLayer);
	        Block.setRenderLayer(193, RenderLayer);
	        Block.setRenderLayer(194, RenderLayer);
	        Block.setRenderLayer(195, RenderLayer);
	        Block.setRenderLayer(196, RenderLayer);
	        Block.setRenderLayer(197, RenderLayer);
	        Block.setRenderLayer(198, RenderLayer);
	        Block.setRenderLayer(199, RenderLayer);
	        Block.setRenderLayer(200, RenderLayer);
	        Block.setRenderLayer(201, RenderLayer);
	        Block.setRenderLayer(202, RenderLayer);
	        Block.setRenderLayer(203, RenderLayer);
	        Block.setRenderLayer(204, RenderLayer);
	        Block.setRenderLayer(205, RenderLayer);
	        Block.setRenderLayer(206, RenderLayer);
	        Block.setRenderLayer(207, RenderLayer);
	        Block.setRenderLayer(208, RenderLayer);
	        Block.setRenderLayer(209, RenderLayer);
	        Block.setRenderLayer(210, RenderLayer);
	        Block.setRenderLayer(211, RenderLayer);
	        Block.setRenderLayer(212, RenderLayer);
	        Block.setRenderLayer(213, RenderLayer);
	        Block.setRenderLayer(214, RenderLayer);
	        Block.setRenderLayer(215, RenderLayer);
	        Block.setRenderLayer(217, RenderLayer);
	        Block.setRenderLayer(218, RenderLayer);
	        Block.setRenderLayer(219, RenderLayer);
	        Block.setRenderLayer(220, RenderLayer);
	        Block.setRenderLayer(221, RenderLayer);
	        Block.setRenderLayer(222, RenderLayer);
	        Block.setRenderLayer(223, RenderLayer);
	        Block.setRenderLayer(224, RenderLayer);
	        Block.setRenderLayer(225, RenderLayer);
	        Block.setRenderLayer(226, RenderLayer);
	        Block.setRenderLayer(227, RenderLayer);
	        Block.setRenderLayer(228, RenderLayer);
	        Block.setRenderLayer(229, RenderLayer);
	        Block.setRenderLayer(230, RenderLayer);
	        Block.setRenderLayer(231, RenderLayer);
	        Block.setRenderLayer(232, RenderLayer);
	        Block.setRenderLayer(233, RenderLayer);
	        Block.setRenderLayer(234, RenderLayer);
	        Block.setRenderLayer(235, RenderLayer);
	        Block.setRenderLayer(236, RenderLayer);
	        Block.setRenderLayer(237, RenderLayer);
	        Block.setRenderLayer(238, RenderLayer);
	        Block.setRenderLayer(239, RenderLayer);
	        Block.setRenderLayer(240, RenderLayer);
	        Block.setRenderLayer(241, RenderLayer);
	        Block.setRenderLayer(242, RenderLayer);
	        Block.setRenderLayer(243, RenderLayer);
	        Block.setRenderLayer(244, RenderLayer);
	        Block.setRenderLayer(245, RenderLayer);
	        Block.setRenderLayer(246, RenderLayer);
	        Block.setRenderLayer(247, RenderLayer);
	        Block.setRenderLayer(248, RenderLayer);
	        Block.setRenderLayer(249, RenderLayer);
	        Block.setRenderLayer(250, RenderLayer);
	        Block.setRenderLayer(251, RenderLayer);
	        Block.setRenderLayer(252, RenderLayer);
	        Block.setRenderLayer(253, RenderLayer);
	        Block.setRenderLayer(254, RenderLayer);
	        Block.setRenderLayer(255, RenderLayer);
			break;
        }
    }
    var originalTile = getTile(Player.getX(), Player.getY(), Player.getZ());
    setTile(Player.getX(), Player.getY(), Player.getZ(), 1, 0);
    setTile(Player.getX(), Player.getY(), Player.getZ(), 2, 0);
    setTile(Player.getX(), Player.getY(), Player.getZ(), originalTile, 0);
}

VertexClientPE.nuker = function(x, y, z) {
	for(var blockX = - 3; blockX < 4; blockX++) {
		for(var blockY = - 3; blockY < 4; blockY++) {
			for(var blockZ = - 3; blockZ < 4; blockZ++) {
				setTile(x + blockX, y + blockY, z + blockZ, 0);
			}
		}
	}
}

VertexClientPE.regen = function() {
	if(Entity.getHealth(getPlayerEnt()) < 20) {
		Player.setHealth(20);
	}
}

VertexClientPE.godMode = function() {
	Player.setHealth(9999);
}

VertexClientPE.autoPlace = function() {
	var x = Player.getPointedBlockX();
	var y = Player.getPointedBlockY();
	var z = Player.getPointedBlockZ();
	var side = Player.getPointedBlockSide();
	var blockId = Player.getCarriedItem();
	var blockData = Player.getCarriedItemData();
	if(blockId < 257) {
		setTile(x-(side==4?1:0)+(side==5?1:0)+0.5,y-(side==0?1:0)+(side==1?1:0)+0.5,z-(side==2?1:0)+(side==3?1:0)+0.5, blockId, blockData);
	}
}

VertexClientPE.flight = function(onOrOff) {
	switch(onOrOff) {
		case 0:
			Player.setFlying(0);
			if(Level.getGameMode() == 0) {
				Player.setCanFly(0);
			}
			break;
		case 1:
			Player.setCanFly(1);
			Player.setFlying(1);
			break;
	}
}

VertexClientPE.glide = function() {
	if(Entity.getVelY(getPlayerEnt()) <= 0 && Player.isFlying() == false) {
		setVelY(Player.getEntity(), - 0.07);
	}
}

VertexClientPE.autoMine = function() {
	Level.destroyBlock(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ());
}

VertexClientPE.killAura = function() {
	var mobs = Entity.getAll();
	for(var i = 0; i < mobs.length; i++) {
		var x = Entity.getX(mobs[i]) - getPlayerX();
		var y = Entity.getY(mobs[i]) - getPlayerY();
		var z = Entity.getZ(mobs[i]) - getPlayerZ();
		if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {
			if(Entity.getX(mobs[i]) > getPlayerX() && Entity.getZ(mobs[i]) > getPlayerZ()) {
				setRot(90, getPitch());
			}
			Entity.setHealth(mobs[i], 0);
		}
	}
}

var ent;

VertexClientPE.bowAimbot = function(e) {
	var mobs = Entity.getAll();
	for(var i=0; i<mobs.length; i++) {
		ent = mobs[i];
		x = Entity.getX(ent) - Entity.getX(getPlayerEnt());
		z = Entity.getZ(ent) - Entity.getZ(getPlayerEnt());
		if(Entity.getEntityTypeId(ent) != EntityType.ITEM && Entity.getEntityTypeId(ent) != EntityType.ARROW && ent != getPlayerEnt()) {
			setVelX(e, x / 4.5);
			setVelY(e, 0);
			setVelZ(e, z / 4.5);
		}
	}
}

var playerDir = [0, 0, 0];
var DEG_TO_RAD = Math.PI / 180;
var playerWalkSpeed = 0.2;

VertexClientPE.autoWalk = function() { //some parts of this function are made by @zhuowei
	toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
    var player = getPlayerEnt();
    setVelX(player, playerWalkSpeed * playerDir[0]);
    setVelZ(player, playerWalkSpeed * playerDir[2]);
}

function toDirectionalVector(vector, yaw, pitch) { //some parts of this function are made by @zhuowei
    vector[0] = Math.cos(yaw) * Math.cos(pitch);
    vector[1] = Math.sin(pitch);
    vector[2] = Math.sin(yaw) * Math.cos(pitch);
}

var freecamEntity;

VertexClientPE.freecam = function(onOrOff) {
	switch(onOrOff) {
		case 0: {
			ModPE.setCamera(Player.getEntity());
			if(freecamEntity != null) {
				Entity.remove(freecamEntity);
			}
			freecamEntity = null;
			break;
		} case 1: {
			freecamEntity = Level.spawnMob(getPlayerX(), getPlayerY(), getPlayerZ(), EntityType.VILLAGER);
			ModPE.setCamera(freecamEntity);
			//Entity.setRenderType(freecamEntity, EntityRenderType.player2);
			break;
		}
	}
}

var settingsPath = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe/";

VertexClientPE.saveMainSettings = function() {
    java.io.File(settingsPath).mkdirs();
    var newFile = new java.io.File(settingsPath, "vertexclientpe_settings.txt");
    newFile.createNewFile();
    var outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
    outWrite.append(showHacksListSetting.toString());
    outWrite.append("," + mainButtonPositionSetting.toString());
    outWrite.append("," + healthTagsSetting.toString());
    outWrite.append("," + themeSetting.toString());
    outWrite.append("," + spamMessage.toString());

    outWrite.close();
}

VertexClientPE.loadMainSettings = function() {
    if(!java.io.File(settingsPath + "vertexclientpe_settings.txt").exists())
        return;
    var file = new java.io.File(settingsPath + "vertexclientpe_settings.txt");
    var fos = new java.io.FileInputStream(file);
    var str = new java.lang.StringBuilder();
    var ch;
    while((ch = fos.read()) != -1)
        str.append(java.lang.Character(ch));
	if(str.toString().split(",")[0] != null && str.toString().split(",")[0] != undefined) {
    mainButtonPositionSetting = str.toString().split(",")[0]; //Here we split text by ","
	}
	if(str.toString().split(",")[1] != null && str.toString().split(",")[1] != undefined) {
    mainButtonPositionSetting = str.toString().split(",")[1]; //Here we split text by ","
	}
	if(str.toString().split(",")[2] != null && str.toString().split(",")[2] != undefined) {
    healthTagsSetting = str.toString().split(",")[2]; //Here we split text by ","
	}
	if(str.toString().split(",")[3] != null && str.toString().split(",")[3] != undefined) {
    themeSetting = str.toString().split(",")[3]; //Here we split text by ","
	}
	if(str.toString().split(",")[4] != null && str.toString().split(",")[4] != undefined) {
    spamMessage = str.toString().split(",")[4]; //Here we split text by ","
	}
    fos.close();
	return true;
}

var createUiThread = function(func) {
    getContext().runOnUiThread(new java.lang.Runnable({
        run: function() {
            func(getContext());
        }
    }));
};

var GuiSize = android.util.TypedValue.applyDimension(android.util.TypedValue.COMPLEX_UNIT_DIP, 2, getContext().getResources().getDisplayMetrics());
var GetGui = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/gui.png"));
};
var TrimImage = function(bitmap, x, y, width, height) {
    return android.graphics.Bitmap.createBitmap(bitmap, x, y, width, height);
};
var GetSpritesheet = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/spritesheet.png"));
};
var GetTouchgui = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/touchgui.png"));
};
var GetGui = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/gui.png"));
};

var trimImage = function(bitmap, x, y, width, height) {
    return android.graphics.Bitmap.createBitmap(bitmap, x, y, width, height);
};

var getStretchedImage = function(bm, x, y, stretchWidth, stretchHeight, width, height) {
    var blank = android.graphics.Bitmap.createBitmap(width, height, android.graphics.Bitmap.Config.ARGB_8888);
    var Bitmap = android.graphics.Bitmap;
    var part1 = Bitmap.createBitmap(bm, 0, 0, x, y);
    var part2 = Bitmap.createBitmap(bm, x, 0, stretchWidth, y);
    var part3 = Bitmap.createBitmap(bm, x + stretchWidth, 0, bm.getWidth() - x - stretchWidth, y);
    var part4 = Bitmap.createBitmap(bm, 0, y, x, stretchHeight);
    var part5 = Bitmap.createBitmap(bm, x, y, stretchWidth, stretchHeight);
    var part6 = Bitmap.createBitmap(bm, x + stretchWidth, y, bm.getWidth() - x - stretchWidth, stretchHeight);
    var part7 = Bitmap.createBitmap(bm, 0, y + stretchHeight, x, bm.getHeight() - y - stretchHeight);
    var part8 = Bitmap.createBitmap(bm, x, y + stretchHeight, stretchWidth, bm.getHeight() - y - stretchHeight);
    var part9 = Bitmap.createBitmap(bm, x + stretchWidth, y + stretchHeight, bm.getWidth() - x - stretchWidth, bm.getHeight() - y - stretchHeight);
    var canvas = new android.graphics.Canvas(blank);
    canvas.drawBitmap(part1, 0, 0, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part2, width - bm.getWidth() + stretchWidth, y, false), x, 0, null);
    canvas.drawBitmap(part3, width - bm.getWidth() + stretchWidth + x, 0, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part4, x, height - bm.getHeight() + stretchHeight, false), 0, y, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part5, width - bm.getWidth() + stretchWidth, height - bm.getHeight() + stretchHeight, false), x, y, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part6, part3.getWidth(), height - bm.getHeight() + stretchHeight, false), width - bm.getWidth() + stretchWidth + x, y, null);
    canvas.drawBitmap(part7, 0, height - bm.getHeight() + stretchHeight + y, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part8, width - bm.getWidth() + stretchWidth, part7.getHeight(), false), x, height - bm.getHeight() + stretchHeight + y, null);
    canvas.drawBitmap(part9, width - bm.getWidth() + stretchWidth + x, height - bm.getHeight() + stretchHeight + y, null);

    return new android.graphics.drawable.BitmapDrawable(blank);
};

var clicked_green_image = getStretchedImage(android.graphics.Bitmap.createScaledBitmap(trimImage(img2, 0, 0, 16, 16), 8 * GuiSize, 8 * GuiSize, false), 3.7 * GuiSize, 4 * GuiSize, 2 * GuiSize, 2 * GuiSize, getContext().getScreenWidth() / 2, getContext().getScreenHeight() / 10);
var unclicked_green_image = getStretchedImage(android.graphics.Bitmap.createScaledBitmap(trimImage(img1, 0, 0, 16, 16), 8 * GuiSize, 8 * GuiSize, false), 3.7 * GuiSize, 4 * GuiSize, 2 * GuiSize, 2 * GuiSize, getContext().getScreenWidth() / 2, getContext().getScreenHeight() / 10);
var clicked_red_image = getStretchedImage(android.graphics.Bitmap.createScaledBitmap(trimImage(img4, 0, 0, 16, 16), 8 * GuiSize, 8 * GuiSize, false), 3.7 * GuiSize, 4 * GuiSize, 2 * GuiSize, 2 * GuiSize, getContext().getScreenWidth() / 2, getContext().getScreenHeight() / 10);
var unclicked_red_image = getStretchedImage(android.graphics.Bitmap.createScaledBitmap(trimImage(img3, 0, 0, 16, 16), 8 * GuiSize, 8 * GuiSize, false), 3.7 * GuiSize, 4 * GuiSize, 2 * GuiSize, 2 * GuiSize, getContext().getScreenWidth() / 2, getContext().getScreenHeight() / 10);
var clicked_blue_image = getStretchedImage(android.graphics.Bitmap.createScaledBitmap(trimImage(img6, 0, 0, 16, 16), 8 * GuiSize, 8 * GuiSize, false), 3.7 * GuiSize, 4 * GuiSize, 2 * GuiSize, 2 * GuiSize, getContext().getScreenWidth() / 2, getContext().getScreenHeight() / 10);
var unclicked_blue_image = getStretchedImage(android.graphics.Bitmap.createScaledBitmap(trimImage(img5, 0, 0, 16, 16), 8 * GuiSize, 8 * GuiSize, false), 3.7 * GuiSize, 4 * GuiSize, 2 * GuiSize, 2 * GuiSize, getContext().getScreenWidth() / 2, getContext().getScreenHeight() / 10);
var skin_face_image = android.graphics.Bitmap.createScaledBitmap(trimImage(imgSkinFace, 0, 0, 16, 16), 8 * GuiSize, 8 * GuiSize, false);

function clientButton(text, desc, color) //menu buttons
{
	if(color == null) {
		color = themeSetting;
	}
    var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var defaultButton = new Button(ctx);
    defaultButton.setText(text);
    defaultButton.setTextColor(android.graphics.Color.WHITE);
	if(desc != null && desc != undefined) {
		defaultButton.setOnLongClickListener(new android.view.View.OnLongClickListener() {
			onLongClick: function(v, t) {
				ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
				widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> " + desc), 0).show();
				return true;
			}
		});
	}
    defaultButton.setOnTouchListener(new android.view.View.OnTouchListener() {
        onTouch: function(v, event) {
            defaultButton.setSoundEffectsEnabled(false);
            var action = event.getActionMasked();
            if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
                var bNP = unclicked_green_image;
				if(color == "green") {
					bNP = unclicked_green_image;
				}if(color == "red") {
					bNP = unclicked_red_image;
				}if(color == "blue") {
					bNP = unclicked_blue_image;
				}
                bNP.setFilterBitmap(false);
                bNP.setAntiAlias(false);
                defaultButton.setBackgroundDrawable(bNP);
                //defaultButton.setPadding(0, 0, 0, 0);
            } else {
                var bNP = clicked_green_image;
				if(color == "green") {
					bNP = clicked_green_image;
				}if(color == "red") {
					bNP = clicked_red_image;
				}if(color == "blue") {
					bNP = clicked_blue_image;
				}
                bNP.setFilterBitmap(false);
                bNP.setAntiAlias(false);
                defaultButton.setBackgroundDrawable(bNP);
                //defaultButton.setPadding(0, Math.round(defaultButton.getLineHeight() / 8), 0, 0);
            }
            return false;
        }
    });

    var bNP = unclicked_green_image;
	if(color == "green") {
		bNP = unclicked_green_image;
	}if(color == "red") {
		bNP = unclicked_red_image;
	}if(color == "blue") {
		bNP = unclicked_blue_image;
	}
    bNP.setFilterBitmap(false);
    bNP.setAntiAlias(false);
    defaultButton.setBackgroundDrawable(bNP);
    //defaultButton.setTypeface(mcpeFont);
    defaultButton.setPaintFlags(defaultButton.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
    defaultButton.setTextSize(15);
    if(android.os.Build.VERSION.SDK_INT > 19) { // KITKAT
        defaultButton.setShadowLayer(1, Math.round(defaultButton.getLineHeight() / 8), Math.round(defaultButton.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
    } else {
        defaultButton.setShadowLayer(0.0001, Math.round(defaultButton.getLineHeight() / 8), Math.round(defaultButton.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
    }
    defaultButton.setPadding(0, 0, 0, 0);
    defaultButton.setLineSpacing(0, 1.15);
    return defaultButton;
}

function clientTextButton(text, shadow) //menu buttons
{
    var defaultTextButton = new Button(ctx);
    defaultTextButton.setText(text);
	
	if(shadow == true && shadow != null && shadow != undefined) {
		if(android.os.Build.VERSION.SDK_INT > 19) { // KITKAT
			defaultTextButton.setShadowLayer(1, Math.round(defaultTextButton.getLineHeight() / 8), Math.round(defaultTextButton.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
		} else {
			defaultTextButton.setShadowLayer(0.0001, Math.round(defaultTextButton.getLineHeight() / 8), Math.round(defaultTextButton.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
		}
	}
    defaultTextButton.setPadding(0, 0, 0, 0);
    defaultTextButton.setLineSpacing(0, 1.15);
    return defaultTextButton;
}

function clientTextView(text, shadow) //menu buttons
{
    var defaultTextView = new widget.TextView(ctx);
    defaultTextView.setText(text);
    defaultTextView.setTextColor(android.graphics.Color.WHITE);
	
	if(shadow == true && shadow != null && shadow != undefined) {
		if(android.os.Build.VERSION.SDK_INT > 19) { // KITKAT
			defaultTextView.setShadowLayer(1, Math.round(defaultTextView.getLineHeight() / 8), Math.round(defaultTextView.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
		} else {
			defaultTextView.setShadowLayer(0.0001, Math.round(defaultTextView.getLineHeight() / 8), Math.round(defaultTextView.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
		}
	}
    defaultTextView.setPadding(0, 0, 0, 0);
    defaultTextView.setLineSpacing(0, 1.15);
    return defaultTextView;
}

function greenSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#216904"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#3EC20A"));

	var title = clientTextView(subtitle, true);
	title.setTextColor(android.graphics.Color.WHITE);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function redSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#E42217"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#FF0000"));

	var title = clientTextView(subtitle, true);
	title.setTextColor(android.graphics.Color.WHITE);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function blueSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#0000FF"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#1E90FF"));

	var title = clientTextView(subtitle, true);
	title.setTextColor(android.graphics.Color.WHITE);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

VertexClientPE.editCopyrightText = function() {
	VertexClientPE.loadMainSettings();
	ModPE.langEdit("menu.copyright", "©Mojang AB | §2Vertex Client PE by peacestorm");
	if(themeSetting == "red") {
		ModPE.langEdit("menu.copyright", "©Mojang AB | §4Vertex Client PE by peacestorm");
	} if(themeSetting == "blue") {
		ModPE.langEdit("menu.copyright", "©Mojang AB | §1Vertex Client PE by peacestorm");
	}
}

VertexClientPE.editCopyrightText();

VertexClientPE.checkForUpdates = function() {
    try {
        // download content
        var url = new java.net.URL("https://raw.githubusercontent.com/Vertex-Client/Vertex-Client-PE/update/Updater/Version");
        var connection = url.openConnection();

        // get content
        inputStream = connection.getInputStream();

        // read result
        var loadedVersion = "";
        var bufferedVersionReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
        var rowVersion = "";
        while((rowVersion = bufferedVersionReader.readLine()) != null) {
            loadedVersion += rowVersion;
        }
        latestVersion = loadedVersion.split(" ")[0] + " " + loadedVersion.split(" ")[1];
        latestPocketEditionVersion = loadedVersion.split(" ")[2];

        // close what needs to be closed
        bufferedVersionReader.close();

        // test
        //clientMessage(CURRENT_VERSION + " " + latestVersion);
    } catch(err) {
        VertexClientPE.clientMessage("Can't check for updates, please check your Internet connection.");
        ModPE.log("[Vertex Client PE] VertexClientPE.checkForUpdates() caught an error: " + err);
    }
}

VertexClientPE.loadNews = function() {
    try {
        // download content
        var url = new java.net.URL("https://raw.githubusercontent.com/Vertex-Client/Vertex-Client-PE/news/News");
        var connection = url.openConnection();

        // get content
        newsInputStream = connection.getInputStream();

        // read result
        var loadedNews = "";
        var bufferedNewsReader = new java.io.BufferedReader(new java.io.InputStreamReader(newsInputStream));
        var rowNews = "";
        while((rowNews = bufferedNewsReader.readLine()) != null) {
            loadedNews += rowNews;
        }
		news = loadedNews.toString();

        // close what needs to be closed
        bufferedNewsReader.close();

        // test
        //clientMessage(CURRENT_VERSION + " " + latestVersion);
    } catch(err) {
		news = "News couldn't be loaded";
        ModPE.log("[Vertex Client PE] VertexClientPE.loadNews() caught an error: " + err);
    }
}

new java.lang.Thread(new java.lang.Runnable() {
	run: function() {
		VertexClientPE.loadNews();
		var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
				ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
				widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> " + news), 0).show();
			}
		}));
	}
}).start();

VertexClientPE.showSplashScreen = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    var mainMenuListLayout = new LinearLayout(ctx);
                    mainMenuListLayout.setOrientation(1);
                    mainMenuListLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
                    //--------Add Buttons-------//
					var VertexClientPEMainMenuText = "<font color='#008000'>Vertex Client PE v" + CURRENT_VERSION + "</font>";
					if(themeSetting == "red") {
						VertexClientPEMainMenuText = "<font color='#FF0000'>Vertex Client PE v" + CURRENT_VERSION + "</font>";
					}if(themeSetting == "blue") {
						VertexClientPEMainMenuText = "<font color='#0000FF'>Vertex Client PE v" + CURRENT_VERSION + "</font>";
					}
					var text = VertexClientPEMainMenuText + " - Welcome back " + ModPE.getPlayerName() + "!";
					var TitleText = clientButton(text);
					TitleText.setText(android.text.Html.fromHtml(text), widget.TextView.BufferType.SPANNABLE);
                    TitleText.setTextSize(25);
					TitleText.setGravity(android.view.Gravity.CENTER);
					TitleText.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
					TitleText.setMarqueeRepeatLimit(-1);
					TitleText.setSingleLine();
					TitleText.setHorizontallyScrolling(true);
					TitleText.setSelected(true);
					var newLineText = new widget.TextView(ctx);
					newLineText.setText("\n\n\n");
					newLineText.setTextSize(10);
					var playButton = new Button(ctx);
					playButton.setBackground(playButtonClientGUI);
					playButton.setGravity(android.view.Gravity.CENTER);
					playButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 3, display.heightPixels / 3));
					playButton.setOnTouchListener(new android.view.View.OnTouchListener() {
						onTouch: function(v, event) {
							playButton.setSoundEffectsEnabled(false);
							var action = event.getActionMasked();
							if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
								var bNP = playButtonClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								playButton.setBackgroundDrawable(bNP);
								playButton.setPadding(0, 0, 0, 0);
							} else {
								var bNP = playButtonClickedClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								playButton.setBackgroundDrawable(bNP);
								playButton.setPadding(0, Math.round(playButton.getLineHeight() / 8), 0, 0);
							}
							return false;
						}
					});
					var newLineText2 = new widget.TextView(ctx);
					newLineText2.setText("\n");
					newLineText2.setTextSize(10);
					var splashTwitterButton = new Button(ctx);
					splashTwitterButton.setBackgroundDrawable(splashTwitterButtonClientGUI);
					splashTwitterButton.setGravity(android.view.Gravity.CENTER);
					splashTwitterButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 5, display.heightPixels / 5));
					splashTwitterButton.setOnTouchListener(new android.view.View.OnTouchListener() {
						onTouch: function(v, event) {
							splashTwitterButton.setSoundEffectsEnabled(false);
							var action = event.getActionMasked();
							if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
								var bNP = splashTwitterButtonClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								splashTwitterButton.setBackgroundDrawable(bNP);
								splashTwitterButton.setPadding(0, 0, 0, 0);
							} else {
								var bNP = splashTwitterButtonClickedClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								splashTwitterButton.setBackgroundDrawable(bNP);
								splashTwitterButton.setPadding(0, Math.round(splashTwitterButton.getLineHeight() / 8), 0, 0);
							}
							return false;
						}
					});
					
					playButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							mainMenuTextList.dismiss();
							showMenuButton();
							VertexClientPE.clientTick();
							//showAccountManagerButton();
					}}));
					splashTwitterButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							mainMenuTextList.dismiss();
							showMenuButton();
							VertexClientPE.clientTick();
							//showAccountManagerButton();
							ModPE.goToUrl("http://twitter.com/AgameR_Modder");
					}}))
                    mainMenuListLayout.addView(TitleText);
                    mainMenuListLayout.addView(newLineText);
                    mainMenuListLayout.addView(playButton);
                    mainMenuListLayout.addView(newLineText2);
                    mainMenuListLayout.addView(splashTwitterButton);

                    //More buttons...
                    mainMenuTextList = new widget.PopupWindow(mainMenuListLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
                    mainMenuTextList.setBackgroundDrawable(backgroundClientGUI);
					if(themeSetting == "red") {
						mainMenuTextList.setBackgroundDrawable(backgroundRedClientGUI);
					}if(themeSetting == "blue") {
						mainMenuTextList.setBackgroundDrawable(backgroundBlueClientGUI);
					}
                    mainMenuTextList.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
                } catch(error) {
                    print('An error occured: ' + error);
                }
            }
        }));
}

VertexClientPE.showSetupScreen = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var setupScreenLayout = new LinearLayout(ctx);
					setupScreenLayout.setOrientation(1);
					setupScreenLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var setupScreenLayoutBottom = new LinearLayout(ctx);
					setupScreenLayoutBottom.setOrientation(LinearLayout.HORIZONTAL);
					
					var setupScreenLayoutBottomLeft = new LinearLayout(ctx);
					setupScreenLayoutBottomLeft.setOrientation(1);
					setupScreenLayoutBottomLeft.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					setupScreenLayoutBottomLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					setupScreenLayoutBottom.addView(setupScreenLayoutBottomLeft);
					
					var setupScreenLayoutBottomCenter = new LinearLayout(ctx);
					setupScreenLayoutBottomCenter.setOrientation(1);
					setupScreenLayoutBottomCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					setupScreenLayoutBottomCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					setupScreenLayoutBottom.addView(setupScreenLayoutBottomCenter);
					
					var setupScreenLayoutBottomRight = new LinearLayout(ctx);
					setupScreenLayoutBottomRight.setOrientation(1);
					setupScreenLayoutBottomRight.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					setupScreenLayoutBottomRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					setupScreenLayoutBottom.addView(setupScreenLayoutBottomRight);
					
					var logo3 = android.util.Base64.decode(logoImage, 0);
					var logoViewer3 = new widget.ImageView(ctx);
					logoViewer3.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(logo3, 0, logo3.length));
					setupScreenLayout.addView(logoViewer3);
					setupScreenLayout.addView(setupScreenLayoutBottom);
					
					var setupButtonGreen = clientButton("Green", null, "green");
					setupButtonGreen.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonGreen.setTextColor(android.graphics.Color.GREEN);
					setupButtonGreen.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							setupColor = "green";
							setupButtonGreen.setTextColor(android.graphics.Color.GREEN);
							setupButtonRed.setTextColor(android.graphics.Color.WHITE);
							setupButtonBlue.setTextColor(android.graphics.Color.WHITE);
						}
					}));
					setupScreenLayoutBottomLeft.addView(setupButtonGreen);
					
					var setupButtonRed = clientButton("Red", null, "red");
					setupButtonRed.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonRed.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							setupColor = "red";
							setupButtonGreen.setTextColor(android.graphics.Color.WHITE);
							setupButtonRed.setTextColor(android.graphics.Color.RED);
							setupButtonBlue.setTextColor(android.graphics.Color.WHITE);
						}
					}));
					setupScreenLayoutBottomCenter.addView(setupButtonRed);
					
					var setupButtonBlue = clientButton("Blue", null, "blue");
					setupButtonBlue.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonBlue.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							setupColor = "blue";
							setupButtonGreen.setTextColor(android.graphics.Color.WHITE);
							setupButtonRed.setTextColor(android.graphics.Color.WHITE);
							setupButtonBlue.setTextColor(android.graphics.Color.BLUE);
						}
					}));
					setupScreenLayoutBottomRight.addView(setupButtonBlue);
					
					var setupText = clientTextView("You can always change the color on the Settings Screen.");
					setupText.setGravity(android.view.Gravity.CENTER);
					setupScreenLayout.addView(setupText);
					
					setupScreen = new widget.PopupWindow(setupScreenLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
					setupScreen.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#0080FF")));
					setupScreen.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occured: ' + error);
			}
		}
	}));
}

var accountManager;
var accountManagerLayoutLeft;
var accountManagerLayoutCenter;
var accountManagerLayoutRight;

VertexClientPE.showAccountManager = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					try {
						ModPE.readData("account_manager");
					} catch(e) {
						//No accounts on the list
					}
					var accountManagerLayout = new LinearLayout(ctx);
					accountManagerLayout.setOrientation(1);
					accountManagerLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var addAccountButton = clientButton("Add account");
					addAccountButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					addAccountButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//show add account dialog
							VertexClientPE.showAddAccountDialog();
						}
					}));
					accountManagerLayout.addView(addAccountButton);
					
					var accountManagerScrollView = new ScrollView(ctx);
					
					var accountManagerLayout1 = new LinearLayout(ctx);
					accountManagerLayout1.setOrientation(LinearLayout.HORIZONTAL);
					
					accountManagerScrollView.addView(accountManagerLayout1);
					accountManagerLayout.addView(accountManagerScrollView);
					
					accountManagerLayoutLeft = new LinearLayout(ctx);
					accountManagerLayoutLeft.setOrientation(1);
					accountManagerLayoutLeft.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					accountManagerLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					accountManagerLayout1.addView(accountManagerLayoutLeft);
					
					accountManagerLayoutCenter = new LinearLayout(ctx);
					accountManagerLayoutCenter.setOrientation(1);
					accountManagerLayoutCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					accountManagerLayoutCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					accountManagerLayout1.addView(accountManagerLayoutCenter);
					
					accountManagerLayoutRight = new LinearLayout(ctx);
					accountManagerLayoutRight.setOrientation(1);
					accountManagerLayoutRight.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					accountManagerLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					accountManagerLayout1.addView(accountManagerLayoutRight);
					
					var skinImage = new android.graphics.BitmapFactory.decodeFile(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe/custom.png");
					var steveImage = new android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/mob/steve.png"));
					var alexImage = new android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/mob/alex.png"));
					var skinViewer = new widget.ImageView(ctx);
					var skinViewerText = new widget.TextView(ctx);
					skinViewerText.setText("Sorry, your skin can't be viewed");
					if(ModPE.getCurrentUsedSkin() == "Standard_Alex") {
						skinViewer.setImageBitmap(alexImage);
					}if(ModPE.getCurrentUsedSkin() == "Standard_Steve") {
						skinViewer.setImageBitmap(steveImage);
					}if(ModPE.getCurrentUsedSkin() == "Standard_Custom") {
						skinViewer.setImageBitmap(skinImage);
					}if(ModPE.getCurrentUsedSkin() != "Standard_Alex" && ModPE.getCurrentUsedSkin() != "Standard_Steve" && ModPE.getCurrentUsedSkin() != "Standard_Custom") {
						accountManagerLayout.addView(skinViewerText);
					}
					var layoutParams = new android.widget.LinearLayout.LayoutParams(750, 750);
					skinViewer.setLayoutParams(layoutParams);
					//accountManagerLayout.addView(skinViewer);
					
					if(VertexClientPE.accounts != null) {
						for(var i in VertexClientPE.accounts) {
							var usernameText = new widget.TextView(ctx);
							usernameText.setText(VertexClientPE.accounts[i].username + "\n");
							accountManagerLayoutLeft.addView(usernameText);
							var useButton = clientButton("Use");
							useButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
							useButton.setOnClickListener(new android.view.View.OnClickListener({
								onClick: function(viewarg) {
									ModPE.setPlayerName(VertexClientPE.accounts[i].username.toString());
									accountManager.dismiss();
									showMenuButton();
								}
							}));
							accountManagerLayoutRight.addView(useButton);
						}
					}
					
					var setupButtonRed = clientButton("Two");
					setupButtonRed.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonRed.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//name
						}
					}));
					//accountManagerLayoutCenter.addView(setupButtonRed);
					
					var setupButtonBlue = clientButton("Test");
					setupButtonBlue.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonBlue.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//use
						}
					}));
					//accountManagerLayoutRight.addView(setupButtonBlue);
					
					accountManager = new widget.PopupWindow(accountManagerLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
					accountManager.setBackgroundDrawable(backgroundClientGUI);
					if(themeSetting == "red") {
						accountManager.setBackgroundDrawable(backgroundRedClientGUI);
					}if(themeSetting == "blue") {
						accountManager.setBackgroundDrawable(backgroundBlueClientGUI);
					}
					accountManager.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occured: ' + error);
			}
		}
	}));
}

VertexClientPE.setup = function() {
	if(VertexClientPE.loadMainSettings() == null) {
		VertexClientPE.showSetupScreen();
		setupDone();
	} else {
		VertexClientPE.showSplashScreen();
	}
}

VertexClientPE.setup();

var coordsButton;

function newLevel() {
	VertexClientPE.loadMainSettings();
	new java.lang.Thread(new java.lang.Runnable() {
		run: function() {
			VertexClientPE.checkForUpdates();
			if(latestVersion != CURRENT_VERSION && latestVersion != undefined) {
				VertexClientPE.clientMessage("There is a new version available (v" + latestVersion + " for Minecraft Pocket Edition v" + latestPocketEditionVersion + ")!");
			} else {
				ctx.runOnUiThread(new java.lang.Runnable() {
					run: function() {
						widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> You have the latest version"), 0).show();
					}
				});
			}
		}
	}).start();
	showHacksList();
}

function leaveGame() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
			if(hacksList != null) {
				hacksList.dismiss();
				GUI.dismiss();
			}
			if(topBar != null) {
				topBar.dismiss();
				vertexclientpecombatmenu.dismiss(); //Close
				vertexclientpebuildingmenu.dismiss(); //Close
				vertexclientpemovementmenu.dismiss(); //Close
				vertexclientpechatmenu.dismiss(); //Close
				vertexclientpemiscmenu.dismiss(); //Close
			}
			showMenuButton();
			VertexClientPE.saveMainSettings();
			VertexClientPE.editCopyrightText();
			serverEnabler = false;
			VertexClientPE.isRemote = false;
		}
	}));
}

function settingsScreen() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    var settingsMenuLayout = new LinearLayout(ctx);
                    settingsMenuLayout.setOrientation(1);
                    settingsMenuLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var settingsTitle = clientTextView("Settings", true);
					settingsTitle.setTextSize(25);
					settingsTitle.setGravity(android.view.Gravity.CENTER);
					settingsMenuLayout.addView(settingsTitle);
					
					var showHacksListSettingButton = new widget.CheckBox(ctx);
					showHacksListSettingButton.setText("Show hacks list");
					showHacksListSettingButton.setTextColor(android.graphics.Color.WHITE);
					if(showHacksListSetting == "on"){
					showHacksListSettingButton.setChecked(true);
					}else{
					showHacksListSettingButton.setChecked(false);
					}
					showHacksListSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
					if(showHacksListSetting == "off"){
					showHacksListSetting = "on";
					showHacksListSettingButton.setChecked(true);
					VertexClientPE.saveMainSettings();
					VertexClientPE.loadMainSettings();
					}else{
					showHacksListSetting = "off";
					showHacksListSettingButton.setChecked(false);
					VertexClientPE.saveMainSettings();
					VertexClientPE.loadMainSettings();
					}
					}
					}));
					
					var mainButtonPositionSettingButton = clientButton("Main button position", "Sets the main menu's button position");
					if(mainButtonPositionSetting == "top-right") {
						mainButtonPositionSettingButton.setText("Main button position | Top-right");
					} else if(mainButtonPositionSetting == "bottom-right") {
						mainButtonPositionSettingButton.setText("Main button position | Bottom-right");
					}
					mainButtonPositionSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(mainButtonPositionSetting == "top-right") {
							mainButtonPositionSetting = "bottom-right";
							mainButtonPositionSettingButton.setText("Main button position | Bottom-right");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(mainButtonPositionSetting == "bottom-right") {
							mainButtonPositionSetting = "top-right";
							mainButtonPositionSettingButton.setText("Main button position | Top-right");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						}
					}
					}));
					
					var healthTagsSettingButton = clientButton("HealthTags", "Displays an entity's name and health in the nametag");
					if(healthTagsSetting == "on") {
						healthTagsSettingButton.setText("HealthTags | ON");
					} else if(healthTagsSetting == "off") {
						healthTagsSettingButton.setText("HealthTags | OFF");
					}
					healthTagsSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(healthTagsSetting == "on") {
							healthTagsSetting = "off";
							healthTagsSettingButton.setText("HealthTags | OFF");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(healthTagsSetting == "off") {
							healthTagsSetting = "on";
							healthTagsSettingButton.setText("HealthTags | ON");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						}
					}
					}));
					
					var themeSettingButton = clientButton("Theme", "Sets the Client's theme");
					if(themeSetting == "green") {
						themeSettingButton.setText("Theme | Green");
					} else if(themeSetting == "red") {
						themeSettingButton.setText("Theme | Red");
					} else if(themeSetting == "blue") {
						themeSettingButton.setText("Theme | Blue");
					}
					themeSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(themeSetting == "green") {
							themeSetting = "red";
							themeSettingButton.setText("Theme | Red");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(themeSetting == "red") {
							themeSetting = "blue";
							themeSettingButton.setText("Theme | Blue");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(themeSetting == "blue") {
							themeSetting = "green";
							themeSettingButton.setText("Theme | Green");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						}
					}
					}));
					
					var spamMessageSettingButton = clientButton("Change AutoSpammer message", "Allows you to change the AutoSpammer spam message");
					spamMessageSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						VertexClientPE.showSpamMessageDialog();
					}
					}));
					
					settingsMenuLayout.addView(showHacksListSettingButton);
					settingsMenuLayout.addView(mainButtonPositionSettingButton);
					settingsMenuLayout.addView(healthTagsSettingButton);
					settingsMenuLayout.addView(themeSettingButton);
					settingsMenuLayout.addView(spamMessageSettingButton);

                    settingsMenu = new widget.PopupWindow(settingsMenuLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
                    settingsMenu.setBackgroundDrawable(backgroundClientGUI);
					if(themeSetting == "red") {
						settingsMenu.setBackgroundDrawable(backgroundRedClientGUI);
					}if(themeSetting == "blue") {
						settingsMenu.setBackgroundDrawable(backgroundBlueClientGUI);
					}
                    settingsMenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
                } catch(error) {
                    print('An error occured: ' + error);
                }
            }
        }));
}

function informationScreen() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    var informationMenuLayout = new LinearLayout(ctx);
                    informationMenuLayout.setOrientation(1);
                    informationMenuLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var informationTitle = clientTextView("Information", true);
					informationTitle.setTextSize(25);
					informationTitle.setGravity(android.view.Gravity.CENTER);
					informationMenuLayout.addView(informationTitle);
					
					var informationText = clientTextView("© peacestorm 2015 - 2016. Some rights reserved.\nThanks to @Herqux_ and @MyNameIsTriXz for graphic designs.", true);
					
					var websiteButton = clientButton("Website", "Show a URL of the official Vertex Client PE website");
					websiteButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Vertex-Client.ml"), 0).show();
					}
					}));
					
					informationMenuLayout.addView(informationText);
					informationMenuLayout.addView(websiteButton);

                    informationMenu = new widget.PopupWindow(informationMenuLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
                    informationMenu.setBackgroundDrawable(backgroundClientGUI);
					if(themeSetting == "red") {
						informationMenu.setBackgroundDrawable(backgroundRedClientGUI);
					}if(themeSetting == "blue") {
						informationMenu.setBackgroundDrawable(backgroundBlueClientGUI);
					}
                    informationMenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
                } catch(error) {
                    print('An error occured: ' + error);
                }
            }
        }));
}

VertexClientPE.showTopBar = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var topBarLayout = new LinearLayout(ctx);
					topBarLayout.setOrientation(LinearLayout.HORIZONTAL);
					topBarLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var topBarLayoutLeft = new LinearLayout(ctx);
					topBarLayoutLeft.setOrientation(1);
					topBarLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					topBarLayout.addView(topBarLayoutLeft);
					
					var topBarLayoutCenter = new LinearLayout(ctx);
					topBarLayoutCenter.setOrientation(1);
					topBarLayoutCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					topBarLayoutCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 2, LinearLayout.LayoutParams.WRAP_CONTENT));
					topBarLayout.addView(topBarLayoutCenter);
					
					var topBarLayoutRight = new LinearLayout(ctx);
					topBarLayoutRight.setOrientation(1);
					topBarLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					topBarLayout.addView(topBarLayoutRight);
					
					var moreButton = new Button(ctx);
					moreButton.setText("...");
					moreButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#00BFFF"), android.graphics.PorterDuff.Mode.MULTIPLY);
					moreButton.setTextColor(android.graphics.Color.WHITE);
					moreButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							VertexClientPE.showMoreDialog();
						}
					}));
					topBarLayoutLeft.addView(moreButton);
					
					var exitButton = new Button(ctx);
					exitButton.setText("X");
					exitButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
					exitButton.setTextColor(android.graphics.Color.WHITE);
					exitButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							topBar.dismiss();
							vertexclientpecombatmenu.dismiss(); //Close
							vertexclientpebuildingmenu.dismiss(); //Close
							vertexclientpemovementmenu.dismiss(); //Close
							vertexclientpechatmenu.dismiss(); //Close
							vertexclientpemiscmenu.dismiss(); //Close
							showMenuButton();
							showHacksList();
						}
					}));
					topBarLayoutRight.addView(exitButton);
					
					var logo4 = android.util.Base64.decode(logoImage, 0);
					var logoViewer4 = new widget.ImageView(ctx);
					logoViewer4.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(logo4, 0, logo4.length));
					topBarLayoutCenter.addView(logoViewer4);
					
					topBar = new widget.PopupWindow(topBarLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight() / 10);
					topBar.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#0080FF")));
					topBar.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occured: ' + error);
			}
		}
	}));
}

var display = new android.util.DisplayMetrics();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
var size = new Point();
ctx.getWindowManager().getDefaultDisplay().getRealSize(size);
var screenWidth = size.x;
var screenHeight = size.y;

var vertexclientpemenu = null;
var menuBtn = null;

var combattpopx = screenWidth / 3, combattpopy = 0;
var combatmX, combatmY;
var combatdown = false;

var buildingtpopx = Math.floor(screenWidth / 3 + screenWidth / 3), buildingtpopy = screenHeight / 2.25;
var buildingmX, buildingmY;
var buildingdown = false;

var movementtpopx = screenWidth / 3, movementtpopy = screenHeight / 2.25;
var movementmX, movementmY;
var movementdown = false;

var chattpopx = 0, chattpopy = 0;
var chatmX, chatmY;
var chatdown = false;

var misctpopx = 0, misctpopy = screenHeight / 2.25;
var miscmX, miscmY;
var miscdown = false;

var combatMenuShown = false;

VertexClientPE.showCombatMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				
				VertexClientPE.loadMainSettings();

                vertexclientpecombatmenu = new widget.PopupWindow(ctx);
                var combatMenuLayout1 = new LinearLayout(ctx);
                var combatMenuScrollView = new ScrollView(ctx);
                var combatMenuLayout = new LinearLayout(ctx);
				
                combatMenuLayout.setOrientation(1);
                combatMenuLayout1.setOrientation(1);
				
				combatMenuScrollView.addView(combatMenuLayout);
				
				if(themeSetting == "green") {
					var combatTitle = greenSubTitle("Combat", true);
				}if(themeSetting == "red") {
					var combatTitle = redSubTitle("Combat", true);
				}if(themeSetting == "blue") {
					var combatTitle = blueSubTitle("Combat", true);
				}
				combatTitle.setAlpha(0.54);
				combatMenuLayout1.addView(combatTitle);
				
				if(combatMenuShown == true) {
					combatTitle.setText("Combat [+]");
					combatMenuLayout1.addView(combatMenuScrollView);
				}else if(combatMenuShown == false) {
					combatTitle.setText("Combat [-]");
				}
				combatTitle.setGravity(android.view.Gravity.CENTER);

				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				var killAuraBtn = clientButton("KillAura", "Automatically kills all the near entities");
				killAuraBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				killAuraBtn.setAlpha(0.54);
				if(killAuraState == false) {
					killAuraBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(killAuraState == true) {
					killAuraBtn.setTextColor(android.graphics.Color.GREEN);
				}
				killAuraBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(killAuraState == false) {
						killAuraState = true;
						killAuraBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(killAuraState == true) {
						killAuraState = false;
						killAuraBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var droneBtn = clientButton("Drone", "Focuses on near entities to make it easier to kill them");
				droneBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				droneBtn.setAlpha(0.54);
				if(droneState == false) {
					droneBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(droneState == true) {
					droneBtn.setTextColor(android.graphics.Color.GREEN);
				}
				droneBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(droneState == false) {
						droneState = true;
						droneBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(droneState == true) {
						droneState = false;
						droneBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var bowAimbotBtn = clientButton("Bow Aimbot", "Makes shooting with a bow easier");
				bowAimbotBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				bowAimbotBtn.setAlpha(0.54);
				if(bowAimbotState == false) {
					bowAimbotBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(bowAimbotState == true) {
					bowAimbotBtn.setTextColor(android.graphics.Color.GREEN);
				}
				bowAimbotBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(bowAimbotState == false) {
						bowAimbotState = true;
						bowAimbotBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(bowAimbotState == true) {
						bowAimbotState = false;
						bowAimbotBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var instaKillBtn = clientButton("InstaKill", "Makes you able to kill an entity in one hit!");
				instaKillBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				instaKillBtn.setAlpha(0.54);
				if(instaKillState == false) {
					instaKillBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(instaKillState == true) {
					instaKillBtn.setTextColor(android.graphics.Color.GREEN);
				}
				instaKillBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(instaKillState == false) {
						instaKillState = true;
						instaKillBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(instaKillState == true) {
						instaKillState = false;
						instaKillBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var regenBtn = clientButton("Regen", "Instantly refills your health");
				regenBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				regenBtn.setAlpha(0.54);
				if(regenState == false) {
					regenBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(regenState == true) {
					regenBtn.setTextColor(android.graphics.Color.GREEN);
				}
				regenBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(regenState == false) {
						regenState = true;
						regenBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(regenState == true) {
						regenState = false;
						regenBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var arrowGunBtn = clientButton("ArrowGun", "Automatically shoots arrows wherever you look");
				arrowGunBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				arrowGunBtn.setAlpha(0.54);
				if(arrowGunState == false) {
					arrowGunBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(arrowGunState == true) {
					arrowGunBtn.setTextColor(android.graphics.Color.GREEN);
				}
				arrowGunBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(arrowGunState == false) {
						arrowGunState = true;
						arrowGunBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(arrowGunState == true) {
						arrowGunState = false;
						arrowGunBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var godModeBtn = clientButton("God Mode", "Gives you many hearts");
				godModeBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				godModeBtn.setAlpha(0.54);
				if(godModeState == false) {
					godModeBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(godModeState == true) {
					godModeBtn.setTextColor(android.graphics.Color.GREEN);
				}
				godModeBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(godModeState == false) {
						godModeState = true;
						godModeBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(godModeState == true) {
						godModeState = false;
						godModeBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));

				combatTitle.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(combatMenuShown == true) {
							combatMenuLayout1.removeView(combatMenuScrollView);
							combatTitle.setText("Combat [-]");
							combatMenuShown = false;
						}else if(combatMenuShown == false) {
							combatMenuLayout1.addView(combatMenuScrollView);
							combatTitle.setText("Combat [+]");
							combatMenuShown = true;
						}
                    }
                });
                combatTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        combatdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                combatTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!combatdown) {
                            combatmX = e.getX()
                            combatmY = e.getY()
                        }
                        if(combatdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - combatmX) * -1 / 10;
                                var Y = parseInt(e.getY() - combatmY) * -1 / 10;
                                combattpopx = combattpopx + X;
                                combattpopy = combattpopy + Y;
                                vertexclientpecombatmenu.update(parseInt(combattpopx), parseInt(combattpopy), -1, -1);
                            }
                            if(a == 1) combatdown = false;
                        }
                        return false;
                    }
                }));

				if(!VertexClientPE.isRemote) {
					combatMenuLayout.addView(killAuraBtn);
					combatMenuLayout.addView(droneBtn);
					combatMenuLayout.addView(bowAimbotBtn);
					combatMenuLayout.addView(instaKillBtn);
					combatMenuLayout.addView(regenBtn);
					combatMenuLayout.addView(arrowGunBtn);
					combatMenuLayout.addView(godModeBtn);
				}

                vertexclientpecombatmenu.setContentView(combatMenuLayout1);
				vertexclientpecombatmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpecombatmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpecombatmenu.setHeight(screenHeight / 2.25);
                vertexclientpecombatmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, combattpopx, combattpopy);

            } catch(error) {
                print("Error: " + error);
            }
        }
    });
}

var buildingMenuShown = false;

VertexClientPE.showBuildingMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
		VertexClientPE.loadMainSettings();

                vertexclientpebuildingmenu = new widget.PopupWindow(ctx);
                var buildingMenuLayout1 = new LinearLayout(ctx);
                var buildingMenuScrollView = new ScrollView(ctx);
                var buildingMenuLayout = new LinearLayout(ctx);
				
                buildingMenuLayout.setOrientation(1);
                buildingMenuLayout1.setOrientation(1);
				
				buildingMenuScrollView.addView(buildingMenuLayout);
				
				if(themeSetting == "green") {
					var buildingTitle = greenSubTitle("Building", true);
				}if(themeSetting == "red") {
					var buildingTitle = redSubTitle("Building", true);
				}if(themeSetting == "blue") {
					var buildingTitle = blueSubTitle("Building", true);
				}
				buildingTitle.setAlpha(0.54);
				buildingMenuLayout1.addView(buildingTitle);
				
				if(buildingMenuShown == true) {
					buildingTitle.setText("Building [+]");
					buildingMenuLayout1.addView(buildingMenuScrollView);
				}else if(buildingMenuShown == false) {
					buildingTitle.setText("Building [-]");
				}
				buildingTitle.setGravity(android.view.Gravity.CENTER);

				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				var instaMineBtn = clientButton("InstaMine", "Makes block destroy times as if you were in creative mode");
				instaMineBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				instaMineBtn.setAlpha(0.54);
				if(instaMineState == false) {
					instaMineBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(instaMineState == true) {
					instaMineBtn.setTextColor(android.graphics.Color.GREEN);
				}
				instaMineBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(instaMineState == false) {
						instaMineState = true;
						Block.setDestroyTimeAll(0);
						instaMineBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(instaMineState == true) {
						instaMineState = false;
						Block.setDestroyTimeDefaultAll();
						instaMineBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var autoMineBtn = clientButton("AutoMine", "Automatically mines the block you're looking at");
				autoMineBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				autoMineBtn.setAlpha(0.54);
				if(autoMineState == false) {
					autoMineBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(autoMineState == true) {
					autoMineBtn.setTextColor(android.graphics.Color.GREEN);
				}
				autoMineBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(autoMineState == false) {
						autoMineState = true;
						autoMineBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(autoMineState == true) {
						autoMineState = false;
						autoMineBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var stackDropBtn = clientButton("StackDrop", "Makes every block drop itself 64 times");
				stackDropBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				stackDropBtn.setAlpha(0.54);
				if(stackDropState == false) {
					stackDropBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(stackDropState == true) {
					stackDropBtn.setTextColor(android.graphics.Color.GREEN);
				}
				stackDropBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(stackDropState == false) {
						stackDropState = true;
						stackDropBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(stackDropState == true) {
						stackDropState = false;
						stackDropBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var nukerBtn = clientButton("Nuker", "Automatically destroys blocks around you");
				nukerBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				nukerBtn.setAlpha(0.54);
				if(nukerState == false) {
					nukerBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(nukerState == true) {
					nukerBtn.setTextColor(android.graphics.Color.GREEN);
				}
				nukerBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(nukerState == false) {
						nukerState = true;
						nukerBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(nukerState == true) {
						nukerState = false;
						nukerBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var powerExplosionsBtn = clientButton("PowerExplosions", "Makes explosions more powerful!");
				powerExplosionsBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				powerExplosionsBtn.setAlpha(0.54);
				if(powerExplosionsState == false) {
					powerExplosionsBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(powerExplosionsState == true) {
					powerExplosionsBtn.setTextColor(android.graphics.Color.GREEN);
				}
				powerExplosionsBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(powerExplosionsState == false) {
						powerExplosionsState = true;
						powerExplosionsBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(powerExplosionsState == true) {
						powerExplosionsState = false;
						powerExplosionsBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var tapRemoverBtn = clientButton("TapRemover", "Removes blocks and entities on tap");
				tapRemoverBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				tapRemoverBtn.setAlpha(0.54);
				if(tapRemoverState == false) {
					tapRemoverBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(tapRemoverState == true) {
					tapRemoverBtn.setTextColor(android.graphics.Color.GREEN);
				}
				tapRemoverBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(tapRemoverState == false) {
						tapRemoverState = true;
						tapRemoverBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(tapRemoverState == true) {
						tapRemoverState = false;
						tapRemoverBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var signEditorBtn = clientButton("SignEditor", "Let's you edit a sign's text");
				signEditorBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				signEditorBtn.setAlpha(0.54);
				if(signEditorState == false) {
					signEditorBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(signEditorState == true) {
					signEditorBtn.setTextColor(android.graphics.Color.GREEN);
				}
				signEditorBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(signEditorState == false) {
						signEditorState = true;
						signEditorBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(signEditorState == true) {
						signEditorState = false;
						signEditorBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var tapNukerBtn = clientButton("TapNuker", "Destroys blocks wherever you tap");
				tapNukerBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				tapNukerBtn.setAlpha(0.54);
				if(tapNukerState == false) {
					tapNukerBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(tapNukerState == true) {
					tapNukerBtn.setTextColor(android.graphics.Color.GREEN);
				}
				tapNukerBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(tapNukerState == false) {
						tapNukerState = true;
						tapNukerBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(tapNukerState == true) {
						tapNukerState = false;
						tapNukerBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var autoPlaceBtn = clientButton("AutoPlace", "Automatically places the block you're holding wherever you look");
				autoPlaceBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				autoPlaceBtn.setAlpha(0.54);
				if(autoPlaceState == false) {
					autoPlaceBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(autoPlaceState == true) {
					autoPlaceBtn.setTextColor(android.graphics.Color.GREEN);
				}
				autoPlaceBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(autoPlaceState == false) {
						autoPlaceState = true;
						autoPlaceBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(autoPlaceState == true) {
						autoPlaceState = false;
						autoPlaceBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));

				buildingTitle.setOnClickListener(new android.view.View.OnClickListener() {
                    		onClick: function(viewarg) {
						if(buildingMenuShown == true) {
							buildingMenuLayout1.removeView(buildingMenuScrollView);
							buildingTitle.setText("Building [-]");
							buildingMenuShown = false;
						}else if(buildingMenuShown == false) {
							buildingMenuLayout1.addView(buildingMenuScrollView);
							buildingTitle.setText("Building [+]");
							buildingMenuShown = true;
						}
                    }
                });
                buildingTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        buildingdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                buildingTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!buildingdown) {
                            buildingmX = e.getX()
                            buildingmY = e.getY()
                        }
                        if(buildingdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - buildingmX) * -1 / 10;
                                var Y = parseInt(e.getY() - buildingmY) * -1 / 10;
                                buildingtpopx = buildingtpopx + X;
                                buildingtpopy = buildingtpopy + Y;
                                vertexclientpebuildingmenu.update(parseInt(buildingtpopx), parseInt(buildingtpopy), -1, -1);
                            }
                            if(a == 1) buildingdown = false;
                        }
                        return false;
                    }
                }));

                buildingMenuLayout.addView(instaMineBtn);
                buildingMenuLayout.addView(autoMineBtn);
                buildingMenuLayout.addView(stackDropBtn);
                buildingMenuLayout.addView(nukerBtn);
                buildingMenuLayout.addView(powerExplosionsBtn);
                buildingMenuLayout.addView(tapRemoverBtn);
                buildingMenuLayout.addView(signEditorBtn);
                buildingMenuLayout.addView(tapNukerBtn);
                buildingMenuLayout.addView(autoPlaceBtn);

                vertexclientpebuildingmenu.setContentView(buildingMenuLayout1);
				vertexclientpebuildingmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpebuildingmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpebuildingmenu.setHeight(screenHeight / 2.25);
                vertexclientpebuildingmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, buildingtpopx, buildingtpopy);

            } catch(error) {
                print("Error: " + error);
            }
        }
    });
}

var movementMenuShown = false;

VertexClientPE.showMovementMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				VertexClientPE.loadMainSettings();

                vertexclientpemovementmenu = new widget.PopupWindow(ctx);
                var movementMenuLayout1 = new LinearLayout(ctx);
                var movementMenuScrollView = new ScrollView(ctx);
                var movementMenuLayout = new LinearLayout(ctx);
				
                movementMenuLayout.setOrientation(1);
                movementMenuLayout1.setOrientation(1);
				
				movementMenuScrollView.addView(movementMenuLayout);
				
				if(themeSetting == "green") {
					var movementTitle = greenSubTitle("Movement", true);
				}if(themeSetting == "red") {
					var movementTitle = redSubTitle("Movement", true);
				}if(themeSetting == "blue") {
					var movementTitle = blueSubTitle("Movement", true);
				}
				movementTitle.setAlpha(0.54);
				movementMenuLayout1.addView(movementTitle);
				
				if(movementMenuShown == true) {
					movementTitle.setText("Movement [+]");
					movementMenuLayout1.addView(movementMenuScrollView);
				}else if(movementMenuShown == false) {
					movementTitle.setText("Movement [-]");
				}
				movementTitle.setGravity(android.view.Gravity.CENTER);

				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				var flightBtn = clientButton("Flight", "Makes you able to fly even when you're in survival");
				flightBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				flightBtn.setAlpha(0.54);
				if(flightState == false) {
					flightBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(flightState == true) {
					flightBtn.setTextColor(android.graphics.Color.GREEN);
				}
				flightBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(flightState == false) {
						flightState = true;
						VertexClientPE.flight(1);
						flightBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(flightState == true) {
						flightState = false;
						VertexClientPE.flight(0);
						flightBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var autoWalkBtn = clientButton("AutoWalk", "Makes your player walk automatically");
				autoWalkBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				autoWalkBtn.setAlpha(0.54);
				if(autoWalkState == false) {
					autoWalkBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(autoWalkState == true) {
					autoWalkBtn.setTextColor(android.graphics.Color.GREEN);
				}
				autoWalkBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(autoWalkState == false) {
						autoWalkState = true;
						autoWalkBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(autoWalkState == true) {
						autoWalkState = false;
						autoWalkBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var wallHackBtn = clientButton("Wallhack", "Makes you able to walk through walls");
				wallHackBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				wallHackBtn.setAlpha(0.54);
				if(wallHackState == false) {
					wallHackBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(wallHackState == true) {
					wallHackBtn.setTextColor(android.graphics.Color.GREEN);
				}
				wallHackBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(wallHackState == false) {
						wallHackState = true;
						Entity.setCollisionSize(Player.getEntity(), 0, 0);
						wallHackBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(wallHackState == true) {
						wallHackState = false;
						Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
						wallHackBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var tapTeleporterBtn = clientButton("TapTeleporter", "Makes you teleport wherever you tap");
				tapTeleporterBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				tapTeleporterBtn.setAlpha(0.54);
				if(tapTeleporterState == false) {
					tapTeleporterBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(tapTeleporterState == true) {
					tapTeleporterBtn.setTextColor(android.graphics.Color.GREEN);
				}
				tapTeleporterBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(tapTeleporterState == false) {
						tapTeleporterState = true;
						tapTeleporterBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(tapTeleporterState == true) {
						tapTeleporterState = false;
						tapTeleporterBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var glideBtn = clientButton("Glide", "Reduces fall damage by slowing the player down when falling");
				glideBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				glideBtn.setAlpha(0.54);
				if(glideState == false) {
					glideBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(glideState == true) {
					glideBtn.setTextColor(android.graphics.Color.GREEN);
				}
				glideBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(glideState == false) {
						glideState = true;
						glideBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(glideState == true) {
						glideState = false;
						glideBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var walkOnLiquidsBtn = clientButton("Walk on Liquids", "Makes your player able to walk on liquids");
				walkOnLiquidsBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				walkOnLiquidsBtn.setAlpha(0.54);
				if(walkOnLiquidsState == false) {
					walkOnLiquidsBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(walkOnLiquidsState == true) {
					walkOnLiquidsBtn.setTextColor(android.graphics.Color.GREEN);
				}
				walkOnLiquidsBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(walkOnLiquidsState == false) {
						walkOnLiquidsState = true;
						walkOnLiquidsBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(walkOnLiquidsState == true) {
						walkOnLiquidsState = false;
						walkOnLiquidsBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var freecamBtn = clientButton("Freecam", "Explore the world without moving the player");
				freecamBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				freecamBtn.setAlpha(0.54);
				if(freecamState == false) {
					freecamBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(freecamState == true) {
					freecamBtn.setTextColor(android.graphics.Color.GREEN);
				}
				freecamBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(freecamState == false) {
						VertexClientPE.freecam(1);
						freecamState = true;
						freecamBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(freecamState == true) {
						freecamState = false;
						VertexClientPE.freecam(0);
						freecamBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var highJumpBtn = clientButton("HighJump", "Makes your player jump 2 blocks high");
				highJumpBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				highJumpBtn.setAlpha(0.54);
				if(highJumpState == false) {
					highJumpBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(highJumpState == true) {
					highJumpBtn.setTextColor(android.graphics.Color.GREEN);
				}
				highJumpBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(highJumpState == false) {
						highJumpState = true;
						highJumpBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(highJumpState == true) {
						highJumpState = false;
						highJumpBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var timerBtn = clientButton("Timer", "Makes the speed of the game 2 times faster");
				timerBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				timerBtn.setAlpha(0.54);
				if(timerState == false) {
					timerBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(timerState == true) {
					timerBtn.setTextColor(android.graphics.Color.GREEN);
				}
				timerBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(timerState == false) {
						timerState = true;
						ModPE.setGameSpeed(20 * 2);
						timerBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(timerState == true) {
						timerState = false;
						ModPE.setGameSpeed(20);
						timerBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));

				movementTitle.setOnClickListener(new android.view.View.OnClickListener() {
                    		onClick: function(viewarg) {
						if(movementMenuShown == true) {
							movementMenuLayout1.removeView(movementMenuScrollView);
							movementTitle.setText("Movement [-]");
							movementMenuShown = false;
						}else if(movementMenuShown == false) {
							movementMenuLayout1.addView(movementMenuScrollView);
							movementTitle.setText("Movement [+]");
							movementMenuShown = true;
						}
                    }
                });
                movementTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        movementdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                movementTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!movementdown) {
                            movementmX = e.getX()
                            movementmY = e.getY()
                        }
                        if(movementdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - movementmX) * -1 / 10;
                                var Y = parseInt(e.getY() - movementmY) * -1 / 10;
                                movementtpopx = movementtpopx + X;
                                movementtpopy = movementtpopy + Y;
                                vertexclientpemovementmenu.update(parseInt(movementtpopx), parseInt(movementtpopy), -1, -1);
                            }
                            if(a == 1) movementdown = false;
                        }
                        return false;
                    }
                }));

				if(!VertexClientPE.isRemote) {
					movementMenuLayout.addView(flightBtn);
					movementMenuLayout.addView(autoWalkBtn);
					movementMenuLayout.addView(wallHackBtn);
					movementMenuLayout.addView(tapTeleporterBtn);
					movementMenuLayout.addView(glideBtn);
					movementMenuLayout.addView(walkOnLiquidsBtn);
					//movementMenuLayout.addView(freecamBtn);
					movementMenuLayout.addView(highJumpBtn);
				}
                movementMenuLayout.addView(timerBtn);

                vertexclientpemovementmenu.setContentView(movementMenuLayout1);
				vertexclientpemovementmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpemovementmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpemovementmenu.setHeight(screenHeight / 2.25);
                vertexclientpemovementmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, movementtpopx, movementtpopy);

            } catch(error) {
                print("Error: " + error);
            }
        }
    });
}

var chatMenuShown = false;

VertexClientPE.showChatMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
		VertexClientPE.loadMainSettings();

                vertexclientpechatmenu = new widget.PopupWindow(ctx);
                var chatMenuLayout1 = new LinearLayout(ctx);
                var chatMenuScrollView = new ScrollView(ctx);
                var chatMenuLayout = new LinearLayout(ctx);
				
                chatMenuLayout.setOrientation(1);
                chatMenuLayout1.setOrientation(1);
				
				chatMenuScrollView.addView(chatMenuLayout);
				
				if(themeSetting == "green") {
					var chatTitle = greenSubTitle("Chat", true);
				}if(themeSetting == "red") {
					var chatTitle = redSubTitle("Chat", true);
				}if(themeSetting == "blue") {
					var chatTitle = blueSubTitle("Chat", true);
				}
				chatTitle.setAlpha(0.54);
				chatMenuLayout1.addView(chatTitle);
				
				if(chatMenuShown == true) {
					chatTitle.setText("Chat [+]");
					chatMenuLayout1.addView(chatMenuScrollView);
				}else if(chatMenuShown == false) {
					chatTitle.setText("Chat [-]");
				}
				chatTitle.setGravity(android.view.Gravity.CENTER);

				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				var autoSpammerBtn = clientButton("AutoSpammer", "Automatically spams the chat");
				autoSpammerBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				autoSpammerBtn.setAlpha(0.54);
				if(autoSpammerState == false) {
					autoSpammerBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(autoSpammerState == true) {
					autoSpammerBtn.setTextColor(android.graphics.Color.GREEN);
				}
				autoSpammerBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(autoSpammerState == false) {
						autoSpammerState = true;
						autoSpammerBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(autoSpammerState == true) {
						autoSpammerState = false;
						autoSpammerBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var homeCommandBtn = clientButton("/home", "Runs the /home command if the server or world you're on has it");
				homeCommandBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				homeCommandBtn.setAlpha(0.54);
				homeCommandBtn.setTextColor(android.graphics.Color.WHITE);
				homeCommandBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					chatHook("/home");
					Server.sendChat("/home");
				}
				}));

				chatTitle.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(chatMenuShown == true) {
							chatMenuLayout1.removeView(chatMenuScrollView);
							chatTitle.setText("Chat [-]");
							chatMenuShown = false;
						}else if(chatMenuShown == false) {
							chatMenuLayout1.addView(chatMenuScrollView);
							chatTitle.setText("Chat [+]");
							chatMenuShown = true;
						}
                    }
                });
                chatTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        chatdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                chatTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!chatdown) {
                            chatmX = e.getX()
                            chatmY = e.getY()
                        }
                        if(chatdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - chatmX) * -1 / 10;
                                var Y = parseInt(e.getY() - chatmY) * -1 / 10;
                                chattpopx = chattpopx + X;
                                chattpopy = chattpopy + Y;
                                vertexclientpechatmenu.update(parseInt(chattpopx), parseInt(chattpopy), -1, -1);
                            }
                            if(a == 1) chatdown = false;
                        }
                        return false;
                    }
                }));

                chatMenuLayout.addView(autoSpammerBtn);
                chatMenuLayout.addView(homeCommandBtn);

                vertexclientpechatmenu.setContentView(chatMenuLayout1);
                vertexclientpechatmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpechatmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpechatmenu.setHeight(screenHeight / 2.25);
                vertexclientpechatmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, chattpopx, chattpopy);

            } catch(error) {
                print("Error: " + error);
            }
        }
    });
}

var miscMenuShown = false;

VertexClientPE.showMiscMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				VertexClientPE.loadMainSettings();

                vertexclientpemiscmenu = new widget.PopupWindow(ctx);
                var miscMenuLayout1 = new LinearLayout(ctx);
                var miscMenuScrollView = new ScrollView(ctx);
                var miscMenuLayout = new LinearLayout(ctx);
				
                miscMenuLayout.setOrientation(1);
                miscMenuLayout1.setOrientation(1);
				
				miscMenuScrollView.addView(miscMenuLayout);
				
				if(themeSetting == "green") {
					var miscTitle = greenSubTitle("Misc", true);
				}if(themeSetting == "red") {
					var miscTitle = redSubTitle("Misc", true);
				}if(themeSetting == "blue") {
					var miscTitle = blueSubTitle("Misc", true);
				}
				miscTitle.setAlpha(0.54);
				miscMenuLayout1.addView(miscTitle);
				
				if(miscMenuShown == true) {
					miscTitle.setText("Misc [+]");
					miscMenuLayout1.addView(miscMenuScrollView);
				}else if(miscMenuShown == false) {
					miscTitle.setText("Misc [-]");
				}
				miscTitle.setGravity(android.view.Gravity.CENTER);

				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				var panicBtn = clientButton("Panic", "Disables all the hacks at once");
				panicBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				panicBtn.setAlpha(0.54);
				panicBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
				 VertexClientPE.panic();
				 topBar.dismiss();
			     showingMenu = false;
                 vertexclientpecombatmenu.dismiss(); //Close
                 vertexclientpebuildingmenu.dismiss(); //Close
                 vertexclientpemovementmenu.dismiss(); //Close
                 vertexclientpechatmenu.dismiss(); //Close
                 vertexclientpemiscmenu.dismiss(); //Close
	             VertexClientPE.showCombatMenu();
	             VertexClientPE.showBuildingMenu();
	             VertexClientPE.showMovementMenu();
				 VertexClientPE.showChatMenu();
	             VertexClientPE.showMiscMenu();
				 VertexClientPE.showTopBar();
				}
				}));
				
				var serverEnablerButton = clientButton("Server Enabler", "Makes more hacks work on multiplayer");
				serverEnablerButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				serverEnablerButton.setAlpha(0.54);
			    serverEnablerButton.setTextColor(android.graphics.Color.WHITE);
			    serverEnablerButton.setOnClickListener(new android.view.View.OnClickListener({
				    onClick: function(viewarg){
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						VertexClientPE.serverEnabler();
						showMenuButton();
						showHacksList();
				    }
			    }));
				
				var opPermButton = clientButton("OP Perm", "Gives you OP permission");
				opPermButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				opPermButton.setAlpha(0.54);
			    opPermButton.setTextColor(android.graphics.Color.WHITE);
			    opPermButton.setOnClickListener(new android.view.View.OnClickListener({
				    onClick: function(viewarg){
						Server.sendChat("/setuperm " + ModPE.getPlayerName() + " command.pocketmine.op");
						clientMessage("test");
				    }
			    }));
				
				var leetServerCrasherButton = clientButton("Leet Server Crasher", "Crashes Leet servers");
				leetServerCrasherButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				leetServerCrasherButton.setAlpha(0.54);
			    leetServerCrasherButton.setTextColor(android.graphics.Color.WHITE);
			    leetServerCrasherButton.setOnClickListener(new android.view.View.OnClickListener({
				    onClick: function(viewarg){
						Server.sendChat("//sphere 10 20");
						Server.sendChat("//set stone");
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> The server should crash now!"), 0).show();
				    }
			    }));
				
				var switchGamemodeButton = clientButton("Switch Gamemode", "Switches your gamemode");
				switchGamemodeButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				switchGamemodeButton.setAlpha(0.54);
			    switchGamemodeButton.setTextColor(android.graphics.Color.WHITE);
			    switchGamemodeButton.setOnClickListener(new android.view.View.OnClickListener({
				    onClick: function(viewarg){
						VertexClientPE.switchGameMode();
				    }
			    }));
				
				var xRayBtn = clientButton("X-Ray", "See ores through blocks (make sure Fancy Graphics is off)");
				xRayBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				xRayBtn.setAlpha(0.54);
				if(xRayState == false) {
					xRayBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(xRayState == true) {
					xRayBtn.setTextColor(android.graphics.Color.GREEN);
				}
				xRayBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(xRayState == false) {
						xRayState = true;
						VertexClientPE.xRay(1);
						xRayBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(xRayState == true) {
						xRayState = false;
						VertexClientPE.xRay(0);
						xRayBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var derpBtn = clientButton("Derp", "Rotates the player all the time");
				derpBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				derpBtn.setAlpha(0.54);
				if(derpState == false) {
					derpBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(derpState == true) {
					derpBtn.setTextColor(android.graphics.Color.GREEN);
				}
				derpBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(derpState == false) {
						derpState = true;
						derpBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(derpState == true) {
						derpState = false;
						derpBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var autoSwitchBtn = clientButton("AutoSwitch", "Switches the item in your hand all the time");
				autoSwitchBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				autoSwitchBtn.setAlpha(0.54);
				if(autoSwitchState == false) {
					autoSwitchBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(autoSwitchState == true) {
					autoSwitchBtn.setTextColor(android.graphics.Color.GREEN);
				}
				autoSwitchBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(autoSwitchState == false) {
						autoSwitchState = true;
						autoSwitchBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(autoSwitchState == true) {
						autoSwitchState = false;
						autoSwitchBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var zoomBtn = clientButton("Zoom");
				zoomBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				zoomBtn.setAlpha(0.54);
				if(zoomState == false) {
					zoomBtn.setTextColor(android.graphics.Color.WHITE);
				} else if(zoomState == true) {
					zoomBtn.setTextColor(android.graphics.Color.GREEN);
				}
				zoomBtn.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					if(zoomState == false) {
						zoomState = true;
						ModPE.setFov(10);
						zoomBtn.setTextColor(android.graphics.Color.GREEN);
					} else if(zoomState == true) {
						zoomState = false;
						ModPE.resetFov();
						zoomBtn.setTextColor(android.graphics.Color.WHITE);
					}
				}
				}));
				
				var pizzaOrderButton = clientButton("Order a Pizza", "Order a pizza of Domino's");
				pizzaOrderButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 10));
				pizzaOrderButton.setAlpha(0.54);
			    pizzaOrderButton.setTextColor(android.graphics.Color.WHITE);
			    pizzaOrderButton.setOnClickListener(new android.view.View.OnClickListener({
				    onClick: function(viewarg){
						pizzaOrderDialog();
				    }
			    }));

				miscTitle.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(miscMenuShown == true) {
							miscMenuLayout1.removeView(miscMenuScrollView);
							miscTitle.setText("Misc [-]");
							miscMenuShown = false;
						}else if(miscMenuShown == false) {
							miscMenuLayout1.addView(miscMenuScrollView);
							miscTitle.setText("Misc [+]");
							miscMenuShown = true;
						}
                    }
                });
                miscTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        miscdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                miscTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!miscdown) {
                            miscmX = e.getX()
                            miscmY = e.getY()
                        }
                        if(miscdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - miscmX) * -1 / 10;
                                var Y = parseInt(e.getY() - miscmY) * -1 / 10;
                                misctpopx = misctpopx + X;
                                misctpopy = misctpopy + Y;
                                vertexclientpemiscmenu.update(parseInt(misctpopx), parseInt(misctpopy), -1, -1);
                            }
                            if(a == 1) miscdown = false;
                        }
                        return false;
                    }
                }));

                miscMenuLayout.addView(panicBtn);
				if(VertexClientPE.isRemote) {
					if(!serverEnabler) {
						//miscMenuLayout.addView(serverEnablerButton);
					}
					miscMenuLayout.addView(opPermButton);
					miscMenuLayout.addView(leetServerCrasherButton);
				}
                miscMenuLayout.addView(switchGamemodeButton);
                miscMenuLayout.addView(xRayBtn);
				if(!VertexClientPE.isRemote) {
					miscMenuLayout.addView(derpBtn);
				}
                miscMenuLayout.addView(autoSwitchBtn);
                miscMenuLayout.addView(zoomBtn);
                miscMenuLayout.addView(pizzaOrderButton);

                vertexclientpemiscmenu.setContentView(miscMenuLayout1);
                vertexclientpemiscmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpemiscmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpemiscmenu.setHeight(screenHeight / 2.25);
                vertexclientpemiscmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, misctpopx, misctpopy);

            } catch(error) {
                print("Error: " + error);
            }
        }
    });
}

function showMenuButton() {
	VertexClientPE.loadMainSettings();
	var layout = new LinearLayout(ctx);
    layout.setOrientation(1);
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var menuBtn = clientButton("V");
    menuBtn.setTextColor(android.graphics.Color.WHITE); //Color
	menuBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 10, display.heightPixels / 10));
    menuBtn.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
	hacksList.dismiss();
	GUI.dismiss();
    //mainMenu("multiplayer");
	VertexClientPE.showCombatMenu();
	VertexClientPE.showBuildingMenu();
	VertexClientPE.showMovementMenu();
	VertexClientPE.showChatMenu();
	VertexClientPE.showMiscMenu();
	VertexClientPE.showTopBar();
    //exitOld();
	//showingMenu = true;
    }
    }));
    layout.addView(menuBtn);
     
    GUI = new widget.PopupWindow(layout, dip2px(40), dip2px(40));
    GUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
	if(mainButtonPositionSetting == "top-right") {
		GUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 90, 0);
	}if(mainButtonPositionSetting == "bottom-right") {
		GUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 90, 0);
	}
}

function showAccountManagerButton() {
	VertexClientPE.loadMainSettings();
	var layout = new LinearLayout(ctx);
    layout.setOrientation(1);
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var menuBtn = clientButton("A");
    menuBtn.setTextColor(android.graphics.Color.WHITE); //Color
	menuBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 10, display.heightPixels / 10));
    menuBtn.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
	if(hacksList != null) {
		hacksList.dismiss();
	}
	GUI.dismiss();
	accountManagerGUI.dismiss();
	VertexClientPE.showAccountManager();
    }
    }));
    layout.addView(menuBtn);
     
    accountManagerGUI = new widget.PopupWindow(layout, dip2px(40), dip2px(40));
    accountManagerGUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
	if(mainButtonPositionSetting == "top-right") {
		accountManagerGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 90, 0);
	}if(mainButtonPositionSetting == "bottom-right") {
		accountManagerGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 90, 0);
	}
}

VertexClientPE.clientTick = function() {
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            new android.os.Handler()
                .postDelayed(new java.lang.Runnable({
                    run: function() {
						try{
							if(GUI != null && GUI.isShowing() == false && (vertexclientpemiscmenu == null || vertexclientpemiscmenu.isShowing() == false) && (settingsMenu == null || settingsMenu.isShowing() == false) && (informationMenu == null || informationMenu.isShowing() == false) && (accountManager == null || accountManager.isShowing() == false)) {
								VertexClientPE.isRemote = true;
								net.zhuoweizhang.mcpelauncher.ScriptManager.isRemote = true;
								net.zhuoweizhang.mcpelauncher.ScriptManager.setLevelFakeCallback(true, false);
								//VertexClientPE.serverEnabler();
							}
						}catch(e) {
							print("Use BlockLauncher v1.12.2 or above!");
							ModPE.log(e);
						}
						if(GUI != null && GUI.isShowing() == false && (vertexclientpemiscmenu == null || vertexclientpemiscmenu.isShowing() == false) && (settingsMenu == null || settingsMenu.isShowing() == false) && (informationMenu == null || informationMenu.isShowing() == false) && (accountManager == null || accountManager.isShowing() == false)) {
							VertexClientPE.isRemote = true;
							showMenuButton();
							//showHacksList();
						}
                        eval(VertexClientPE.clientTick());
                    }
                }), 1000 / 70);
        }
    }))
}
 
function dip2px(dips){
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);
}
    //Add menu button
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
		//showMenuButton();
    }catch(err){
    print('An error occured: ' + err);
    }
    }}));
	
var autoSpammerState = false;
var zoomState = false;
var timerState = false;
var xRayState = false;
var regenState = false;
var instaKillState = false;
var walkOnLiquidsState = false;
var powerExplosionsState = false;
var tapTeleporterState = false;
var wallHackState = false;
var arrowGunState = false;
var autoMineState = false;
var instaMineState = false;
var stackDropState = false;
var glideState = false;
var tapRemoverState = false;
var killAuraState = false;
var nukerState = false;
var droneState = false;
var derpState = false;
var freecamState = false;
var signEditorState = false;
var tapNukerState = false;
var highJumpState = false;
var autoSwitchState = false;
var flightState = false;
var autoWalkState = false;
var bowAimbotState = false;
var autoPlaceState = false;
var godModeState = false;

var hacksList;
var StatesText;

var autoSpammerStateText = "";
var zoomStateText = "";
var timerStateText = "";
var xRayStateText = "";
var regenStateText = "";
var instaKillStateText = "";
var walkOnLiquidsStateText = "";
var powerExplosionsStateText = "";
var tapTeleporterStateText = "";
var wallHackStateText = "";
var arrowGunStateText = "";
var autoMineStateText = "";
var instaMineStateText = "";
var stackDropStateText = "";
var glideStateText = "";
var tapRemoverStateText = "";
var killAuraStateText = "";
var nukerStateText = "";
var droneStateText = "";
var derpStateText = "";
var freecamStateText = "";
var signEditorStateText = "";
var tapNukerStateText = "";
var highJumpStateText = "";
var autoSwitchStateText = "";
var flightStateText = "";
var autoWalkStateText = "";
var bowAimbotStateText = "";
var autoPlaceStateText = "";
var godModeStateText = "";

var enabledHacksCounter = 0;

function showHacksList() {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var display = new android.util.DisplayMetrics();
					com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);

					enabledHacksCounter = 0;
					
                    var hacksListLayout = new LinearLayout(ctx);
                    hacksListLayout.setOrientation(1);
                    hacksListLayout.setGravity(android.view.Gravity.CENTER);
					
					var logo2 = android.util.Base64.decode(logoImage, 0);
					var logoViewer2 = new widget.ImageView(ctx);
					logoViewer2.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(logo2, 0, logo2.length));
					logoViewer2.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getWidth() / 16));

					var VertexClientPEHacksListText = "Vertex Client PE " + CURRENT_VERSION;
                    if(autoSpammerState == true) {
                        autoSpammerStateText = " [AutoSpammer] ";
						enabledHacksCounter++;
                    } else if(autoSpammerState == false) {
                        autoSpammerStateText = "";
                    }
                    if(zoomState == true) {
                        zoomStateText = " [Zoom] ";
						enabledHacksCounter++;
                    } else if(zoomState == false) {
                        zoomStateText = "";
                    }
                    if(timerState == true) {
                        timerStateText = " [Timer] ";
						enabledHacksCounter++;
                    } else if(timerState == false) {
                        timerStateText = "";
                    }
                    if(xRayState == true) {
                        xRayStateText = " [X-Ray] ";
						enabledHacksCounter++;
                    } else if(xRayState == false) {
                        xRayStateText = "";
                    }
					if(regenState == true) {
                        regenStateText = " [Regen] ";
						enabledHacksCounter++;
                    } else if(regenState == false) {
                        regenStateText = "";
                    }
					if(instaKillState == true) {
                        instaKillStateText = " [InstaKill] ";
						enabledHacksCounter++;
                    } else if(instaKillState == false) {
                        instaKillStateText = "";
                    }
					if(walkOnLiquidsState == true) {
                        walkOnLiquidsStateText = " [Walk on Liquids] ";
						enabledHacksCounter++;
                    } else if(walkOnLiquidsState == false) {
                        walkOnLiquidsStateText = "";
                    }
					if(powerExplosionsState == true) {
                        powerExplosionsStateText = " [PowerExplosions] ";
						enabledHacksCounter++;
                    } else if(powerExplosionsState == false) {
                        powerExplosionsStateText = "";
                    }
					if(tapTeleporterState == true) {
                        tapTeleporterStateText = " [TapTeleporter] ";
						enabledHacksCounter++;
                    } else if(tapTeleporterState == false) {
                        tapTeleporterStateText = "";
                    }
					if(wallHackState == true) {
                        wallHackStateText = " [Wallhack] ";
						enabledHacksCounter++;
                    } else if(wallHackState == false) {
                        wallHackStateText = "";
                    }
					if(arrowGunState == true) {
                        arrowGunStateText = " [ArrowGun] ";
						enabledHacksCounter++;
                    } else if(arrowGunState == false) {
                        arrowGunStateText = "";
                    }
					if(autoMineState == true) {
                        autoMineStateText = " [AutoMine] ";
						enabledHacksCounter++;
                    } else if(autoMineState == false) {
                        autoMineStateText = "";
                    }
					if(instaMineState == true) {
                        instaMineStateText = " [InstaMine] ";
						enabledHacksCounter++;
                    } else if(instaMineState == false) {
                        instaMineStateText = "";
                    }
					if(stackDropState == true) {
                        stackDropStateText = " [StackDrop] ";
						enabledHacksCounter++;
                    } else if(stackDropState == false) {
                        stackDropStateText = "";
                    }
					if(glideState == true) {
                        glideStateText = " [Glide] ";
						enabledHacksCounter++;
                    } else if(glideState == false) {
                        glideStateText = "";
                    }
					if(tapRemoverState == true) {
                        tapRemoverStateText = " [TapRemover] ";
						enabledHacksCounter++;
                    } else if(tapRemoverState == false) {
                        tapRemoverStateText = "";
                    }
					if(killAuraState == true) {
                        killAuraStateText = " [KillAura] ";
						enabledHacksCounter++;
                    } else if(killAuraState == false) {
                        killAuraStateText = "";
                    }
					if(nukerState == true) {
                        nukerStateText = " [Nuker] ";
						enabledHacksCounter++;
                    } else if(nukerState == false) {
                        nukerStateText = "";
                    }
					if(droneState == true) {
                        droneStateText = " [Drone] ";
						enabledHacksCounter++;
                    } else if(droneState == false) {
                        droneStateText = "";
                    }
					if(derpState == true) {
                        derpStateText = " [Derp] ";
						enabledHacksCounter++;
                    } else if(derpState == false) {
                        derpStateText = "";
                    }
					if(freecamState == true) {
                        freecamStateText = " [Freecam] ";
						enabledHacksCounter++;
                    } else if(freecamState == false) {
                        freecamStateText = "";
                    }
					if(signEditorState == true) {
                        signEditorStateText = " [SignEditor] ";
						enabledHacksCounter++;
                    } else if(signEditorState == false) {
                        signEditorStateText = "";
                    }
					if(tapNukerState == true) {
                        tapNukerStateText = " [TapNuker] ";
						enabledHacksCounter++;
                    } else if(tapNukerState == false) {
                        tapNukerStateText = "";
                    }
					if(highJumpState == true) {
                        highJumpStateText = " [HighJump] ";
						enabledHacksCounter++;
                    } else if(highJumpState == false) {
                        highJumpStateText = "";
                    }
					if(autoSwitchState == true) {
                        autoSwitchStateText = " [AutoSwitch] ";
						enabledHacksCounter++;
                    } else if(autoSwitchState == false) {
                        autoSwitchStateText = "";
                    }
					if(flightState == true) {
                        flightStateText = " [Flight] ";
						enabledHacksCounter++;
                    } else if(flightState == false) {
                        flightStateText = "";
                    }
					if(autoWalkState == true) {
                        autoWalkStateText = " [AutoWalk] ";
						enabledHacksCounter++;
                    } else if(autoWalkState == false) {
                        autoWalkStateText = "";
                    }
					if(bowAimbotState == true) {
                        bowAimbotStateText = " [Bow Aimbot] ";
						enabledHacksCounter++;
                    } else if(bowAimbotState == false) {
                        bowAimbotStateText = "";
                    }
					if(autoPlaceState == true) {
                        autoPlaceStateText = " [AutoPlace] ";
						enabledHacksCounter++;
                    } else if(autoPlaceState == false) {
                        autoPlaceStateText = "";
                    }
					if(godModeState == true) {
                        godModeStateText = " [God Mode] ";
						enabledHacksCounter++;
                    } else if(godModeState == false) {
                        godModeStateText = "";
                    }
                    var VertexClientPEHacksListTextView = new widget.TextView(ctx);
                    VertexClientPEHacksListTextView.setText(VertexClientPEHacksListText);
					StatesText = clientTextView("Placeholder text", true);
					StatesText.setText(autoSpammerStateText + zoomStateText + timerStateText + xRayStateText + regenStateText + instaKillStateText + walkOnLiquidsStateText + powerExplosionsStateText + tapTeleporterStateText + wallHackStateText + arrowGunStateText + autoMineStateText + instaMineStateText + stackDropStateText + glideStateText + tapRemoverStateText + killAuraStateText + nukerStateText + droneStateText + derpStateText + freecamStateText + signEditorStateText + tapNukerStateText + highJumpStateText + autoSwitchStateText + flightStateText + autoWalkStateText + bowAimbotStateText + autoPlaceStateText + godModeStateText);
                    VertexClientPEHacksListTextView.setTextSize(20);
                    VertexClientPEHacksListTextView.setTypeface(null, android.graphics.Typeface.BOLD);
					VertexClientPEHacksListTextView.setTextColor(android.graphics.Color.GREEN);
                    StatesText.setTextSize(15);
					StatesText.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
					StatesText.setMarqueeRepeatLimit(-1);
					StatesText.setSingleLine();
					StatesText.setHorizontallyScrolling(true);
					StatesText.setSelected(true);
                    hacksListLayout.addView(logoViewer2);
                    hacksListLayout.addView(StatesText);
                    hacksList = new widget.PopupWindow(hacksListLayout, ctx.getWindowManager().getDefaultDisplay().getWidth() / 2, ctx.getWindowManager().getDefaultDisplay().getWidth() / 8);
                    hacksList.setBackgroundDrawable(backgroundClientGUI);
					if(themeSetting == "red") {
						hacksList.setBackgroundDrawable(backgroundRedClientGUI);
					}if(themeSetting == "blue") {
						hacksList.setBackgroundDrawable(backgroundBlueClientGUI);
					}
                    hacksList.setTouchable(false);
					if(showHacksListSetting != "off") {
                    hacksList.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
					}
                } catch(error) {
                    print('An error occured: ' + error);
                }
            }
        }));
}

function updateHacksList() {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					enabledHacksCounter = 0;
					
                    if(autoSpammerState == true) {
                        autoSpammerStateText = " [AutoSpammer] ";
						enabledHacksCounter++;
                    } else if(autoSpammerState == false) {
                        autoSpammerStateText = "";
                    }
                    if(zoomState == true) {
                        zoomStateText = " [Zoom] ";
						enabledHacksCounter++;
                    } else if(zoomState == false) {
                        zoomStateText = "";
                    }
                    if(timerState == true) {
                        timerStateText = " [Timer] ";
						enabledHacksCounter++;
                    } else if(timerState == false) {
                        timerStateText = "";
                    }
                    if(xRayState == true) {
                        xRayStateText = " [X-Ray] ";
						enabledHacksCounter++;
                    } else if(xRayState == false) {
                        xRayStateText = "";
                    }
					if(regenState == true) {
                        regenStateText = " [Regen] ";
						enabledHacksCounter++;
                    } else if(regenState == false) {
                        regenStateText = "";
                    }
					if(instaKillState == true) {
                        instaKillStateText = " [InstaKill] ";
						enabledHacksCounter++;
                    } else if(instaKillState == false) {
                        instaKillStateText = "";
                    }
					if(walkOnLiquidsState == true) {
                        walkOnLiquidsStateText = " [Walk on Liquids] ";
						enabledHacksCounter++;
                    } else if(walkOnLiquidsState == false) {
                        walkOnLiquidsStateText = "";
                    }
					if(powerExplosionsState == true) {
                        powerExplosionsStateText = " [PowerExplosions] ";
						enabledHacksCounter++;
                    } else if(powerExplosionsState == false) {
                        powerExplosionsStateText = "";
                    }
					if(tapTeleporterState == true) {
                        tapTeleporterStateText = " [TapTeleporter] ";
						enabledHacksCounter++;
                    } else if(tapTeleporterState == false) {
                        tapTeleporterStateText = "";
                    }
					if(wallHackState == true) {
                        wallHackStateText = " [Wallhack] ";
						enabledHacksCounter++;
                    } else if(wallHackState == false) {
                        wallHackStateText = "";
                    }
					if(arrowGunState == true) {
                        arrowGunStateText = " [ArrowGun] ";
						enabledHacksCounter++;
                    } else if(arrowGunState == false) {
                        arrowGunStateText = "";
                    }
					if(autoMineState == true) {
                        autoMineStateText = " [AutoMine] ";
						enabledHacksCounter++;
                    } else if(autoMineState == false) {
                        autoMineStateText = "";
                    }
					if(instaMineState == true) {
                        instaMineStateText = " [InstaMine] ";
						enabledHacksCounter++;
                    } else if(instaMineState == false) {
                        instaMineStateText = "";
                    }
					if(stackDropState == true) {
                        stackDropStateText = " [StackDrop] ";
						enabledHacksCounter++;
                    } else if(stackDropState == false) {
                        stackDropStateText = "";
                    }
					if(glideState == true) {
                        glideStateText = " [Glide] ";
						enabledHacksCounter++;
                    } else if(glideState == false) {
                        glideStateText = "";
                    }
					if(tapRemoverState == true) {
                        tapRemoverStateText = " [TapRemover] ";
						enabledHacksCounter++;
                    } else if(tapRemoverState == false) {
                        tapRemoverStateText = "";
                    }
					if(killAuraState == true) {
                        killAuraStateText = " [KillAura] ";
						enabledHacksCounter++;
                    } else if(killAuraState == false) {
                        killAuraStateText = "";
                    }
					if(nukerState == true) {
                        nukerStateText = " [Nuker] ";
						enabledHacksCounter++;
                    } else if(nukerState == false) {
                        nukerStateText = "";
                    }
					if(droneState == true) {
                        droneStateText = " [Drone] ";
						enabledHacksCounter++;
                    } else if(droneState == false) {
                        droneStateText = "";
                    }
					if(derpState == true) {
                        derpStateText = " [Derp] ";
						enabledHacksCounter++;
                    } else if(derpState == false) {
                        derpStateText = "";
                    }
					if(freecamState == true) {
                        freecamStateText = " [Freecam] ";
						enabledHacksCounter++;
                    } else if(freecamState == false) {
                        freecamStateText = "";
                    }
					if(signEditorState == true) {
                        signEditorStateText = " [SignEditor] ";
						enabledHacksCounter++;
                    } else if(signEditorState == false) {
                        signEditorStateText = "";
                    }
					if(tapNukerState == true) {
                        tapNukerStateText = " [TapNuker] ";
						enabledHacksCounter++;
                    } else if(tapNukerState == false) {
                        tapNukerStateText = "";
                    }
					if(highJumpState == true) {
                        highJumpStateText = " [HighJump] ";
						enabledHacksCounter++;
                    } else if(highJumpState == false) {
                        highJumpStateText = "";
                    }
					if(autoSwitchState == true) {
                        autoSwitchStateText = " [AutoSwitch] ";
						enabledHacksCounter++;
                    } else if(autoSwitchState == false) {
                        autoSwitchStateText = "";
                    }
					if(flightState == true) {
                        flightStateText = " [Flight] ";
						enabledHacksCounter++;
                    } else if(flightState == false) {
                        flightStateText = "";
                    }
					if(autoWalkState == true) {
                        autoWalkStateText = " [AutoWalk] ";
						enabledHacksCounter++;
                    } else if(autoWalkState == false) {
                        autoWalkStateText = "";
                    }
					if(bowAimbotState == true) {
                        bowAimbotStateText = " [Bow Aimbot] ";
						enabledHacksCounter++;
                    } else if(bowAimbotState == false) {
                        bowAimbotStateText = "";
                    }
					if(autoPlaceState == true) {
                        autoPlaceStateText = " [AutoPlace] ";
						enabledHacksCounter++;
                    } else if(autoPlaceState == false) {
                        autoPlaceStateText = "";
                    }
					if(godModeState == true) {
                        godModeStateText = " [God Mode] ";
						enabledHacksCounter++;
                    } else if(godModeState == false) {
                        godModeStateText = "";
                    }
					StatesText.setText(autoSpammerStateText + zoomStateText + timerStateText + xRayStateText + regenStateText + instaKillStateText + walkOnLiquidsStateText + powerExplosionsStateText + tapTeleporterStateText + wallHackStateText + arrowGunStateText + autoMineStateText + instaMineStateText + stackDropStateText + glideStateText + tapRemoverStateText + killAuraStateText + nukerStateText + droneStateText + derpStateText + freecamStateText + signEditorStateText + tapNukerStateText + highJumpStateText + autoSwitchStateText + flightStateText + autoWalkStateText + bowAimbotStateText + autoPlaceStateText + godModeStateText);
                } catch(error) {
                    print('An error occured: ' + error);
                }
            }
        }));
}

VertexClientPE.panic = function() {
	autoSpammerState = false;
	zoomState = false;
	ModPE.resetFov();
	timerState = false;
	ModPE.setGameSpeed(20);
	xRayState = false;
	VertexClientPE.xRay(0);
	regenState = false;
	instaKillState = false;
	walkOnLiquidsState = false;
	powerExplosionsState = false;
	tapTeleporterState = false;
	wallHackState = false;
	arrowGunState = false;
	autoMineState = false;
	instaMineState = false;
	stackDropState = false;
	glideState = false;
	tapRemoverState = false;
	killAuraState = false;
	nukerState = false;
	droneState = false;
	derpState = false;
	freecamState = false;
	VertexClientPE.freecam(0);
	signEditorState = false;
	tapNukerState = false;
	highJumpState = false;
	autoSwitchState = false;
	flightState = false;
	VertexClientPE.flight(0);
	autoWalkState = false;
	bowAimbotState = false;
	autoPlaceState = false;
	godModeState = false;
}

function setupDone() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
		try{
			var doneLayout = new LinearLayout(ctx);
			var doneButton = new Button(ctx);
			doneButton.setText("✓");//Text
			doneButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#008000"), android.graphics.PorterDuff.Mode.MULTIPLY);
			doneButton.setTextColor(android.graphics.Color.WHITE);
			doneButton.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					themeSetting = setupColor;
					VertexClientPE.saveMainSettings();
					VertexClientPE.editCopyrightText();
					doneUI.dismiss(); //Close
					setupScreen.dismiss();
					showMenuButton();
					//showAccountManagerButton();
				}
			}));
			doneLayout.addView(doneButton);
			
			doneUI = new widget.PopupWindow(doneLayout, dip2px(40), dip2px(40));
			doneUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
			doneUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
		} catch(exception) {
			print(exception);
		}
    }}));
}
	
function exit() {
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xLayout = new LinearLayout(ctxe);
    var xButton = new Button(ctxe);
    xButton.setText("X");//Text
    xButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xButton.setTextColor(android.graphics.Color.WHITE);
    xButton.setOnClickListener(new android.view.View.OnClickListener({
	    onClick: function(viewarg){
			topBar.dismiss();
			showingMenu = false;
	        vertexclientpecombatmenu.dismiss(); //Close
	        vertexclientpebuildingmenu.dismiss(); //Close
	        vertexclientpemovementmenu.dismiss(); //Close
	        vertexclientpechatmenu.dismiss(); //Close
	        vertexclientpemiscmenu.dismiss(); //Close
			showMenuButton();
			showHacksList();
	    }
    }));
    xLayout.addView(xButton);
	
    var moreLayout = new LinearLayout(ctxe);
    var moreButton = new Button(ctxe);
    moreButton.setText("...");
    moreButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#1E90FF"), android.graphics.PorterDuff.Mode.MULTIPLY);
    moreButton.setTextColor(android.graphics.Color.WHITE);
    moreButton.setOnLongClickListener(new android.view.View.OnLongClickListener() {
	    onLongClick: function(v, t) {
		    ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
		    widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Opens the \"More\" menu"), 0).show();
		    return true;
	    }
    });
    moreButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
		VertexClientPE.showMoreDialog();
    }
    }));
    moreLayout.addView(moreButton);
	
    exitUI = new widget.PopupWindow(xLayout, dip2px(40), dip2px(40));
    exitUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
	
	moreUI = new widget.PopupWindow(moreLayout, dip2px(40), dip2px(40));
    moreUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    moreUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
    }
    }}));
    }
	
function exitSettings(){
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xSettingsLayout = new LinearLayout(ctxe);
    var xSettingsButton = new Button(ctxe);
    xSettingsButton.setText('X');//Text
    xSettingsButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xSettingsButton.setTextColor(android.graphics.Color.WHITE);
    xSettingsButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
    exitSettingsUI.dismiss(); //Close
    settingsMenu.dismiss(); //Close
	showMenuButton();
	showHacksList();
    }
    }));
    xSettingsLayout.addView(xSettingsButton);
	
    exitSettingsUI = new widget.PopupWindow(xSettingsLayout, dip2px(40), dip2px(40));
    exitSettingsUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitSettingsUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
    }
    }}));
}

function exitInformation(){
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xInformationLayout = new LinearLayout(ctxe);
    var xInformationButton = new Button(ctxe);
    xInformationButton.setText('X');//Text
    xInformationButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xInformationButton.setTextColor(android.graphics.Color.WHITE);
    xInformationButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
    exitInformationUI.dismiss(); //Close
    informationMenu.dismiss(); //Close
	showMenuButton();
	showHacksList();
    }
    }));
    xInformationLayout.addView(xInformationButton);
	
    exitInformationUI = new widget.PopupWindow(xInformationLayout, dip2px(40), dip2px(40));
    exitInformationUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitInformationUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
    }
    }}));
}
	
var p, arrow;

var x, y, z;

var zahl = 0;

var count = 0;

function modTick() {
	var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	randomAki = Math.floor((Math.random() * 5));
	if(healthTagsSetting == "on") {
		VertexClientPE.healthTags();
	}if(showingMenu == true) {
		ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
			if(Player.getX() != null && Player.getX() != undefined) {
				coordsButton.setText("X: " + parseInt(Player.getX()) + "\nY: " + parseInt(Player.getY()) + "\nZ: " + parseInt(Player.getZ()));
			}
		}}));
	}if(autoSpammerState == true) {
		clientMessage("<" + ModPE.getPlayerName() + "> " + spamMessage);
		chatHook(spamMessage);
		Server.sendChat(spamMessage);
	}if(regenState == true) {
		VertexClientPE.regen();
	}if(walkOnLiquidsState == true) {
		if(Level.getTile(getPlayerX(), getPlayerY() - 2, getPlayerZ()) == 8 || Level.getTile(getPlayerX(), getPlayerY() - 2, getPlayerZ()) == 9 || Level.getTile(getPlayerX(), getPlayerY() - 2, getPlayerZ()) == 10 || Level.getTile(getPlayerX(), getPlayerY() - 2, getPlayerZ()) == 10) {
			setVelY(Player.getEntity(), 0);
		}
	}if(arrowGunState == true) {
		p = ((Entity.getPitch(getPlayerEnt()) + 90) * Math.PI) / 180;
		var y = ((Entity.getYaw(getPlayerEnt()) + 90) * Math.PI) / 180;
		var xx = Math.sin(p) * Math.cos(y);
		var yy = Math.sin(p) * Math.sin(y);
		var zz = Math.cos(p);
		arrow = Level.spawnMob(Player.getX() + xx, Player.getY() + zz, Player.getZ() + yy, 80);
		setVelX(arrow, xx);
		setVelY(arrow, zz);
		setVelZ(arrow, yy);

		//set it's speed by multiplying xx,yy,zz
		//example : (paintball, 2*xx);
	}if(autoMineState == true) {
		VertexClientPE.autoMine();
	}if(glideState == true) {
		VertexClientPE.glide();
	}if(killAuraState == true) {
		VertexClientPE.killAura();
	}if(nukerState == true) {
		VertexClientPE.nuker(Player.getX(), Player.getY(), Player.getZ());
	}if(droneState == true) {
				var mobs = Entity.getAll();

				for(var i = 0; i < mobs.length; i++)

				{

					var x = Entity.getX(mobs[i]) - getPlayerX();

					var y = Entity.getY(mobs[i]) - getPlayerY();

					var z = Entity.getZ(mobs[i]) - getPlayerZ();

					mobYaw = getYaw(mobs[i])

					if(Entity.getEntityTypeId(mobs[i]) == 63) {
						zahl = 0;
					}

					if(Entity.getEntityTypeId(mobs[i]) != 63) {
						zahl = 2;
					}

					if(x * x + y * y + z * z <= 4.5 * 4.5 && mobs[i] != getPlayerEnt())

					{

						if(randomAki == 1) {
							Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]) - 2.75, Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]));

							Entity.setRot(Player.getEntity(), 270, getPitch(Player.getEntity()));
						}


						if(randomAki == 2) {
							Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]) + 2.75, Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]));

							Entity.setRot(Player.getEntity(), 90, getPitch(Player.getEntity()));

						}


						if(randomAki == 3) {
							Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]), Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]) + 2.75);

							Entity.setRot(Player.getEntity(), 180, getPitch(Player.getEntity()));
						}

						if(randomAki == 4) {

							Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]), Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]) - 2.75);

							Entity.setRot(Player.getEntity(), 0, getPitch(Player.getEntity()));
						}
					}
				}
	}if(derpState == true) {
		var player = getPlayerEnt();
		var yaw = Math.floor(Entity.getYaw(player));
		var pitch = Math.floor(Entity.getPitch(player));
		Entity.setRot(player, yaw + 3, pitch);
	}if(freecamState == true) {
		if(freecamEntity != null) {
			var hit = getYaw() + 90;
			var hitY = getPitch() - 180;
			var yaw = getYaw();
			var pitch = getPitch();
			setRot(freecamEntity, yaw, pitch);
			x = Math.cos(hit * (Math.PI / 180));
			y = Math.sin(hitY * (Math.PI / 180));
			z = Math.sin(hit * (Math.PI / 180));
			setVelX(freecamEntity, x * 1);
			setVelY(freecamEntity, y * 1);
			setVelZ(freecamEntity, z * 1);
		}
	}if(highJumpState == true) {
		if(Player.isFlying() == false) {

			GetVY = Entity.getVelY(Player.getEntity())
			if(GetVY > 0.06) {

				Entity.setVelY(Player.getEntity(), 0.54);
				count++

			}




			if(count == 1) {
				Entity.setVelY(Player.getEntity(), 0.48);
			}



			if(count == 2) {
				Entity.setVelY(Player.getEntity(), 0.42);
			}


			if(count == 3) {
				Entity.setVelY(Player.getEntity(), 0.36);
			}

			if(count == 4) {
				Entity.setVelY(Player.getEntity(), 0.31);
			}



			if(count == 5) {
				Entity.setVelY(Player.getEntity(), 0.26);
			}

			if(count == 6) {
				Entity.setVelY(Player.getEntity(), 0.22);
			}


			if(count == 7) {
				Entity.setVelY(Player.getEntity(), -0.078);
				count = 0;
			}


		}
	}if(autoSwitchState == true) {
		if(Player.getSelectedSlotId() != 7) {
			Player.setSelectedSlotId(Player.getSelectedSlotId() + 1);
		} else {
			Player.setSelectedSlotId(0);
		}
	}if(flightState == true) {
		Player.setFlying(1);
	}if(autoWalkState == true) {
		VertexClientPE.autoWalk();
	}if(autoPlaceState == true) {
		VertexClientPE.autoPlace();
	}if(godModeState == true) {
		VertexClientPE.godMode();
	}
}
	
function destroyBlock(x, y, z, side) {
    var data = Level.getData(x, y, z);
    var tile = Level.getTile(x, y, z);
    var gamemode = Level.getGameMode();
    if(gamemode == 0) {
        if(stackDropState == true) {
            if(tile == 1 && getCarriedItem() == 270 || tile == 1 && getCarriedItem() == 257 || tile == 1 && getCarriedItem() == 274 || tile == 1 && getCarriedItem() == 278 || tile == 1 && getCarriedItem() == 285 || tile == 4 && getCarriedItem() == 270 || tile == 4 && getCarriedItem() == 257 || tile == 4 && getCarriedItem() == 274 || tile == 4 && getCarriedItem() == 278 || tile == 4 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 4, 63);
            } else if(tile == 1 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285 || tile == 4 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 4, 64);
            }
            if(tile == 2 || tile == 3) {
                Level.dropItem(x, y, z, 0.5, 3, 63);
            }
            if(tile == 5 || tile == 6 || tile == 12 || tile == 13) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            }
            if(tile == 14 && getCarriedItem() == 257 || tile == 14 && getCarriedItem() == 278 || tile == 14 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 14, 63);
            } else if(tile == 14 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 14, 64);
            }
            if(tile == 15 && getCarriedItem() == 257 || tile == 15 && getCarriedItem() == 274 || tile == 15 && getCarriedItem() == 278 || tile == 15 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 15, 63);
            } else if(tile == 15 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 15, 64);
            }
            if(tile == 16 && getCarriedItem() == 270 || tile == 16 && getCarriedItem() == 257 || tile == 16 && getCarriedItem() == 274 || tile == 16 && getCarriedItem() == 278 || tile == 16 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 263, 63);
            } else if(tile == 16 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 263, 64);
            }
            if(tile == 17) {
                Level.dropItem(x, y, z, 0.5, 17, 63, data);
            }
            if(tile == 18 && getCarriedItem() == 359) {
                Level.dropItem(x, y, z, 0.5, 18, 63);
            } else if(tile == 18 && getCarriedItem() != 359) {
                Level.dropItem(x, y, z, 0.5, 18, 64);
            }
            if(tile == 19 || tile == 20) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            }
            if(tile == 21 && getCarriedItem() == 257 || tile == 21 && getCarriedItem() == 274 || tile == 21 && getCarriedItem() == 278 || tile == 21 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 21, 63);
            } else if(tile == 21 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 21, 64);
            }
            if(tile == 22 && getCarriedItem() == 257 || tile == 22 && getCarriedItem() == 274 || tile == 22 && getCarriedItem() == 278 || tile == 22 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 22, 63);
            } else if(tile == 22 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 22, 64);
            }
            if(tile == 24 && getCarriedItem() == 270 || tile == 24 && getCarriedItem() == 257 || tile == 24 && getCarriedItem() == 274 || tile == 24 && getCarriedItem() == 278 || tile == 24 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 24, 63);
            } else if(tile == 24 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 24, 64);
            }
            if(tile == 26) {
                Level.dropItem(x, y, z, 0.5, 26, 63, data);
            }
            if(tile == 27 && getCarriedItem() == 270 || tile == 27 && getCarriedItem() == 257 || tile == 27 && getCarriedItem() == 274 || tile == 27 && getCarriedItem() == 278 || tile == 27 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 27, 63);
            } else if(tile == 27 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 27, 64);
            }
            if(tile == 30 && getCarriedItem() == 359) {
                Level.dropItem(x, y, z, 0.5, 287, 63);
            } else if(tile == 30 && getCarriedItem() != 359) {
                Level.dropItem(x, y, z, 0.5, 287, 64);
            }
            if(tile == 31 && getCarriedItem() == 359 || tile == 32 & getCarriedItem() == 359) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            } else if(tile == 31 && getCarriedItem() != 359 || tile == 32 && getCarriedItem() != 359) {
                Level.dropItem(x, y, z, 0.5, tile, 64, data);
            }
            if(tile == 37 || tile == 38 || tile == 39 || tile == 40) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 41 && getCarriedItem() == 257 || tile == 41 && getCarriedItem() == 278 || tile == 41 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 41, 63);
            } else if(tile == 41 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 41, 64);
            }
            if(tile == 42 && getCarriedItem() == 257 || tile == 42 && getCarriedItem() == 274 || tile == 42 && getCarriedItem() == 278 || tile == 42 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 42, 63);
            } else if(tile == 42 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 42, 64);
            }
            if(tile == 44 && getCarriedItem() == 257 || tile == 44 && getCarriedItem() == 270 || tile == 44 && getCarriedItem() == 274 || tile == 44 && getCarriedItem() == 278 || tile == 44 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 44, 63);
            } else if(tile == 44 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 44, 64);
            }
            if(tile == 45 && getCarriedItem() == 270 || tile == 45 && getCarriedItem() == 257 || tile == 45 && getCarriedItem() == 274 || tile == 45 && getCarriedItem() == 278 || tile == 45 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 45, 63);
            } else if(tile == 45 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 45, 64);
            }
            if(tile == 47) {
                Level.dropItem(x, y, z, 0.5, 340, 61);
            }
            if(tile == 48 && getCarriedItem() == 270 || tile == 48 && getCarriedItem() == 257 || tile == 48 && getCarriedItem() == 274 || tile == 48 && getCarriedItem() == 278 || tile == 48 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 48, 63);
            } else if(tile == 48 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 48, 64);
            }
            if(tile == 49 && getCarriedItem() == 278 || tile == 246 && getCarriedItem() == 278) {
                Level.dropItem(x, y, z, 0.5, 49, 63);
            } else if(tile == 49 && getCarriedItem() != 278 || tile == 246 && getCarriedItem() != 278) {
                Level.dropItem(x, y, z, 0.5, 49, 64);
            }
            if(tile == 50 || tile == 53 || tile == 54) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 56 && getCarriedItem() == 257 || tile == 57 && getCarriedItem() == 257 || tile == 56 && getCarriedItem() == 278 || tile == 57 && getCarriedItem() == 278 || tile == 56 && getCarriedItem() == 285 || tile == 57 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            } else if(tile == 56 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285 || tile == 57 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, tile, 64);
            }
            if(tile == 61 && getCarriedItem() == 270 || tile == 61 && getCarriedItem() == 257 || tile == 61 && getCarriedItem() == 274 || tile == 61 && getCarriedItem() == 278 || tile == 61 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 61, 63);
            } else if(tile == 61 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 61, 64);
            }
            if(tile == 63 || tile == 64 || tile == 65 || tile == 66) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 67 && getCarriedItem() == 270 || tile == 67 && getCarriedItem() == 257 || tile == 67 && getCarriedItem() == 274 || tile == 67 && getCarriedItem() == 278 || tile == 67 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 67, 63);
            } else if(tile == 67 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 67, 64);
            }
            if(tile == 73 && getCarriedItem() == 257 || tile == 73 && getCarriedItem() == 278 || tile == 73 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 331, 63);
            } else if(tile == 73 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 331, 64);
            }
            if(tile == 78 && getCarriedItem() == 256 || tile == 78 && getCarriedItem() == 269 || tile == 78 && getCarriedItem() == 273 || tile == 78 && getCarriedItem() == 277 || tile == 78 && getCarriedItem() == 284) {
                Level.dropItem(x, y, z, 0.5, 332, 63);
            } else if(tile == 78 && getCarriedItem() != 256 && getCarriedItem() != 269 && getCarriedItem() != 273 && getCarriedItem() != 277 && getCarriedItem() != 284) {
                Level.dropItem(x, y, z, 0.5, 332, 64);
            }
            if(tile == 80 && getCarriedItem() == 256 || tile == 80 && getCarriedItem() == 269 || tile == 80 && getCarriedItem() == 273 || tile == 80 && getCarriedItem() == 277 || tile == 80 && getCarriedItem() == 284) {
                Level.dropItem(x, y, z, 0.5, 332, 60);
            } else if(tile == 80 && getCarriedItem() != 256 && getCarriedItem() != 269 && getCarriedItem() != 273 && getCarriedItem() != 277 && getCarriedItem() != 284) {
                Level.dropItem(x, y, z, 0.5, 332, 64);
            }
            if(tile == 81 || tile == 82 || tile == 83 || tile == 85 || tile == 86 || tile == 89 || tile == 91 || tile == 96 || tile == 102 || tile == 107) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 87 && getCarriedItem() == 257 || tile == 87 && getCarriedItem() == 270 || tile == 87 && getCarriedItem() == 274 || tile == 87 && getCarriedItem() == 278 || tile == 87 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 87, 63);
            } else if(tile == 87 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 87, 64);
            }
            if(tile == 98 && getCarriedItem() == 257 || tile == 98 && getCarriedItem() == 270 || tile == 98 && getCarriedItem() == 274 || tile == 98 && getCarriedItem() == 278 || tile == 98 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 98, 63);
            } else if(tile == 98 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 98, 64);
            }
            if(tile == 101 && getCarriedItem() == 257 || tile == 101 && getCarriedItem() == 270 || tile == 101 && getCarriedItem() == 274 || tile == 101 && getCarriedItem() == 278 || tile == 101 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 101, 63);
            } else if(tile == 101 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 101, 64);
            }
            if(tile == 103) {
                Level.dropItem(x, y, z, 0.5, 360, 57);
            }
            if(tile == 108 && getCarriedItem() == 257 || tile == 108 && getCarriedItem() == 270 || tile == 108 && getCarriedItem() == 274 || tile == 108 && getCarriedItem() == 278 || tile == 108 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 108, 63);
            } else if(tile == 108 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 108, 64);
            }
            if(tile == 109 && getCarriedItem() == 257 || tile == 109 && getCarriedItem() == 270 || tile == 109 && getCarriedItem() == 274 || tile == 109 && getCarriedItem() == 278 || tile == 109 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 109, 63);
            } else if(tile == 109 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 109, 64);
            }
            if(tile == 112 && getCarriedItem() == 257 || tile == 112 && getCarriedItem() == 270 || tile == 112 && getCarriedItem() == 274 || tile == 112 && getCarriedItem() == 278 || tile == 112 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 112, 63);
            } else if(tile == 112 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 112, 64);
            }
            if(tile == 114 && getCarriedItem() == 257 || tile == 114 && getCarriedItem() == 270 || tile == 114 && getCarriedItem() == 274 || tile == 114 && getCarriedItem() == 278 || tile == 114 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 114, 63);
            } else if(tile == 114 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 114, 64);
            }
            if(tile == 128 && getCarriedItem() == 257 || tile == 128 && getCarriedItem() == 270 || tile == 128 && getCarriedItem() == 274 || tile == 128 && getCarriedItem() == 278 || tile == 128 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 128, 63);
            } else if(tile == 128 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 128, 64);
            }
            if(tile == 134 || tile == 135 || tile == 136 || tile == 158 || tile == 170 || tile == 171 || tile == 245 || tile == 247) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            }
            if(tile == 139 && getCarriedItem() == 257 || tile == 139 && getCarriedItem() == 270 || tile == 139 && getCarriedItem() == 274 || tile == 139 && getCarriedItem() == 278 || tile == 139 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 139, 63);
            } else if(tile == 139 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 139, 64);
            }
            if(tile == 155 && getCarriedItem() == 257 || tile == 155 && getCarriedItem() == 270 || tile == 155 && getCarriedItem() == 274 || tile == 155 && getCarriedItem() == 278 || tile == 155 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 155, 63);
            } else if(tile == 155 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 155, 64);
            }
            if(tile == 156 && getCarriedItem() == 257 || tile == 156 && getCarriedItem() == 270 || tile == 156 && getCarriedItem() == 274 || tile == 156 && getCarriedItem() == 278 || tile == 156 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 156, 63);
            } else if(tile == 156 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 156, 64);
            }
            if(tile == 173 && getCarriedItem() == 257 || tile == 173 && getCarriedItem() == 270 || tile == 173 && getCarriedItem() == 274 || tile == 173 && getCarriedItem() == 278 || tile == 173 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 173, 63);
            } else if(tile == 173 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 173, 64);
            }
            if(tile == 244 && getCarriedItem() == 257 || tile == 244 && getCarriedItem() == 270 || tile == 244 && getCarriedItem() == 274 || tile == 244 && getCarriedItem() == 278 || tile == 244 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 457, 63);
            } else if(tile == 244 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 457, 64);
            }
            if(tile == 250) {
                Level.dropItem(x, y, z, 0, 247, 64);
            }
        }
    }
}

	var signX, signY, signZ;
	
	function useItem(x, y, z, i, b, s) {
		if(tapTeleporterState == true) {
			preventDefault();
			Entity.setPosition(Player.getEntity(), x, y + 3, z);
		}if(tapRemoverState == true) {
			preventDefault();
			setTile(x, y, z, 0);
		}if(signEditorState == true) {
			if(b == 63 || b == 68) {
				preventDefault();
				signX = x;
				signY = y;
				signZ = z;
				VertexClientPE.showSignEditorDialog();
			}
		}if(tapNukerState == true) {
			preventDefault();
			VertexClientPE.nuker(x, y, z);
		}
	}
	
	function attackHook(attacker, victim) {
		if(instaKillState == true) {
			if(Player.getEntity() == attacker) {
				Entity.setHealth(victim, 1);
			}
		}if(tapRemoverState == true) {
			if(Player.getEntity() == attacker) {
				preventDefault();
				Entity.remove(victim);
			}
		}if(freecamState == true) {
			preventDefault();
		}
	}
	
function entityAddedHook(entity) {
	if(bowAimbotState == true) {
		if(Entity.getEntityTypeId(entity) == EntityType.ARROW) {
			VertexClientPE.bowAimbot(entity);
		}
	}
}
	
function entityRemovedHook(entity) {
	if(entity == freecamEntity) {
		ModPE.setCamera(Player.getEntity());
		freecamState = false;
		VertexClientPE.freecam(1);
		freecamState = true;
	}
}
	
var powerExplosionsStage = 0;

function explodeHook(entity, x, y, z, power, onFire) {
	if(powerExplosionsState == true && powerExplosionsStage == 0) {
		powerExplosionsStage = 1;
		preventDefault();
		Level.explode(x, y, z, 10);
		powerExplosionsStage = 0;
	}
}
	
function chatHook(text) {
	if(text.charAt(0) == ".") {
		preventDefault();
		VertexClientPE.commandManager(text);
	}
}
 
//End
