/**
 * ###############################################################
 * @name Vertex Client PE
 * @version v1.0
 * @author peacestorm (@AgameR_Modder)
 * @credits Herqux_, MyNameIsTriXz, Godsoft029, ArceusMatt, LPMG
 *
 * Thanks to NoCopyrightSounds and their artists for the music!
 *
 * ###############################################################
 */

// #####################
// # ANDROID FUNCTIONS #
// #####################

var widget = android.widget;
var graphics = android.graphics;
var view = android.view;
var animation = view.animation;
var LinearLayout = widget.LinearLayout;
var ScrollView = widget.ScrollView;
var Button = widget.Button;
var EditText = widget.EditText;
var SeekBar = widget.SeekBar;
var Point = graphics.Point;
var KeyEvent = view.KeyEvent;
var AnimationUtils = animation.AnimationUtils;
var TranslateAnimation = animation.TranslateAnimation;
var AccelerateInterpolator = animation.AccelerateInterpolator;
var ViewPager = android.support.v4.view.ViewPager;

var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var display = new android.util.DisplayMetrics();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
var size = new Point();
ctx.getWindowManager().getDefaultDisplay().getRealSize(size);
var screenWidth = size.x;
var screenHeight = size.y;

var topBarHeight = screenHeight / 10;

var customHeight = topBarHeight / 2;

/*KeyEvent.Callback.onKeyUp = function(keyCode, event) {
    switch(keyCode) {
        case KeyEvent.KEYCODE_D:
            print("test");
            return true;
        case KeyEvent.KEYCODE_F:
            moveShip(MOVE_RIGHT);
            return true;
        case KeyEvent.KEYCODE_J:
            fireMachineGun();
            return true;
        case KeyEvent.KEYCODE_K:
            fireMissile();
            return true;
        default:
            return super.onKeyUp(keyCode, event);
    }
}*/

// ####################
// # CLIENT FUNCTIONS #
// ####################

//Don't copy anything without my permission!

String.prototype.replaceAll = function(str1, str2, ignore) 
{
    return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g,"\\$&"),(ignore?"gi":"g")),(typeof(str2)=="string")?str2.replace(/\$/g,"$$$$"):str2);
}

var isSupported = true;

var VertexClientPE = {
	name: "Vertex Client PE",
	getName: function() {
		return VertexClientPE.name;
	},
	isDev: false,
	isDevMode: function() {
		return VertexClientPE.isDev;
	},
	isSupported: function() {
		return isSupported;
	},
	accounts: new org.json.JSONArray()
};

var _0x199a=["\x69\x73\x50\x72\x6F","\x67\x65\x74\x50\x72\x65\x66\x65\x72\x65\x6E\x63\x65\x73","\x56\x65\x72\x74\x65\x78\x43\x6C\x69\x65\x6E\x74\x50\x45\x2E\x69\x73\x50\x72\x6F","\x67\x65\x74\x53\x74\x72\x69\x6E\x67","\x73\x65\x74\x49\x73\x50\x72\x6F","\x54\x68\x69\x73\x49\x73\x53\x70\x61\x72\x74\x61"];VertexClientPE[_0x199a[0]]=function(){var _0xf36dx1=ctx[_0x199a[1]](ctx.MODE_PRIVATE);return _0xf36dx1[_0x199a[3]](_0x199a[2],null)};VertexClientPE[_0x199a[4]]=function(){var _0xf36dx2=_0x199a[5];return _0xf36dx2}

VertexClientPE.isRemote = false;
VertexClientPE.playerIsInGame = false;

VertexClientPE.currentVersion = "1.0";
VertexClientPE.targetVersion = "MCPE v0.14.x alpha";
VertexClientPE.latestVersion = "Unknown";
var latestPocketEditionVersion;
var news;

var movementMenuLayout;
var favMenuLayout;
var menuBtn;
var logoViewer2;
var chestUI;
var lsdMenu;
var lsdLayout;

var flightMsgShown = false;

var fancyChatState = false;
var delaySpammerState = false;
var autoSwordState = false;
var yesCheatPlusState = false;

var showingMenu = false;

var setupColor = "green";

var f = 0;

VertexClientPE.font = android.graphics.Typeface.create("sans-serif-thin", android.graphics.Typeface.NORMAL);

var tts = new android.speech.tts.TextToSpeech(ctx, new android.speech.tts.TextToSpeech.OnInitListener({
	onInit: function(status) {
		tts.setLanguage(java.util.Locale.US);
	}
}));

/**
 * ##########
 *  SETTINGS
 * ##########
 */
 
var hacksListModeSetting = "on";
var mainButtonPositionSetting = "top-right";
var healthTagsSetting = "off";
var themeSetting = "green";
var spamMessage = "Spam!!!!!";
var showNewsSetting = "on";
var menuAnimationsSetting = "on";
var nukerMode = "cube";
var playMusicSetting = "off";
var timerSpeed = 2;
var themeSetup = "off";
var nukerRange = 3;
var killAuraRange = 4;
var spamDelayTime = 3;
var sizeSetting = "normal";
var fancyChatMode = "default";
var tapNukerRange = 3;
//---------------------------
var combatName = "Combat";
var buildingName = "Building";
var movementName = "Movement";
var chatName = "Chat";
var miscName = "Misc";
//End of settings

var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();

var Launcher = {
	isBlockLauncher: function() {
		return (ctx.getPackageName() == "net.zhuoweizhang.mcpelauncher" || ctx.getPackageName() == "net.zhuoweizhang.mcpelauncher.pro");
	},
	isToolbox: function() {
		return ctx.getPackageName() == "io.mrarm.mctoolbox";
	},
	isMcpeMaster: function() {
		return ctx.getPackageName() == "com.mcbox.pesdkb.mcpelauncher";
	}
};

var GUI;
var menu;
var exitUI;
var vertexclientpemiscmenu;
var settingsMenu;
var addonMenu;
var informationMenu;
var topBar;

/**
 * #########
 *  MODULES
 * #########
 */

VertexClientPE.favourites = [];

VertexClientPE.addView = function(layout, modButtonView) {
	try {
		for(var fav in VertexClientPE.favourites) {
			if(VertexClientPE.favourites[fav] == modButtonView.getName()) {
				favMenuLayout.addView(modButtonView.getLayout());
				var isFavourite = true;
				break;
			}
		}
		if(!isFavourite) {
			layout.addView(modButtonView.getLayout());
		}
	} catch(e) {
		clientMessage("Error: " + e);
		VertexClientPE.showBugReportDialog(e);
	}
}

VertexClientPE.category = {
	COMBAT: 0,
	BUILDING: 1,
	MOVEMENT: 2,
	CHAT: 3,
	MISC: 4,
	toName: function(category) {
		switch(category) {
			case VertexClientPE.category.COMBAT:
				return combatName;
			case VertexClientPE.category.BUILDING:
				return buildingName;
			case VertexClientPE.category.MOVEMENT:
				return movementName;
			case VertexClientPE.category.CHAT:
				return chatName;
			case VertexClientPE.category.MISC:
				return miscName;
		}
	}
}

VertexClientPE.modules = [];

VertexClientPE.addons = [];

VertexClientPE.loadAddons = function() {
	if(Launcher.isBlockLauncher() || Launcher.isMcpeMaster()) {
		net.zhuoweizhang.mcpelauncher.ScriptManager.callScriptMethod("addonLoadHook", []);
	}
	if(Launcher.isMcpeMaster()) {
		com.mcbox.pesdk.mcpelauncher.ScriptManager.callScriptMethod("addonLoadHook", []);
	}
}

VertexClientPE.registerModule = function(obj) {
	VertexClientPE.modules.push(obj);
}

var shownAddonProDialog = false;

function registerAddon(name, desc, current_version, target_version, mods) {
	var shouldMessage = true;
	if(!VertexClientPE.isPro()) {
		if(!shownAddonProDialog) {
			VertexClientPE.showProDialog("Loading addons");
			shownAddonProDialog = true;
		}
		return;
	}
	try {
		VertexClientPE.addons.push({
			name: name,
			desc: desc,
			current_version: current_version,
			target_version: target_version
		});
		registerModulesFromAddon(mods);
	} catch(e) {
		shouldMessage = false;
		VertexClientPE.toast("An error occured while loading addons: " + e);
	}
	
	if(shouldMessage) {
		VertexClientPE.toast("Successfully loaded the " + name + " addon!");
	}
}

function registerModulesFromAddon(modArray) {
	modArray.forEach(function (element, index, array) {
		if(element != null) {
			VertexClientPE.registerModule(element);
		}
	});
}

VertexClientPE.getFeatureCount = function() {
	return VertexClientPE.modules.length;
}

var panic = {
	name: "Panic",
	desc: "Disables all modules at once.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	isStateMod: function() {
		return false;
	},
	onToggle: function() {
		VertexClientPE.modules.forEach(function (element, index, array) {
			if(element.isStateMod() && element.state) {
				element.onToggle();
			}
		});
		if(topBar != null && topBar.isShowing()) {
			topBar.dismiss();
			vertexclientpecombatmenu.dismiss(); //Close
			vertexclientpebuildingmenu.dismiss(); //Close
			vertexclientpemovementmenu.dismiss(); //Close
			vertexclientpechatmenu.dismiss(); //Close
			vertexclientpemiscmenu.dismiss(); //Close
			//vertexclientpefavmenu.dismiss(); //Close
			VertexClientPE.showCombatMenu();
			VertexClientPE.showBuildingMenu();
			VertexClientPE.showMovementMenu();
			VertexClientPE.showChatMenu();
			VertexClientPE.showMiscMenu();
			//VertexClientPE.showFavMenu();
			VertexClientPE.showTopBar();
		}
	}
}

var yesCheatPlus = {
	name: "YesCheat+",
	desc: "Blocks mods that cannot bypass common anti cheat plugins.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		yesCheatPlusState = this.state;
		if(topBar != null && topBar.isShowing()) {
			topBar.dismiss();
			vertexclientpecombatmenu.dismiss(); //Close
			vertexclientpebuildingmenu.dismiss(); //Close
			vertexclientpemovementmenu.dismiss(); //Close
			vertexclientpechatmenu.dismiss(); //Close
			vertexclientpemiscmenu.dismiss(); //Close
			//vertexclientpefavmenu.dismiss(); //Close
			VertexClientPE.showCombatMenu();
			VertexClientPE.showBuildingMenu();
			VertexClientPE.showMovementMenu();
			VertexClientPE.showChatMenu();
			VertexClientPE.showMiscMenu();
			//VertexClientPE.showFavMenu();
			VertexClientPE.showTopBar();
		}
	}
}

var switchGamemode = {
	name: "Switch Gamemode",
	desc: "Switches your gamemode.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	isStateMod: function() {
		return false;
	},
	onToggle: function() {
		if(Level.getGameMode() == 0) {
			Level.setGameMode(1);
		} else if(Level.getGameMode() == 1) {
			Level.setGameMode(0);
		}
	}
}

var killAura = {
	name: "Killaura",
	desc: "Automatically kills all the near entities.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	getSettingsLayout: function() {
		var killAuraSettingsLayout = new LinearLayout(ctx);
		killAuraSettingsLayout.setOrientation(1);
		var killAuraRangeTitle = clientTextView("Range: | " + killAuraRange);
		var killAuraRangeSlider = new SeekBar(ctx);
		killAuraRangeSlider.setProgress(killAuraRange);
		killAuraRangeSlider.setMax(10);
		killAuraRangeSlider.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
			onProgressChanged: function() {
				killAuraRange = killAuraRangeSlider.getProgress();
				killAuraRangeTitle.setText("Range: | " + killAuraRange);
			}
		});
		var space = clientTextView("\n");
		killAuraSettingsLayout.addView(killAuraRangeTitle);
		killAuraSettingsLayout.addView(killAuraRangeSlider);
		killAuraSettingsLayout.addView(space);
		return killAuraSettingsLayout;
	},
	onModDialogDismiss: function() {
		VertexClientPE.saveMainSettings();
	},
	isStateMod: function() {
		return true;
	},
	canBypassYesCheatPlus: function() {
		return false;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var mobs = Entity.getAll();
		for(var i = 0; i < mobs.length; i++) {
			var x = Entity.getX(mobs[i]) - getPlayerX();
			var y = Entity.getY(mobs[i]) - getPlayerY();
			var z = Entity.getZ(mobs[i]) - getPlayerZ();
			if(x*x+y*y+z*z<=killAuraRange*killAuraRange && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION && Entity.getHealth(mobs[i]) != 0) {
				//setRot(getPlayerEnt(), (Math.atan2(z, x) - 90) * Math.pi / 180, getPitch());
				if(autoSwordState) {
					VertexClientPE.autoSword(getPlayerEnt(), mobs[i]);
				}
				switch(Entity.getEntityTypeId(mobs[i])) {
					case EntityType.COW:
						Level.playSoundEnt(mobs[i], "mob.cowhurt");
						break;
					case EntityType.CHICKEN:
						Level.playSoundEnt(mobs[i], "mob.chickenhurt");
						break;
					case EntityType.ZOMBIE:
						Level.playSoundEnt(mobs[i], "mob.zombiehurt");
						break;
					case EntityType.SKELETON:
						Level.playSoundEnt(mobs[i], "mob.skeletonhurt");
						break;
					case EntityType.PIG_ZOMBIE:
						Level.playSoundEnt(mobs[i], "mob.zombiepig.zpighurt");
						break;
					default:
						Level.playSoundEnt(mobs[i], "random.hurt");
						break;
				}
				Entity.setHealth(mobs[i], 0);
				break;
			}
		}
	}
}

var freezeAura = {
	name: "FreezeAura",
	desc: "Automatically freezes all the near entities.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	canBypassYesCheatPlus: function() {
		return false;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var mobs = Entity.getAll();
		for(var i = 0; i < mobs.length; i++) {
			var x = Entity.getX(mobs[i]) - getPlayerX();
			var y = Entity.getY(mobs[i]) - getPlayerY();
			var z = Entity.getZ(mobs[i]) - getPlayerZ();
			if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {
				//setRot(getPlayerEnt(), (Math.atan2(z, x) - 90) * Math.pi / 180, getPitch());
				/*if(Entity.loadExtraData(mobs[i], "frozen") 
				Entity.saveExtraData(mobs[i], "");*/
				Entity.setImmobile(mobs[i], true);
			}
		}
	}
}

var fireAura = {
	name: "FireAura",
	desc: "Sets all the near entities on fire.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	canBypassYesCheatPlus: function() {
		return false;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var mobs = Entity.getAll();
		for(var i = 0; i < mobs.length; i++) {
			var x = Entity.getX(mobs[i]) - getPlayerX();
			var y = Entity.getY(mobs[i]) - getPlayerY();
			var z = Entity.getZ(mobs[i]) - getPlayerZ();
			if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {
				Entity.setFireTicks(mobs[i], 100);
			}
		}
	}
}

var autoSword = {
	name: "AutoSword",
	desc: "Automatically chooses the best sword for you when attacking entities if available.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		autoSwordState = this.state;
	},
	onAttack: function(a, v) {
		if(a == getPlayerEnt()) {
			for(var i = 0; i <= 36; i++) {
				var gCI = Player.getCarriedItem();
				var gCID = Player.getCarriedItemData();
				var gCIA = Player.getCarriedItemCount();
				if(Player.getInventorySlot(i) == 268) {
					Player.setInventorySlot(i, gCI, gCIA, gCID);
					Entity.setCarriedItem(getPlayerEnt(), 268, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
					break;
				}
			}
			for(var i = 0; i <= 36; i++) {
				var gCI = Player.getCarriedItem();
				var gCID = Player.getCarriedItemData();
				var gCIA = Player.getCarriedItemCount();
				if(Player.getInventorySlot(i) == 283) {
					Player.setInventorySlot(i, gCI, gCIA, gCID);
					Entity.setCarriedItem(getPlayerEnt(), 283, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
					break;
				}
			}
			for(var i = 0; i <= 36; i++) {
				var gCI = Player.getCarriedItem();
				var gCID = Player.getCarriedItemData();
				var gCIA = Player.getCarriedItemCount();
				if(Player.getInventorySlot(i) == 272) {
					Player.setInventorySlot(i, gCI, gCIA, gCID);
					Entity.setCarriedItem(getPlayerEnt(), 272, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
					break;
				}
			}
			for(var i = 0; i <= 36; i++) {
				var gCI = Player.getCarriedItem();
				var gCID = Player.getCarriedItemData();
				var gCIA = Player.getCarriedItemCount();
				if(Player.getInventorySlot(i) == 267) {
					Player.setInventorySlot(i, gCI, gCIA, gCID);
					Entity.setCarriedItem(getPlayerEnt(), 267, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
					break;
				}
			}
			for(var i = 0; i <= 36; i++) {
				var gCI = Player.getCarriedItem();
				var gCID = Player.getCarriedItemData();
				var gCIA = Player.getCarriedItemCount();
				if(Player.getInventorySlot(i) == 276) {
					Player.setInventorySlot(i, gCI, gCIA, gCID);
					Entity.setCarriedItem(getPlayerEnt(), 276, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
					break;
				}
			}
		}
	}
}

var homeCommand = {
	name: "/home",
	desc: "Runs the /home command if the server or world you're on has it.",
	category: VertexClientPE.category.CHAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return false;
	},
	onToggle: function() {
		Server.sendChat("/home");
	}
}

var timer = {
	name: "Timer",
	desc: "Makes the speed of the game faster.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	getSettingsLayout: function() {
		var timerSettingsLayout = new LinearLayout(ctx);
		timerSettingsLayout.setOrientation(1);
		var timerSpeedTitle = clientTextView("Speed: | " + timerSpeed + " * 20 ticks");
		var timerSpeedSlider = new SeekBar(ctx);
		timerSpeedSlider.setProgress(timerSpeed);
		timerSpeedSlider.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
			onProgressChanged: function() {
				timerSpeed = timerSpeedSlider.getProgress();
				timerSpeedTitle.setText("Speed: | " + timerSpeed);
			}
		});
		var space = clientTextView("\n");
		timerSettingsLayout.addView(timerSpeedTitle);
		timerSettingsLayout.addView(timerSpeedSlider);
		timerSettingsLayout.addView(space);
		return timerSettingsLayout;
	},
	onModDialogDismiss: function() {
		VertexClientPE.saveMainSettings();
	},
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		if(this.state) {
			ModPE.setGameSpeed(20 * timerSpeed);
		} else {
			ModPE.setGameSpeed(20);
		}
	}
}

var nuker = {
	name: "Nuker",
	desc: "Automatically destroys blocks around you.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	getSettingsLayout: function() {
		var nukerSettingsLayout = new LinearLayout(ctx);
		nukerSettingsLayout.setOrientation(1);
		var nukerRangeTitle = clientTextView("Range: | " + nukerRange);
		var nukerRangeSlider = new SeekBar(ctx);
		nukerRangeSlider.setProgress(nukerRange);
		nukerRangeSlider.setMax(10);
		nukerRangeSlider.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
			onProgressChanged: function() {
				nukerRange = nukerRangeSlider.getProgress();
				nukerRangeTitle.setText("Range: | " + nukerRange);
			}
		});
		var nukerModeTitle = clientTextView("\nMode:");
		var nukerModeCubeButton = clientButton("Cube", "Normal mode which destroys blocks in the shape of a cube");
		nukerModeCubeButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 6, display.heightPixels / 10));
		var nukerModeFlatButton = clientButton("Flat", "Flat mode which flats the ground");
		nukerModeFlatButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 6, display.heightPixels / 10));
		var nukerModeSmashButton = clientButton("Smash", "Smash mode which only breaks blocks with a destroy time of 0");
		nukerModeSmashButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 6, display.heightPixels / 10));
		
		var nukerRangeTitle = clientTextView("Range: | " + nukerRange);
		var nukerModeLayout = new LinearLayout(ctx);
		nukerModeLayout.setOrientation(LinearLayout.HORIZONTAL);
		
		var nukerModeLayoutLeft = new LinearLayout(ctx);
		nukerModeLayoutLeft.setOrientation(1);
		nukerModeLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
		nukerModeLayoutLeft.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
		nukerModeLayout.addView(nukerModeLayoutLeft);
		
		var nukerModeLayoutCenter = new LinearLayout(ctx);
		nukerModeLayoutCenter.setOrientation(1);
		nukerModeLayoutCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
		nukerModeLayoutCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
		nukerModeLayout.addView(nukerModeLayoutCenter);
		
		var nukerModeLayoutRight = new LinearLayout(ctx);
		nukerModeLayoutRight.setOrientation(1);
		nukerModeLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
		nukerModeLayoutRight.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
		nukerModeLayout.addView(nukerModeLayoutRight);
		
		nukerModeLayoutLeft.addView(nukerModeCubeButton);
		nukerModeLayoutCenter.addView(nukerModeFlatButton);
		nukerModeLayoutRight.addView(nukerModeSmashButton);
		if(nukerMode == "cube") {
			nukerModeCubeButton.setTextColor(android.graphics.Color.GREEN);
		}if(nukerMode == "flat") {
			nukerModeFlatButton.setTextColor(android.graphics.Color.GREEN);
		}if(nukerMode == "smash") {
			nukerModeSmashButton.setTextColor(android.graphics.Color.GREEN);
		}
		nukerModeCubeButton.setOnClickListener(new android.view.View.OnClickListener() {
			onClick: function(view) {
				nukerMode = "cube";
				nukerModeCubeButton.setTextColor(android.graphics.Color.GREEN);
				nukerModeFlatButton.setTextColor(android.graphics.Color.WHITE);
				nukerModeSmashButton.setTextColor(android.graphics.Color.WHITE);
				VertexClientPE.saveMainSettings();
				VertexClientPE.loadMainSettings();
			}
		});
		nukerModeFlatButton.setOnClickListener(new android.view.View.OnClickListener() {
			onClick: function(view) {
				nukerMode = "flat";
				nukerModeCubeButton.setTextColor(android.graphics.Color.WHITE);
				nukerModeFlatButton.setTextColor(android.graphics.Color.GREEN);
				nukerModeSmashButton.setTextColor(android.graphics.Color.WHITE);
				VertexClientPE.saveMainSettings();
				VertexClientPE.loadMainSettings();
			}
		});
		nukerModeSmashButton.setOnClickListener(new android.view.View.OnClickListener() {
			onClick: function(view) {
				nukerMode = "smash";
				nukerModeCubeButton.setTextColor(android.graphics.Color.WHITE);
				nukerModeFlatButton.setTextColor(android.graphics.Color.WHITE);
				nukerModeSmashButton.setTextColor(android.graphics.Color.GREEN);
				VertexClientPE.saveMainSettings();
				VertexClientPE.loadMainSettings();
			}
		});
		var space = clientTextView("\n");
		nukerSettingsLayout.addView(nukerRangeTitle);
		nukerSettingsLayout.addView(nukerRangeSlider);
		nukerSettingsLayout.addView(nukerModeTitle);
		nukerSettingsLayout.addView(nukerModeLayout);
		nukerSettingsLayout.addView(space);
		return nukerSettingsLayout;
	},
	onModDialogDismiss: function() {
		VertexClientPE.saveMainSettings();
	},
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var x = getPlayerX();
		var y = getPlayerY();
		var z = getPlayerZ();
		VertexClientPE.nuker(x, y, z, nukerRange);
	}
}

var fancyChatMsg;
var fancyChatEndChar;

var fancyChat = {
	name: "FancyChat",
	desc: "Replaces characters in sent chat messages by fancy unicode characters. Can be used to bypass curse word filters on some servers.",
	category: VertexClientPE.category.CHAT,
	type: "Mod",
	state: false,
	settings: {
		mode: "normal"
	},
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		fancyChatState = this.state;
	},
	onChat: function(msg) {
		preventDefault();
		if(Launcher.isBlockLauncher()) {
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get().nativeSetTextboxText("");
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText("");
		}
		VertexClientPE.fancyChat(msg);
	}
}

var noHurt = {
	name: "NoHurt",
	desc: "Prevents you from getting hurt.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onHurt: function(a, v) {
		if(v == getPlayerEnt()) {
			preventDefault();
		}
	}
}

var ride = {
	name: "Ride",
	desc: "Automatically makes you ride an entity on tap.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onAttack: function(a, v) {
		preventDefault();
		if(getPlayerEnt() == a) {
			VertexClientPE.ride(v);
		}
	}
}

var onlyDay = {
	name: "OnlyDay",
	desc: "Sets the time to day all the time.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function(a, v) {
		Level.setTime(1000);
	}
}

var flight = {
	name: "Flight",
	desc: "Makes you able to fly, even when you're in survival.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		Player.setFlying(this.state?1:0);
		Player.setCanFly(this.state?1:Level.getGameMode());
	},
	onTick: function() {
		Player.setFlying(1);
	}
}

var autoTeleporter = {
	name: "AutoTeleporter",
	desc: "Teleports you to the block you're pointing at.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		if(getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ()) != 0) {
			VertexClientPE.teleporter(Player.getPointedBlockX(), Player.getPointedBlockY() + 3, Player.getPointedBlockZ());
		}
	}
}

var tapTeleporter = {
	name: "TapTeleporter",
	desc: "Teleports you wherever you tap.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onUseItem: function(x, y, z, itemId, blockId, side, blockDamage) {
		if(getTile(x, y, z) != 0) {
			VertexClientPE.teleporter(x, y + 3, z);
		}
	}
}

var wallHack = {
	name: "Wallhack",
	desc: "Makes you able to walk through walls.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		Entity.setCollisionSize(Player.getEntity(), this.state?0:0.6, this.state?0:1.8);
	}
}

var fastBreak = {
	name: "FastBreak",
	desc: "Makes block destroy times as if you were in creative mode.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		this.state?Block.setDestroyTimeAll(0):Block.setDestroyTimeDefaultAll();
	}
}

var chatSpeak = {
	name: "ChatSpeak",
	desc: "Automatically says all the received chat messages out loud.",
	category: VertexClientPE.category.CHAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onChatReceive: function(msg, sender) {
		if(sender != Player.getName(getPlayerEnt())) {
			tts.speak(msg, android.speech.tts.TextToSpeech.QUEUE_FLUSH, null);
		}
	}
}

var chatRepeatStage = 0;

var chatRepeat = {
	name: "ChatRepeat",
	desc: "Automatically repeats all the received chat messages. Can be very annoying.",
	category: VertexClientPE.category.CHAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onChatReceive: function(msg, sender) {
		if(sender != Player.getName(getPlayerEnt()) && chatRepeatStage == 0) {
			chatRepeatStage = 1;
			Server.sendChat(msg);
			chatRepeatStage = 0;
		}
	}
}

var autoSpammer = {
	name: "AutoSpammer",
	desc: "Automatically spams the chat.",
	category: VertexClientPE.category.CHAT,
	type: "Mod",
	state: false,
	getSettingsLayout: function() {
		var autoSpammerMessageLayout = new LinearLayout(ctx);
		autoSpammerMessageLayout.setOrientation(1);
		var autoSpammerMessageTitle = clientTextView("Message:");
		var spamMessageInput = new EditText(ctx);
		var autoSpammerMessageEnter = clientTextView("\n");
		spamMessageInput.setText(spamMessage);
		spamMessageInput.setTextColor(android.graphics.Color.WHITE);
		spamMessageInput.setHint("Spam message");
		spamMessageInput.addTextChangedListener(new android.text.TextWatcher() {
			onTextChanged: function() {
				spamMessage = spamMessageInput.getText();
			}
		});
		autoSpammerMessageLayout.addView(autoSpammerMessageTitle);
		autoSpammerMessageLayout.addView(spamMessageInput);
		autoSpammerMessageLayout.addView(autoSpammerMessageEnter);
		return autoSpammerMessageLayout;
	},
	isStateMod: function() {
		return true;
	},
	onModDialogDismiss: function() {
		VertexClientPE.saveMainSettings();
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		if(fancyChatState) {
			VertexClientPE.fancyChat(spamMessage);
		} else {
			Server.sendChat(spamMessage);
		}
		/*if(yesCheatPlusState) {
			Server.sendChat(" ");
		}*/
	}
}

var delaySpammer = {
	name: "DelaySpammer",
	desc: "Automatically spams the chat with a delay and randomly generated messages.",
	category: VertexClientPE.category.CHAT,
	type: "Mod",
	state: false,
	getSettingsLayout: function() {
		var delaySpammerDelayTimeLayout = new LinearLayout(ctx);
		delaySpammerDelayTimeLayout.setOrientation(1);
		var delaySpammerDelayTimeTitle = clientTextView("Delay time: | " + spamDelayTime + " seconds");
		var delaySpammerDelayTimeSlider = new widget.SeekBar(ctx);
		delaySpammerDelayTimeSlider.setProgress(spamDelayTime);
		delaySpammerDelayTimeSlider.setMax(60);
		delaySpammerDelayTimeLayout.addView(delaySpammerDelayTimeTitle);
		delaySpammerDelayTimeLayout.addView(delaySpammerDelayTimeSlider);
		delaySpammerDelayTimeSlider.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
			onProgressChanged: function() {
				spamDelayTime = delaySpammerDelayTimeSlider.getProgress();
				delaySpammerDelayTimeTitle.setText("Delay time: | " + spamDelayTime + " seconds");
			}
		});
		return delaySpammerDelayTimeLayout;
	},
	isStateMod: function() {
		return true;
	},
	onModDialogDismiss: function() {
		VertexClientPE.saveMainSettings();
	},
	onToggle: function() {
		this.state = !this.state;
		delaySpammerState = this.state;
	}
}

var tpAuraStage = 0;

var tpAura = {
	name: "TP-Aura",
	desc: "Automatically teleports you behind entities to prevent you from getting hurt by others.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onInterval: function() {
		if(tpAuraStage == 0) {
			tpAuraStage = 1;
			var mobs = Entity.getAll();
			for(var i = 0; i < mobs.length; i++) {
				var x = Entity.getX(mobs[i]) - getPlayerX();
				var y = Entity.getY(mobs[i]) - getPlayerY();
				var z = Entity.getZ(mobs[i]) - getPlayerZ();
				if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION && Entity.getHealth(mobs[i]) != 0) {
					var playerPos = new Array(getPlayerX(), getPlayerY() + 0.5, getPlayerZ());
					var victimPos = new Array(Entity.getX(mobs[i]), Entity.getY(mobs[i]), Entity.getZ(mobs[i]));
					var diffPos = new Array(victimPos[0] - playerPos[0], null, victimPos[2] - playerPos[2]);
					playerPos[0] += diffPos[0] * 2;
					playerPos[2] += diffPos[2] * 2;
					
					if (getTile(playerPos[0], playerPos[1], playerPos[2]) == 0 && getTile(playerPos[0], playerPos[1] - 1, playerPos[2]) == 0 && getTile(playerPos[0], playerPos[1] - 2, playerPos[2]) == 0) {
						Entity.setPosition(Player.getEntity(), playerPos[0], playerPos[1], playerPos[2]);
					}
					break;
				}
			}
			tpAuraStage = 0;
		}
	},
	onAttack: function(a, v) {
		if(a == getPlayerEnt()) {
			var playerPos = new Array(getPlayerX(), getPlayerY() + 0.5, getPlayerZ());
			var victimPos = new Array(Entity.getX(v), Entity.getY(v), Entity.getZ(v));
			var diffPos = new Array(victimPos[0] - playerPos[0], null, victimPos[2] - playerPos[2]);
			playerPos[0] += diffPos[0] * 2;
			playerPos[2] += diffPos[2] * 2;
			
			if(getTile(playerPos[0], playerPos[1], playerPos[2]) == 0 && getTile(playerPos[0], playerPos[1] - 1, playerPos[2]) == 0 && getTile(playerPos[0], playerPos[1] - 2, playerPos[2]) == 0) {
				Entity.setPosition(Player.getEntity(), playerPos[0], playerPos[1], playerPos[2]);
			}
		}
	}
}

var powerExplosionsStage = 0;

var powerExplosions = {
	name: "PowerExplosions",
	desc: "Makes explosions more powerful.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onExplode: function(entity, x, y, z, power, onFire) {
		if(powerExplosionsStage == 0) {
			powerExplosionsStage = 1;
			preventDefault();
			Level.explode(x, y, z, 10);
			powerExplosionsStage = 0;
		}
	}
}

var tapExplosion = {
	name: "TapExplosion",
	desc: "Makes blocks explode wherever you tap.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onUseItem: function(x, y, z, itemId, blockId, side, blockDamage) {
		Level.explode(x, y, z, 4);
	}
}

var signX, signY, signZ;

var signEditor = {
	name: "SignEditor",
	desc: "Allows you to edit signs.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onUseItem: function(x, y, z, itemId, blockId, side, blockDamage) {
		if(blockId == 63 || blockId == 68) {
			preventDefault();
			signX = x;
			signY = y;
			signZ = z;
			VertexClientPE.showSignEditorDialog();
		}
	}
}

var instaKill = {
	name: "InstaKill",
	desc: "Makes you able to kill an entity in one hit.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onAttack: function(a, v) {
		if(getPlayerEnt() == a) {
			Entity.setHealth(v, 1);
		}
	}
}

var derp = {
	name: "Derp",
	desc: "Rotates the player all the time.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var player = getPlayerEnt();
		var yaw = Math.floor(Entity.getYaw(player));
		var pitch = Math.floor(Entity.getPitch(player));
		Entity.setRot(player, yaw + 3, pitch);
	}
}

var glide = {
	name: "Glide",
	desc: "Reduces fall damage by slowing the player down when falling.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		if(Entity.getVelY(getPlayerEnt()) <= 0 && Player.isFlying() == false) {
			setVelY(Player.getEntity(), - 0.07);
		}
	}
}

var autoMine = {
	name: "AutoMine",
	desc: "Automatically mines the block you're looking at.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		if(getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ()) != 0) {
			Level.destroyBlock(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ());
		}
	}
}

var followStage = 0;

var follow = {
	name: "Follow",
	desc: "Automatically follow nearby entities.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	requiresPro: function() {
		return true;
	},
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		if(followStage == 0) {
			followStage = 1;
			var mobs = Entity.getAll();
			for(var i = 0; i < mobs.length; i++) {
				var x = Entity.getX(mobs[i]) - getPlayerX();
				var y = Entity.getY(mobs[i]) - getPlayerY();
				var z = Entity.getZ(mobs[i]) - getPlayerZ();
				if(x*x+y*y+z*z<=10*10 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {
					if(x*x+y*y+z*z>=2*2) {
						setVelX(getPlayerEnt(), x);
						setVelZ(getPlayerEnt(), z);
						setVelY(getPlayerEnt(), y);
					}
					followStage = 0;
					break;
				}
			}
		}
	}
}

var tapNuker = {
	name: "TapNuker",
	desc: "Destroys blocks wherever you tap.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	getSettingsLayout: function() {
		var tapNukerSettingsLayout = new LinearLayout(ctx);
		tapNukerSettingsLayout.setOrientation(1);
		var tapNukerRangeTitle = clientTextView("Range: | " + tapNukerRange);
		var tapNukerRangeSlider = new SeekBar(ctx);
		tapNukerRangeSlider.setProgress(tapNukerRange);
		tapNukerRangeSlider.setMax(10);
		tapNukerRangeSlider.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
			onProgressChanged: function() {
				tapNukerRange = tapNukerRangeSlider.getProgress();
				tapNukerRangeTitle.setText("Range: | " + tapNukerRange);
			}
		});
		
		var space = clientTextView("\n");
		tapNukerSettingsLayout.addView(tapNukerRangeTitle);
		tapNukerSettingsLayout.addView(tapNukerRangeSlider);
		tapNukerSettingsLayout.addView(space);
		return tapNukerSettingsLayout;
	},
	onModDialogDismiss: function() {
		VertexClientPE.saveMainSettings();
	},
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onUseItem: function(x, y, z, itemId, blockId, side, blockDamage) {
		VertexClientPE.nuker(x, y, z, tapNukerRange, "cube");
	}
}

var tapRemover = {
	name: "TapRemover",
	desc: "Removes blocks and entities on tap.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onUseItem: function(x, y, z, itemId, blockId, side, blockDamage) {
		preventDefault();
		setTile(x, y, z, 0);
	},
	onAttack: function(a, v) {
		if(getPlayerEnt() == a) {
			preventDefault();
			Entity.remove(v);
		}
	}
}

var autoPlace = {
	name: "AutoPlace",
	desc: "Automatically places the block you're holding wherever you look.",
	category: VertexClientPE.category.BUILDING,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var x = Player.getPointedBlockX();
		var y = Player.getPointedBlockY();
		var z = Player.getPointedBlockZ();
		var side = Player.getPointedBlockSide();
		var blockId = Player.getCarriedItem();
		var blockData = Player.getCarriedItemData();
		if(getTile(x, y, z) != 0) {
			if(blockId <= 256) {
				setTile(x-(side==4?1:0)+(side==5?1:0),y-(side==0?1:0)+(side==1?1:0),z-(side==2?1:0)+(side==3?1:0), blockId, blockData);
			}
		}
	}
}

var regen = {
	name: "Regen",
	desc: "Instantly refills your health.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		if(Entity.getHealth(getPlayerEnt()) < Entity.getMaxHealth(getPlayerEnt())) {
			Player.setHealth(Entity.getMaxHealth(getPlayerEnt()));
		}
	}
}

var godMode = {
	name: "God Mode",
	desc: "Gives you many hearts.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		Entity.setMaxHealth(getPlayerEnt(), this.state?10000:20);
	},
	onTick: function() {
		Player.setHealth(10000);
	}
}

var criticals = {
	name: "Criticals",
	desc: "Automatically jumps to make the second attack critical, make sure you attack again after hitting an entity and before hitting the ground to make it work.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onAttack: function(a, v) {
		if(Launcher.isBlockLauncher() || Launcher.isToolbox()) {
			Entity.setVelY(getPlayerEnt(), 0.64);
		}
		if(Launcher.isMcpeMaster()) {
			com.mcbox.pesdk.launcher.playerJump();
		}
	}
}

var arrowGun = {
	name: "ArrowGun",
	desc: "Automatically shoots arrows wherever you look.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onInterval: function() {
		var p = ((Entity.getPitch(getPlayerEnt()) + 90) * Math.PI) / 180;
		var y = ((Entity.getYaw(getPlayerEnt()) + 90) * Math.PI) / 180;
		var xx = Math.sin(p) * Math.cos(y);
		var yy = Math.sin(p) * Math.sin(y);
		var zz = Math.cos(p);
		var arrow = Level.spawnMob(Player.getX() + xx, Player.getY() + zz, Player.getZ() + yy, 80);
		setVelX(arrow, xx);
		setVelY(arrow, zz);
		setVelZ(arrow, yy);
	}
}

var orderAPizza = {
	name: "Order a Pizza",
	desc: "Order a pizza of Domino's.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	isStateMod: function() {
		return false;
	},
	onToggle: function() {
		pizzaOrderDialog();
	}
}

var zoom = {
	name: "Zoom",
	desc: "Changes the FOV to zoom in.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
		this.state?ModPE.setFov(10):ModPE.resetFov();
	}
}

var coordsDisplay = {
	name: "CoordsDisplay",
	desc: "Displays the player's coordinates.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var x = parseInt(getPlayerX());
		var y = parseInt(getPlayerY());
		var z = parseInt(getPlayerZ());
		ModPE.showTipMessage("\n\n\n" + "X: " + parseInt(x) + " Y: " + parseInt(y) + " Z: " + parseInt(z));
	}
}

var itemGiver = {
	name: "ItemGiver",
	desc: "Adds items to your inventory.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return false;
	},
	onToggle: function() {
		VertexClientPE.showItemGiverDialog();
	}
}

var healthTags = {
	name: "HealthTags",
	desc: "Displays an entity's name and health in its nametag.",
	category: VertexClientPE.category.COMBAT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		var mobs = Entity.getAll();
		/*for(var i = 0; i < mobs.length; i++) {
			var entity = mobs[i];
			if(entity != getPlayerEnt()) {
				if(Entity.getExtraData(entity, "vertex.clientpe.hasusedhealthtags") == null || Entity.getExtraData(entity, "vertex.clientpe.hasusedhealthtags") == "false") {
					Entity.setExtraData(entity, "vertex.clientpe.hasusedhealthtags", "true");
					Entity.setExtraData(entity, "vertex.clientpe.lasthealth", Entity.getHealth(entity).toString());
					Entity.setExtraData(entity, "vertex.clientpe.lastnametag", Entity.getNameTag(entity).toString());
					Entity.setExtraData(entity, "vertex.clientpe.fulllastnametag", Entity.getNameTag(entity) + Entity.getHealth(entity) + "/" + Entity.getMaxHealth(entity));
					Entity.setNameTag(entity, Entity.getNameTag(entity) + "\n" + ChatColor.RED + Entity.getHealth(entity) + "/" + Entity.getMaxHealth(entity));
				} else if(Entity.getExtraData(entity, "vertex.clientpe.hasusedhealthtags") == "true") {
					Entity.setExtraData(entity, "vertex.clientpe.lasthealth", Entity.getHealth(entity).toString());
					Entity.setNameTag(entity, Entity.getExtraData(entity, "vertex.clientpe.lastnametag") + "\n" + ChatColor.RED + Entity.getHealth(entity) + "/" + Entity.getMaxHealth(entity));
				}
			}
		}*/
		VertexClientPE.healthTags();
	}
}

var autoSwitch = {
	name: "AutoSwitch",
	desc: "Switches the item in your hand all the time.",
	category: VertexClientPE.category.MISC,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		if(Player.getSelectedSlotId() != 7) {
			Player.setSelectedSlotId(Player.getSelectedSlotId() + 1);
		} else {
			Player.setSelectedSlotId(0);
		}
	}
}

function toDirectionalVector(vector, yaw, pitch) { //some parts of this function are made by @zhuowei
    vector[0] = Math.cos(yaw) * Math.cos(pitch);
    vector[1] = Math.sin(pitch);
    vector[2] = Math.sin(yaw) * Math.cos(pitch);
}

var playerDir = [0, 0, 0];
var DEG_TO_RAD = Math.PI / 180;
var playerWalkSpeed = 0.2;

var autoWalk = {
	name: "AutoWalk",
	desc: "Makes your player walk automatically.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onTick: function() {
		toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
		var player = getPlayerEnt();
		setVelX(player, playerWalkSpeed * playerDir[0]);
		setVelZ(player, playerWalkSpeed * playerDir[2]);
	}
}

var enderProjectiles = {
	name: "EnderProjectiles",
	desc: "Turns every projectile into an Ender Pearl.",
	category: VertexClientPE.category.MOVEMENT,
	type: "Mod",
	state: false,
	isStateMod: function() {
		return true;
	},
	onToggle: function() {
		this.state = !this.state;
	},
	onProjectileHitBlock: function(projectile, blockX, blockY, blockZ, side) {
		Entity.setPosition(getPlayerEnt(), blockX, blockY, blockZ);
		while(getTile(getPlayerX(), getPlayerY()-2, getPlayerZ()) != 0) {
			Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY()+1, getPlayerZ());
		}
	}
}

//COMBAT
VertexClientPE.registerModule(killAura);
VertexClientPE.registerModule(freezeAura);
VertexClientPE.registerModule(fireAura);
VertexClientPE.registerModule(tpAura);
VertexClientPE.registerModule(follow);
VertexClientPE.registerModule(autoSword);
VertexClientPE.registerModule(noHurt);
VertexClientPE.registerModule(instaKill);
VertexClientPE.registerModule(regen);
VertexClientPE.registerModule(godMode);
VertexClientPE.registerModule(criticals);
VertexClientPE.registerModule(arrowGun);
VertexClientPE.registerModule(healthTags);
//MOVEMENT
VertexClientPE.registerModule(timer);
VertexClientPE.registerModule(flight);
VertexClientPE.registerModule(autoWalk);
VertexClientPE.registerModule(autoTeleporter);
VertexClientPE.registerModule(tapTeleporter);
VertexClientPE.registerModule(wallHack);
VertexClientPE.registerModule(ride);
VertexClientPE.registerModule(glide);
VertexClientPE.registerModule(enderProjectiles);
//BUILDING
VertexClientPE.registerModule(nuker);
VertexClientPE.registerModule(tapNuker);
VertexClientPE.registerModule(fastBreak);
VertexClientPE.registerModule(powerExplosions);
VertexClientPE.registerModule(tapExplosion);
VertexClientPE.registerModule(signEditor);
VertexClientPE.registerModule(autoMine);
VertexClientPE.registerModule(tapRemover);
VertexClientPE.registerModule(autoPlace);
//CHAT
VertexClientPE.registerModule(homeCommand);
VertexClientPE.registerModule(autoSpammer);
VertexClientPE.registerModule(delaySpammer);
VertexClientPE.registerModule(fancyChat);
VertexClientPE.registerModule(chatSpeak);
VertexClientPE.registerModule(chatRepeat);
//MISC
VertexClientPE.registerModule(panic);
VertexClientPE.registerModule(yesCheatPlus);
VertexClientPE.registerModule(switchGamemode);
VertexClientPE.registerModule(itemGiver);
VertexClientPE.registerModule(autoSwitch);
VertexClientPE.registerModule(onlyDay);
VertexClientPE.registerModule(derp);
VertexClientPE.registerModule(zoom);
VertexClientPE.registerModule(coordsDisplay);
VertexClientPE.registerModule(orderAPizza);

function modTick() {
	VertexClientPE.playerIsInGame = true;
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.isStateMod() && element.state && element.onTick) {
			if(yesCheatPlusState && element.canBypassYesCheatPlus) {
				if(!element.canBypassYesCheatPlus()) {
					return;
				}
			}
			element.onTick();
		}
	});
}

function attackHook(a, v) {
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.isStateMod() && element.state && element.onAttack) {
			element.onAttack(a, v);
		}
	});
}

function entityHurtHook(a, v) {
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.isStateMod() && element.state && element.onHurt) {
			element.onHurt(a, v);
		}
	});
}

function useItem(x, y, z, itemId, blockId, side, blockDamage) {
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.isStateMod() && element.state && element.onUseItem) {
			element.onUseItem(x, y, z, itemId, blockId, side, blockDamage);
		}
	});
}

function explodeHook(entity, x, y, z, power, onFire) {
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.isStateMod() && element.state && element.onExplode) {
			element.onExplode(entity, x, y, z, power, onFire);
		}
	});
}

function projectileHitBlockHook(projectile, blockX, blockY, blockZ, side) {
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.isStateMod() && element.state && element.onProjectileHitBlock) {
			element.onProjectileHitBlock(projectile, blockX, blockY, blockZ, side);
		}
	});
}

function chatReceiveHook(text, sender) {
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.isStateMod() && element.state && element.onChatReceive) {
			element.onChatReceive(text, sender);
		}
	});
}

function chatHook(text) {
	if(text.charAt(0) == ".") {
		preventDefault();
		if(Launcher.isBlockLauncher()) {
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get().nativeSetTextboxText("");
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText("");
		}
		VertexClientPE.commandManager(text.substring(1, text.length));
	} else {
		if(text.charAt(0) != "/") {
			VertexClientPE.modules.forEach(function(element, index, array) {
				if(element.isStateMod() && element.state && element.onChat) {
					element.onChat(text);
				}
			});
		}
	}
}

/**
 *  ############
 *	# COMMANDS #
 *	############
 */
 
VertexClientPE.getHighestPageNumber = function() {
	var commands = [];
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element != null && element.syntax != null && element.type == "Command") {
			commands.push(element);
		}
	});
	var i = 0;
	var page = 1;
	while(i >= 8*(page-1) && i <= 8*page-1 && commands[i] != null) {
		i++;
	}
	while(i >= 8*page) {
		page++;
	}
	return page;
}
 
VertexClientPE.showHelpPage = function(page) {
	var commands = [];
	VertexClientPE.clientMessage("Showing help page " + page/* + "/" + VertexClientPE.getHighestPageNumber()*/);
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element != null && element.syntax != null && element.type == "Command") {
			commands.push(element);
		}
	});
	commands.forEach(function(element, index, array) {
		if(element.syntax != null) {
			if(index >= 8*(page-1) && index <= 8*page-1) {
				VertexClientPE.clientMessage("." + element.syntax);
			}
		}
	});
}

var help = {
	syntax: "help <page>",
	type: "Command",
	isStateMod: function() {
		return false;
	},
	onCall: function(cmd) {
		//VertexClientPE.clientMessage(".help is broken at the moment!");
		var commandSplit = cmd.split(" ");
		if(commandSplit[1] == undefined || commandSplit[1] == null || commandSplit[1] == "1") {
			VertexClientPE.showHelpPage("1");
		} else {
			if(commandSplit[1] != "1") {
				VertexClientPE.showHelpPage(commandSplit[1]);
			}
		}
	}
}

var say = {
	syntax: "say <message>",
	type: "Command",
	isStateMod: function() {
		return false;
	},
	onCall: function(cmd) {
		sayMsg = cmd.substring(4, cmd.length);
		if(fancyChatState) {
			VertexClientPE.fancyChat(sayMsg);
		} else {
			Server.sendChat(sayMsg);
		}
	}
}

VertexClientPE.registerModule(help);
VertexClientPE.registerModule(say);

/**
 *  ##############
 *	# GUI & MORE #
 *	##############
 */

VertexClientPE.GUI = {
	floatingMenus: []
}

VertexClientPE.GUI.PopupWindow = function() {
	var popupWindow = new widget.PopupWindow();
}

VertexClientPE.GUI.registerFloatingMenu = function() {
	var floatingPopupWindowShown = false;
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
	
	VertexClientPE.loadMainSettings();

	var floatingPopupWindow = new VertexClientPE.GUI.PopupWindow();
	var floatingPopupWindowLayout1 = new LinearLayout(ctx);
	var floatingPopupWindowScrollView = new ScrollView(ctx);
	var floatingPopupWindowLayout = new LinearLayout(ctx);
	
	floatingPopupWindowLayout.setOrientation(1);
	floatingPopupWindowLayout1.setOrientation(1);
	
	floatingPopupWindowScrollView.addView(floatingPopupWindowLayout);
	
	var floatingCategoryTitle = new categoryTitle(VertexClientPE.category.toName(category), true);
	var floatingCategoryTitleSettings = floatingCategoryTitle.getLeftButton();
	var floatingCategoryTitleTitle = floatingCategoryTitle.getMiddleButton();
	var floatingCategoryTitleArrow = floatingCategoryTitle.getRightButton();
	
	floatingCategoryTitleSettings.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function() {
			VertexClientPE.showCategoryDialog(floatingCategoryTitle, VertexClientPE.category.toName(category), 0);
		}
	}));
	
	VertexClientPE.addView(floatingPopupWindow, floatingCategoryTitle);
	
	if(floatingPopupWindowShown == true) {
		floatingCategoryTitleArrow.setText("△");
		floatingPopupWindowLayout1.addView(floatingPopupWindowScrollView);
	}else if(combatMenuShown == false) {
		floatingCategoryTitleArrow.setText("▽");
	}
	VertexClientPE.GUI.floatingMenus.push(this);
}

VertexClientPE.showNotification = function(eventtext) {
	var mNM = ctx.getSystemService(android.content.Context.NOTIFICATION_SERVICE);
	var notification = new android.app.Notification(android.R.drawable.ic_menu_edit, "Text", java.lang.System.currentTimeMillis());

    // The PendingIntent to launch our activity if the user selects this
    // notification
    var contentIntent = android.app.PendingIntent.getActivity(ctx, 0, new android.content.Intent(ctx), 0);

    // Set the info for the views that show in the notification panel.
    notification.setLatestEventInfo(ctx, "Title", eventtext, contentIntent);

    // Send the notification.
    mNM.notify("Title", 0, notification);
}

var nameColor = "§b";
var healthColor = "§c";

var defaultDestroyTimeAll = [
    null, 1.5, 0.6, 0.5, 2, 2, 0, -1, null, null, null, null, 0.5, 0.6, 3, 3, 3, 2, 0.2, 0.6, 0.3, 3, 3, null, 0.8, null, 0.2, 0.7, null, null, 4, 0, 0, null, null, 0.8, null, 0, 0, 0, 0, 3, 5, 2, 2, 2, 0, 1.5, 2, 50, 0, 0, null, 2, 2.5, null, 3, 5, 2.5, 0, 0.6, 3.5, 3.5, 1, 3, 0.4, 0.7, 2, 1, null, null, 5, null, 3, 3, null, null, null, 0.1, 0.5, 0.2, 0.4, 0.6, 0, null, 2, 1, 0.4, 0.3, null, 1, 0.5, null, null, -1, 3, null, 1.5, null, null, 5, 0.3, 1, 0, 0, null, 2, 2, 1.5, null, null, 2, null, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, null, null, null, null, null, 2, 2, 2, null, null, 2, null, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, 0.8, 2, 2, null, null, null, null, null, null, null, null, null, null, null, 0.5, 0.1, 5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 3.5, 50, 5, 0.6, 0.6, 5, null, null, null, null, 0
];

Block.setDestroyTimeAll = function(destroyTime) {
    for(i = 0; i < 256; i++) {
        Block.setDestroyTime(i, destroyTime);
    }
}

Block.setDestroyTimeDefaultAll = function() {
    for(i = 0; i < 256; i++) {
        Block.setDestroyTime(i, defaultDestroyTimeAll[i]);
    }
}

var logoImage = "  ";
var iconIcon = "  ";
var iconIconClicked = "  ";
var playPlayButton = " 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 ";
var playPlayButtonClicked = " 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 ";
var twitterTwitterButton = " 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 ";
var twitterTwitterButtonClicked = " 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 ";
var youTubeYouTubeButton = " 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 ";
var youTubeYouTubeButtonClicked = " iVBORw0KGgoAAAANSUhEUgAAAGQAAABiCAYAAACmu3ZJAAAABGdBTUEAANjr9RwUqgAAACBjSFJNAACHDwAAjA0AAPmTAACE5QAAe4IAAOt1AAA/tAAAIlh1a16cAAAD8GlDQ1BJQ0MgUHJvZmlsZQAASMeNVd1v21QUP4lvXKQWP6Cxjg4Vi69VU1u5GxqtxgZJk6XpQhq5zdgqpMl1bhpT1za2021Vn/YCbwz4A4CyBx6QeEIaDMT2su0BtElTQRXVJKQ9dNpAaJP2gqpwrq9Tu13GuJGvfznndz7v0TVAx1ea45hJGWDe8l01n5GPn5iWO1YhCc9BJ/RAp6Z7TrpcLgIuxoVH1sNfIcHeNwfa6/9zdVappwMknkJsVz19HvFpgJSpO64PIN5G+fAp30Hc8TziHS4miFhheJbjLMMzHB8POFPqKGKWi6TXtSriJcT9MzH5bAzzHIK1I08t6hq6zHpRdu2aYdJYuk9Q/881bzZa8Xrx6fLmJo/iu4/VXnfH1BB/rmu5ScQvI77m+BkmfxXxvcZcJY14L0DymZp7pML5yTcW61PvIN6JuGr4halQvmjNlCa4bXJ5zj6qhpxrujeKPYMXEd+q00KR5yNAlWZzrF+Ie+uNsdC/MO4tTOZafhbroyXuR3Df08bLiHsQf+ja6gTPWVimZl7l/oUrjl8OcxDWLbNU5D6JRL2gxkDu16fGuC054OMhclsyXTOOFEL+kmMGs4i5kfNuQ62EnBuam8tzP+Q+tSqhz9SuqpZlvR1EfBiOJTSgYMMM7jpYsAEyqJCHDL4dcFFTAwNMlFDUUpQYiadhDmXteeWAw3HEmA2s15k1RmnP4RHuhBybdBOF7MfnICmSQ2SYjIBM3iRvkcMki9IRcnDTthyLz2Ld2fTzPjTQK+Mdg8y5nkZfFO+se9LQr3/09xZr+5GcaSufeAfAww60mAPx+q8u/bAr8rFCLrx7s+vqEkw8qb+p26n11Aruq6m1iJH6PbWGv1VIY25mkNE8PkaQhxfLIF7DZXx80HD/A3l2jLclYs061xNpWCfoB6WHJTjbH0mV35Q/lRXlC+W8cndbl9t2SfhU+Fb4UfhO+F74GWThknBZ+Em4InwjXIyd1ePnY/Psg3pb1TJNu15TMKWMtFt6ScpKL0ivSMXIn9QtDUlj0h7U7N48t3i8eC0GnMC91dX2sTivgloDTgUVeEGHLTizbf5Da9JLhkhh29QOs1luMcScmBXTIIt7xRFxSBxnuJWfuAd1I7jntkyd/pgKaIwVr3MgmDo2q8x6IdB5QH162mcX7ajtnHGN2bov71OU1+U0fqqoXLD0wX5ZM005UHmySz3qLtDqILDvIL+iH6jB9y2x83ok898GOPQX3lk3Itl0A+BrD6D7tUjWh3fis58BXDigN9yF8M5PJH4B8Gr79/F/XRm8m241mw/wvur4BGDj42bzn+Vmc+NL9L8GcMn8F1kAcXhLu7iPAAAACXBIWXMAAC4iAAAuIgGq4t2SAAAAGHRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjlsM35OAAAME0lEQVR4Xu2deYxdVR3HcV8Q9xVGE7QtlG5Ad6og3WhR40aX0X+MiVGjiCSKW0wNGBMiKho7My2JRo06hW60UGpCZ1otNKB0WinYRGjFBo0CjSAWOnTm+v2e986Ze8/7vmXeu+vrO80nmfnNveee+/v2rPcsZ6xZsybvvBxMB6vAt8At4A6wD/wFHAX/KsOfaePftoP14JtgJZgKXgbUM3KDNGbM68FHwc3gfnASBDHxPLgP/Ah8GLwOqDRkhjRmwNngajAIXgDKmUkwDHYBPvvtQKUtVaQxJVh8rAC/A6eAclhww7VfC2658ipH37KVQe8Vq4Oepd1BzxKwGCzC74Q/04a/8RpeG76XcalnlGEadoCPg5cClebEkcaEYZH0DfA4qHCMFWD9lSvg1O5g2+SZwd6urli4/YKZRijGXUegY+A6kHqRJo0JwZe7HjwNIg6wIvB/9NYps6Qzk2DrlNlB3/JVtcQ5Dr4NzgLqnWJHGmOG2f+L4AkQeWE6Yf3yFcGWqXOkw9Jky7S5JudUEYYtuM+BlwD1jrEhjTEyHxwEkRfkS/ctWxXsmDRNOidL7pw0PViHtFURZj+YDdS7xoI0xsCrAJutI8C9kBVi54Qp0hl5gmlkESqEYeV/I3glUO/eEtLYIuzEPQTcS/Cl1qFoymOOqIfJMculMH8GU4DyQdNIYwt8CpwAToj1qDA3T58nX7ZIbJ42z7yLJ8yz4JNA+aIppLEJWNn9BLjEMuH9cy+XL1dk+ue8X+WWm0AsFb40jpNXA44tuQQywZtmzJcv1A5svPASJcpmwLpT+ahhpHEcvAHcC5wQbNPfed4M+SLtxB3nX6j6L3vAa4HyVUNIY4O8CbAZ6MTon7dQJr6d6Z+/0BeFI81N9/ClsQHYc+Wo6ZgYbVhfNArf3RPlHnAmUL6riTTWgd8nOELaESOEqOzvAuP+/iKNdfgFGBMDCVEJPB0ROYUf05QPqyKNNfgqGBNjXidn+NAnnihfAsqXEmmswuXAfbdgJ0klqEMXWl8rwoLwI9gCoHxagTQK3gL+AcxD+D/gron5H4/Kih0Tp/m55O/gjUD5NoI0CrYAJwaHqlVCOozBoRZPlH6gfBtBGj0+AZwYt866VCagQyUbZl/mi8LPw8rHDmkMwWz2b2Ai7NQb48erT1js1+w0SmOItcBERqW3n3+RfGiH6mybfLGfS34IlK8N0liGY/2mVcUImf3UA+MkGA2kveh4RRdbXROB8nlNQbYCEwkH0dSD4saE0dHg0N698u9Fhj60/gRVK3hpBDOBuZnKcrhZPSRubBiBKCefPyGvKSq3XfzecC4ZBZzaWuH7CkOZjcDcnGZFHg4ovZBZRoMHBgfktUWEvrR+Bb8BFb6vMID3ADM5oZQ7FsjIk0AFijI0uBsUX5iNFy0I5xJOmX0niPg/8kuZHwBzU1p1h6VWePrJp4KDA4PyviLh1SXfAxH/R34BHFp3E9o47VJFmhT1AnPLAeSUoYE98v4i0HfFqrAg7JdE5hGHxSDsSZqLmbXSHq+qFygIK5ehwUHDgd3FK8Y4FSpUbJEPAKdBWAxyGzAXrkMPU0WYJA0HCPPPI0eQUwaCgxBGxZVnvMr9V8BpEBaDMyb+B4yCm6enP2uk4cCMAlFGRk4ZQQ4wx0AcFWceuXXmpcGN11xjBeHkc1YVFYIw65iL0q7MLc2EUr1SKsIODrA1Vowc8/MPfsQKQhaDCkHcRLesBhGbDaP498iBg65uGRrYJePPE5xpb/0Nvg8qBHkQmAvSbl1ZWg3DwydN0WXrlv05bibTx9bf4E8gIggnvLnO4PbJ2YzqxhHYw2cRRkr1y27zs3pelnBlmNdJNNOGrCCLgPljVvUHiSuwXnl43z4jiMX0X3bulM/NCq+T+D7gBPlK2ZhZ/UHiDBTlxH+fMbnD1S0UJkfFmCcIV5k5QX5WNpo1d+rmNEgi2FZYOLcQjo+pNKQJ151Yv4Ne4AT5Q9kY9CzNpkIniYTSsHHw4J7fR4QxuQXsH7hbpiUNvIr9buAE4TSVkiBLuuXNaZBUYC6hLk88fgwClFpgYWGISk/S9CyOCPIIMIK8GLjdE7gAX92cBmkEShMWwkelKynWLuoOC8JREiMIm7zGyO781gyXKKcVbNM4nFMioMev0hc3nN8WGkIhZ1KQd1sDu/PqxrRIKzCXjI6OBEcfOmS+sfjiHBjchc5lOkP83hDKORSE33aNIcs+CEk7mLqlSiuMUJSkizGv6TuJgrgJDaebIAy2wqfjWeGH6xMfleZW8QSZSkFmWcPpKEg4HLrn3kgOYSdyiCQkBlGCnLZFlgqnXhgeEyRBISyeIOdREM4y6QhiA8ovFmMqfUngVepdFISraY2h9B19qrwxDbIOpU59emJwFySv2XsWBeEOBG5l1No27xj6YQT/ShX7iExTkngdw+eAGzpxu7utXdx+Qye1AqVQaUkDb+jkCHCCuN0YetttcLFKMLkixeJJ4Q0ucgNQJ4hb6txuw+8qQAf5/LTxht/NEmoryNfLxkxbWkmGtCvsRvCavF8GTpBlZWPbCjIyPCyfmSWeIFx27gR5M+CaBdP05U43KoKkSSJwEFE9K2u8pW6cYGJ2EbKCkMPAXNBT0GlA4ZBXISxehc6NQo0OYUH4TddcwElcKpKkaTWwsubqq+Hjx2X8ecIrrn4MKgT5GDAXZFWPtBxynivCeIK4GfBhQbgHFk8PMGUbdyJQESVJsyEvzdhG2TR9frj+4KdbtzVgWBCyDZgLueO0iixJxhvYjH3u2GMyrjzDpR7Wz4BLQJwGYTGI20Yji8+5jQRW1hzuyFufolF2TrggnDtIZLuNsBiEO4yazfI5CpnGZgFhGglZDALGSW90SduT4BXAaRAWw9IDzA1pTyutFdjTPvHoo/K+IuFV5jzpJ+L/yC9luKWG6ySyAlIRJ4EKeRgEjItNMyL7/bIzOAFE/B/5JQQ3cDQ3ptkEtsGKwGyhrisqXu7g1iUVvq8wlLkUmBtNEzilXGLDKYjx7OHD8pqiwg0YvMp8DqjwfYUhBCf/mpvTqktGmClGil1pV8PLHdyaXfm8piCcHuTqEq4cVQ/qUJ8NsyLbM7Hu4JEeyuc1BSG/BCYiRsizNNQDO1SH++B7RVXNvXylMcQ7wH+AiSyLzQSKjrfa9inAHV6Vrw3S6MHDsEyEnaJrfNBXXu74NFA+dkijB9ePRPZ653mAKgEdxuDxf54Y7Eoo/0aQRgH3deKZfibyLBeGFgVvRiJ3dmXxr3wbQRqrwMN8XauL52aohHToCvovWRiekchW1XKgfFqBNNaAG26ZBxlROsdUVNA/t+LYiu8A5UuJNNaA9Yn7ZsIHb+gcV+EQZ4hw78oXAeVLiTTW4TXgj2BMlJSH6fMI/2N6YvCUnXEfEiaNDcC29MNgTJTTOKeInMGNfLiqQPmuJtLYIF3gr8CJwvJTJbidEafqHAJvA8pndZHGcXA2YAKcKGwS8zOlSnw7wXU0fFdPDM6veitQvmoIaRwnPEGB5aVLGBOZhyO5k4JHyXpCkN2Ah/crHzWMNDYBK6/fApdAJpijnOqFiow4E4Rw9UDk23izSGMLXAfcaiwmnOdncLMu9XJFYuuU2Wag0BODW5JcC5QvmkIaW+QycAy4hPMlityz759fUXGTv4GGD/tqFGmMAdYr3GzevQCHEji+U6TRYqaVafYWZhIWUU0fr1oLaYyRD4HHgHuZUjF2Va6FYVOWaRS5gusAGx6XagZpjBlOvrsemE2aLVYYLqHjWgnlmDRhGvqWr6yWI3iQPUPLx3PXQxoT4hzQB06CyAtTHLbpuWYizcVCfFbvstWqP2HhUuWfgoaGzuNAGhPmXeBm8AyocILNOVwQ2bNkdaxnszOuXsS5DrmySpFk4XTamwD/E6l3SAxpTAku4foCGALKKQYrUEmkVSYX0alc492zqNtsdLB2YRn8bGyLu4Oepd3mWuv8OgJYHgCfB1yaodKcONKYAZwW813gBixThEM/NwBOoVVpSxVpzBjucPdZwJ4/2/rKia1wFPwafAacC1QaMkMacwYH65aAqwHX4t0O7gdsgvI7/wlgnc2fOdWGf7sPcP4s7+Emxdy9m6uN1TNywpoz/g/hm3HBBjsJsQAAAABJRU5ErkJggg== ";
var pathFont = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang";

Base64Decode(android.util.Base64.decode(iconIcon, 0), pathFont + "/clienticon.png");
Base64Decode(android.util.Base64.decode(iconIconClicked, 0), pathFont + "/clienticon_clicked.png");
Base64Decode(android.util.Base64.decode(playPlayButton, 0), pathFont + "/play_button.png");
Base64Decode(android.util.Base64.decode(playPlayButtonClicked, 0), pathFont + "/play_button_clicked.png");
Base64Decode(android.util.Base64.decode(twitterTwitterButton, 0), pathFont + "/twitter_button.png");
Base64Decode(android.util.Base64.decode(youTubeYouTubeButton, 0), pathFont + "/youtube_button.png");
Base64Decode(android.util.Base64.decode(twitterTwitterButtonClicked, 0), pathFont + "/twitter_button_clicked.png");
Base64Decode(android.util.Base64.decode(youTubeYouTubeButtonClicked, 0), pathFont + "/youtube_button_clicked.png");

var imgIcon = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clienticon.png");
var imgIconClicked = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/clienticon_clicked.png");
var imgPlayButton = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/play_button.png");
var imgPlayButtonClicked = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/play_button_clicked.png");
var imgTwitterButton = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/twitter_button.png");
var imgYouTubeButton = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/youtube_button.png");
var imgTwitterButtonClicked = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/twitter_button_clicked.png");
var imgYouTubeButtonClicked = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/com.mojang/youtube_button_clicked.png");
var iconClientGUI = new android.graphics.drawable.BitmapDrawable(imgIcon);
var iconClickedClientGUI = new android.graphics.drawable.BitmapDrawable(imgIconClicked)
var playButtonClientGUI = new android.graphics.drawable.BitmapDrawable(imgPlayButton);
var playButtonClickedClientGUI = new android.graphics.drawable.BitmapDrawable(imgPlayButtonClicked);
var splashTwitterButtonClientGUI = new android.graphics.drawable.BitmapDrawable(imgTwitterButton);
var splashYouTubeButtonClientGUI = new android.graphics.drawable.BitmapDrawable(imgYouTubeButton);
var splashTwitterButtonClickedClientGUI = new android.graphics.drawable.BitmapDrawable(imgTwitterButtonClicked);
var splashYouTubeButtonClickedClientGUI = new android.graphics.drawable.BitmapDrawable(imgYouTubeButtonClicked);

function Base64Decode(byteArray, Path) {
    try {
        var File = new java.io.File(Path);
        if (!File.exists()) {
            File.createNewFile();
            var Stream = new java.io.FileOutputStream(File);
            Stream.write(byteArray);
            Stream.close();
        }
        
    } catch (err) {
        print(err);
    }
}

var getContext = function() {
    return com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
};

ModPE.goToURL = function(url) {
	var uri = android.net.Uri.parse(url);
	var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, uri);
	ctx.startActivity(intent);
};

ModPE.getPlayerName = function() {
    var file = new java.io.File("/sdcard/games/com.mojang/minecraftpe/options.txt");
    var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
    var read, username;
    while((read = br.readLine()) != null) {
        if(read.split(":")[0] == "mp_username") {
            username = read.split(":")[1];
            break;
        }
    }
    br.close();
    return username;
};

ModPE.setPlayerName = function(username) {
	saveSetting("mp_username", username);
}

ModPE.changeClientId = function(clientId) {
	var fileOutputStream = new java.io.FileOutputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/clientId.txt"));
	var outputStreamWriter = new java.io.OutputStreamWriter(fileOutputStream);
	outputStreamWriter.write(clientId);
	outputStreamWriter.close();
	fileOutputStream.close();
};

ModPE.getClientId = function() {
    var file = new java.io.File("/sdcard/games/com.mojang/minecraftpe/clientid.txt");
    var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
    var read, username;
    while((read = br.readLine()) != null) {
        username = read;
        break;
    }
    br.close();
    return username;
};

function saveSetting(article, value) {
	var fileInputStream = new java.io.FileInputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/options.txt"));
	var inputStreamReader = new java.io.InputStreamReader(fileInputStream);
	var bufferedReader = new java.io.BufferedReader(inputStreamReader);
	var tempRead, tempReadString;
	var tempSaved = "";
	while ((tempRead = bufferedReader.readLine()) != null) {
	tempReadString = tempRead.toString();
	if (tempReadString.split(":")[0] == article) continue;
	tempSaved += tempReadString + "\n"
	}
	fileInputStream.close();
	inputStreamReader.close();
	bufferedReader.close();
	var fileOutputStream = new java.io.FileOutputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/options.txt"));
	var outputStreamWriter = new java.io.OutputStreamWriter(fileOutputStream);
	outputStreamWriter.write(tempSaved + article + ":" + value);
	outputStreamWriter.close();
	fileOutputStream.close();
};

/*function saveVertexSetting(article, value, secValue) {
	var fileInputStream = new java.io.FileInputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/vertex_categories.txt"));
	var inputStreamReader = new java.io.InputStreamReader(fileInputStream);
	var bufferedReader = new java.io.BufferedReader(inputStreamReader);
	var tempRead, tempReadString;
	var tempSaved = "";
	while ((tempRead = bufferedReader.readLine()) != null) {
	tempReadString = tempRead.toString();
	if (tempReadString.split(":")[0] == article) continue;
	tempSaved += tempReadString + "\n"
	}
	fileInputStream.close();
	inputStreamReader.close();
	bufferedReader.close();
	var fileOutputStream = new java.io.FileOutputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/vertex_categories.txt"));
	var outputStreamWriter = new java.io.OutputStreamWriter(fileOutputStream);
	outputStreamWriter.write(tempSaved + article + ":" + value);
	outputStreamWriter.close();
	fileOutputStream.close();
};*/

/*function loadVertexSetting(article) {
var fileInputStream = new java.io.FileInputStream(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/vertex_categories.txt"));
var inputStreamReader = new java.io.InputStreamReader(fileInputStream);
var bufferedReader = new java.io.BufferedReader(inputStreamReader);
var tempRead, tempReadString;
while ((tempRead = bufferedReader.readLine()) != null) {
tempReadString = tempRead.toString();
if (tempReadString.split(":")[0] == article) {
fileInputStream.close();
inputStreamReader.close();
bufferedReader.close();
return tempReadString.split(":")[1]
}
}
fileInputStream.close();
inputStreamReader.close();
bufferedReader.close();
return null
};
if (!_MOD_DIR.exists()) {
_MOD_DIR.mkdirs()
}
if (!_MOD_DATA.exists()) {
_MOD_DATA.createNewFile()
}

function alert(a) {
clientMessage("" + a)
}*/

//ctx.setSession(); session

/*ModPE.setProfileName = function(profileName) {
	//ctx.setLoginInformation(ctx.getAccessToken(), ModPE.getClientId(), ctx.getProfileId(), username);
	var edit = android.preference.PreferenceManager.getDefaultSharedPreferences(ctx).edit();
	edit.putString("profileName", profileName);
	edit.commit();
}*/

ModPE.getInfo = function(infoName) { //profileName, sessionId
	return android.preference.PreferenceManager.getDefaultSharedPreferences(ctx).getString(infoName, null);
}

ModPE.setSession = function(sessionId) {
	//ctx.setLoginInformation(ctx.getAccessToken(), ModPE.getClientId(), ctx.getProfileId(), username);
	var edit = android.preference.PreferenceManager.getDefaultSharedPreferences(ctx).edit();
	edit.putString("sessionId", sessionId);
	edit.commit();
}

ModPE.playerHasSplitControls = function() {
    var file = new java.io.File("/sdcard/games/com.mojang/minecraftpe/options.txt");
    var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
    var read, splitcontrols;
    while((read = br.readLine()) != null) {
        if(read.split(":")[0] == "ctrl_usetouchjoypad") {
            splitcontrols = read.split(":")[1];
            break;
        }
    }
    br.close();
    return splitcontrols;
};

ModPE.getCurrentUsedSkin = function() {
    var file = new java.io.File("/sdcard/games/com.mojang/minecraftpe/options.txt");
    var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
    var read, skin;
    while((read = br.readLine()) != null) {
        if(read.split(":")[0] == "game_skintypefull") {
            skin = read.split(":")[1];
            break;
        }
    }
    br.close();
    return skin;
};

var URL = "https://www.dominos.com/en/pages/order/";

function pizzaOrderDialog(){

ctx.runOnUiThread(new java.lang.Runnable({

run: function(){
try{
var wwv=new android.webkit.WebView(ctx);
var wS=wwv.getSettings();

wS.setJavaScriptEnabled(true);
wwv.setWebChromeClient(new android.webkit.WebChromeClient());
wwv.setWebViewClient(new android.webkit.WebViewClient());

wwv.loadUrl(URL);

var b=new android.app.AlertDialog.Builder(ctx);

b.setTitle(URL);
b.setView(wwv);
b.setNegativeButton("Close",new android.content.DialogInterface.OnClickListener(){

onClick:function(di, v1){
di.dismiss();
}
});

var a=b.create();
a.show();
}catch(err){
print("Cannot open window: "+err+".")
VertexClientPE.showBugReportDialog(err);
;
}
}}));
}

var line0, line1, line2, line3;

VertexClientPE.showSignEditorDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var signEditorTitle = clientTextView("SignEditor", true);
				var btn = clientButton("Ok");
				var btn1 = clientButton("Cancel");
				var inputBar = new EditText(ctx);
				var inputBar1 = new EditText(ctx);
				var inputBar2 = new EditText(ctx);
				var inputBar3 = new EditText(ctx);
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(signEditorTitle);
				dialogLayout.addView(inputBar);
				dialogLayout.addView(inputBar1);
				dialogLayout.addView(inputBar2);
				dialogLayout.addView(inputBar3);
				dialogLayout.addView(btn);
				dialogLayout.addView(btn1);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("SignEditor");
				inputBar.setHint("Line 1");
				inputBar.setText(Level.getSignText(signX, signY, signZ, 0));
				inputBar.setTextColor(android.graphics.Color.WHITE);
				inputBar1.setHint("Line 2");
				inputBar1.setText(Level.getSignText(signX, signY, signZ, 1));
				inputBar1.setTextColor(android.graphics.Color.WHITE);
				inputBar2.setHint("Line 3");
				inputBar2.setText(Level.getSignText(signX, signY, signZ, 2));
				inputBar2.setTextColor(android.graphics.Color.WHITE);
				inputBar3.setHint("Line 4");
				inputBar3.setText(Level.getSignText(signX, signY, signZ, 3));
				inputBar3.setTextColor(android.graphics.Color.WHITE);
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						line0 = inputBar.getText();
						line1 = inputBar1.getText();
						line2 = inputBar2.getText();
						line3 = inputBar3.getText();
						Level.setSignText(signX, signY, signZ, 0, line0);
						Level.setSignText(signX, signY, signZ, 1, line1);
						Level.setSignText(signX, signY, signZ, 2, line2);
						Level.setSignText(signX, signY, signZ, 3, line3);
						dialog.dismiss();
					}
				});
				btn1.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(err);
			}
		}
	});
}

var itemId, amount, data;

VertexClientPE.showItemGiverDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var itemGiverTitle = clientTextView("ItemGiver", true);
				var btn = clientButton("Add");
				var btn1 = clientButton("Cancel");
				var inputBar = new EditText(ctx);
				var inputBar1 = new EditText(ctx);
				var inputBar2 = new EditText(ctx);
				inputBar.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
				inputBar1.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
				inputBar2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(itemGiverTitle);
				dialogLayout.addView(inputBar);
				dialogLayout.addView(inputBar1);
				dialogLayout.addView(inputBar2);
				dialogLayout.addView(btn);
				dialogLayout.addView(btn1);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("ItemGiver");
				inputBar.setHint("ID");
				inputBar.setTextColor(android.graphics.Color.WHITE);
				inputBar1.setHint("Amount");
				inputBar1.setTextColor(android.graphics.Color.WHITE);
				inputBar2.setHint("Data");
				inputBar2.setTextColor(android.graphics.Color.WHITE);
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						itemId = inputBar.getText();
						amount = inputBar1.getText();
						data = inputBar2.getText();
						Player.addItemInventory(itemId, amount, data);
						dialog.dismiss();
					}
				});
				btn1.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(err);
			}
		}
	});
}

var reportName;

VertexClientPE.showBugReportDialog = function(exception) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var bugReportTitle = clientTextView("An error occurred", true);
				var btn = clientButton("Report on GitHub");
				var btn1 = clientButton("Close");
				var inputBar = new EditText(ctx);
				var exceptionTextView = clientTextView(exception);
				var dialogLayout = new LinearLayout(ctx);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(bugReportTitle);
				dialogLayout.addView(inputBar);
				dialogLayout.addView(exceptionTextView);
				dialogLayout.addView(btn);
				dialogLayout.addView(btn1);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("An error occurred");
				inputBar.setHint("Title of the issue");
				inputBar.setTextColor(android.graphics.Color.WHITE);
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						reportName = inputBar.getText();
						ModPE.goToURL("https://github.com/Vertex-Client/Vertex-Client-PE/issues/new?title=" + reportName + "&body=" + exception);
						dialog.dismiss();
					}
				});
				btn1.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
			}
		}
	});
}

VertexClientPE.showMoreDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var moreTitle = clientTextView("More", true);
				var settingsButton = clientButton("Settings");
				var addonsButton = clientButton("Addons");
				var informationButton = clientButton("Information");
				var kitsButton = clientButton("Kits");
				var newLineText = new widget.TextView(ctx);
				newLineText.setText("\n");
				var cancelButton = clientButton("Cancel");
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(moreTitle);
				dialogLayout.addView(settingsButton);
				dialogLayout.addView(addonsButton);
				dialogLayout.addView(informationButton);
				//dialogLayout.addView(kitsButton);
				dialogLayout.addView(newLineText);
				dialogLayout.addView(cancelButton);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("More");
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				settingsButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						//vertexclientpefavmenu.dismiss(); //Close
						settingsScreen();
						exitSettings();
					}
				});
				addonsButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						//vertexclientpefavmenu.dismiss(); //Close
						addonScreen();
						exitAddon();
					}
				});
				informationButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						//vertexclientpefavmenu.dismiss(); //Close
						informationScreen();
						exitInformation();
					}
				});
				kitsButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						topBar.dismiss();
						showingMenu = false;
						vertexclientpecombatmenu.dismiss(); //Close
						vertexclientpebuildingmenu.dismiss(); //Close
						vertexclientpemovementmenu.dismiss(); //Close
						vertexclientpechatmenu.dismiss(); //Close
						vertexclientpemiscmenu.dismiss(); //Close
						//vertexclientpefavmenu.dismiss(); //Close
						VertexClientPE.showKitsScreen();
					}
				});
				cancelButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

VertexClientPE.showModDialog = function(mod, btn) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				VertexClientPE.loadMainSettings();
				var modTitle = clientTextView(mod.name, true);
				modTitle.setTextSize(20);
				var modTypeText = clientTextView("Type: " + mod.type + "\n");
				var modDescTitle = clientTextView("Description:");
				var modDescText = clientTextView(mod.desc);
				var modEnter = clientTextView("\n");
				var closeButton = clientButton("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				var dialogLayout = new LinearLayout(ctx);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(modTitle);
				if(mod.source != null) {
					dialogLayout.addView(clientTextView("Source: " + mod.source + "\n"));
				}
				dialogLayout.addView(modTypeText);
				dialogLayout.addView(modDescTitle);
				dialogLayout.addView(modDescText);
				dialogLayout.addView(modEnter);
				
				if(mod.getSettingsLayout) {
					dialogLayout.addView(mod.getSettingsLayout());
				}
				
				var dialogExtraLayout = new LinearLayout(ctx);
				dialogExtraLayout.setOrientation(LinearLayout.HORIZONTAL);
				dialogLayout.addView(dialogExtraLayout);
				if(mod.isStateMod()) {
					dialogExtraLayoutLeft = new LinearLayout(ctx);
					dialogExtraLayoutLeft.setOrientation(1);
					dialogExtraLayoutLeft.setGravity(android.view.Gravity.CENTER);
					dialogExtraLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 2, display.heightPixels / 10));
					dialogExtraLayoutRight = new LinearLayout(ctx);
					dialogExtraLayoutRight.setOrientation(1);
					dialogExtraLayoutRight.setGravity(android.view.Gravity.CENTER);
					dialogExtraLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 2, display.heightPixels / 10));
					dialogExtraLayout.addView(dialogExtraLayoutLeft);
					dialogExtraLayout.addView(dialogExtraLayoutRight);
					closeButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
					dialogExtraLayoutLeft.addView(closeButton);
					var toggleButton = clientButton("Toggle");
					toggleButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
					if(mod.state) {
						toggleButton.setText("Disable");
						if(yesCheatPlusState && mod.canBypassYesCheatPlus && !mod.canBypassYesCheatPlus()) {
							toggleButton.setTextColor(android.graphics.Color.RED);
						} else {
							toggleButton.setTextColor(android.graphics.Color.GREEN);
						}
					} else {
						toggleButton.setText("Enable");
					}
					toggleButton.setOnClickListener(new android.view.View.OnClickListener() {
						onClick: function(view) {
							if(mod.requiresPro && mod.requiresPro() && !VertexClientPE.isPro()) {
								VertexClientPE.showProDialog(mod.name);
								return;
							}
							if(mod.name == "YesCheat+") {
								mod.onToggle();
							} else {
								if(!yesCheatPlusState) {
									mod.onToggle();
								} else if(yesCheatPlusState && mod.canBypassYesCheatPlus == undefined || mod.canBypassYesCheatPlus == null) {
									mod.onToggle();
								} else if(yesCheatPlusState && mod.canBypassYesCheatPlus && !mod.canBypassYesCheatPlus()) {
									if(mod.isStateMod() && mod.state) {
										mod.onToggle();
									} else if(mod.isStateMod() && !mod.state) {
										mod.state = true;
									} else if(!mod.isStateMod()) {
										VertexClientPE.toast("This mod is blocked by YesCheat+!");
									}
								}
							}
							if(mod.isStateMod()) {
								if(mod.state) {
									toggleButton.setText("Disable");
									if(yesCheatPlusState && mod.canBypassYesCheatPlus && !mod.canBypassYesCheatPlus()) {
										toggleButton.setTextColor(android.graphics.Color.RED);
										btn.setTextColor(android.graphics.Color.RED);
									} else {
										toggleButton.setTextColor(android.graphics.Color.GREEN);
										btn.setTextColor(android.graphics.Color.GREEN);
									}
								} else if(!mod.state) {
									toggleButton.setText("Enable");
									if(themeSetting == "white") {
										toggleButton.setTextColor(android.graphics.Color.BLACK);
									} else {
										toggleButton.setTextColor(android.graphics.Color.WHITE);
									}
									if(themeSetting == "white") {
										btn.setTextColor(android.graphics.Color.BLACK);
									} else {
										btn.setTextColor(android.graphics.Color.WHITE);
									}
								}
							}
						}
					});
					dialogExtraLayoutRight.addView(toggleButton);
				} else {
					dialogExtraLayout.setGravity(android.view.Gravity.CENTER);
					closeButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 2, display.heightPixels / 10));
					dialogExtraLayout.addView(closeButton);
				}
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle(mod.name);
				dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener() {
					onDismiss: function() {
						if(mod.onModDialogDismiss) {
							mod.onModDialogDismiss();
						}
					}
				});
				dialog.show();
				var window = dialog.getWindow();
				window.setLayout(display.widthPixels, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

VertexClientPE.showAutoSpammerDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				VertexClientPE.loadMainSettings();
				var autoSpammerTitle = clientTextView("AutoSpammer", true);
				autoSpammerTitle.setTextSize(20);
				var autoSpammerTypeText = clientTextView("Type: Mod\n");
				var autoSpammerDescTitle = clientTextView("Description:");
				var autoSpammerDescText = clientTextView("Automatically spams the chat.\n");
				var autoSpammerMessageTitle = clientTextView("Message:");
				var spamMessageInput = new EditText(ctx);
				spamMessageInput.setText(spamMessage);
				spamMessageInput.setTextColor(android.graphics.Color.WHITE);
				spamMessageInput.setHint("Spam message");
				var closeButton = clientButton("Close");
				var dialogLayout = new LinearLayout(ctx);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(autoSpammerTitle);
				dialogLayout.addView(autoSpammerTypeText);
				dialogLayout.addView(autoSpammerDescTitle);
				dialogLayout.addView(autoSpammerDescText);
				dialogLayout.addView(autoSpammerMessageTitle);
				dialogLayout.addView(spamMessageInput);
				dialogLayout.addView(closeButton);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("AutoSpammer");
				dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener() {
					onDismiss: function() {
						spamMessage = spamMessageInput.getText();
						VertexClientPE.saveMainSettings();
						VertexClientPE.loadMainSettings();
					}
				});
				dialog.show();
				var window = dialog.getWindow();
				window.setLayout(display.widthPixels, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

VertexClientPE.showDelaySpammerDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				VertexClientPE.loadMainSettings();
				var delaySpammerTitle = clientTextView("DelaySpammer", true);
				delaySpammerTitle.setTextSize(20);
				var delaySpammerTypeText = clientTextView("Type: Mod\n");
				var delaySpammerDescTitle = clientTextView("Description:");
				var delaySpammerDescText = clientTextView("Automatically spams the chat with a delay and randomly generated messages.\n");
				var delaySpammerDelayTimeTitle = clientTextView("Delay time: | " + spamDelayTime + " seconds");
				var delaySpammerDelayTimeSlider = new widget.SeekBar(ctx);
				delaySpammerDelayTimeSlider.setProgress(spamDelayTime);
				delaySpammerDelayTimeSlider.setMax(60);
				var closeButton = clientButton("Close");
				var dialogLayout = new LinearLayout(ctx);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(delaySpammerTitle);
				dialogLayout.addView(delaySpammerTypeText);
				dialogLayout.addView(delaySpammerDescTitle);
				dialogLayout.addView(delaySpammerDescText);
				dialogLayout.addView(delaySpammerDelayTimeTitle);
				dialogLayout.addView(delaySpammerDelayTimeSlider);
				dialogLayout.addView(closeButton);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("DelaySpammer");
				delaySpammerDelayTimeSlider.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
					onProgressChanged: function() {
						spamDelayTime = delaySpammerDelayTimeSlider.getProgress();
						delaySpammerDelayTimeTitle.setText("Delay time: | " + spamDelayTime + " seconds");
					}
				});
				dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener() {
					onDismiss: function() {
						spamDelayTime = delaySpammerDelayTimeSlider.getProgress();
						VertexClientPE.saveMainSettings();
						VertexClientPE.loadMainSettings();
					}
				});
				dialog.show();
				var window = dialog.getWindow();
				window.setLayout(display.widthPixels, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

var accountNameInput;
var accountClientIdInput;
var accountName = "unknown";
var accountClientId = "unknown";

VertexClientPE.showAddAccountDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				VertexClientPE.loadMainSettings();
				dialogGUI = new widget.PopupWindow();
				var accountTitle = clientTextView("Add account", true);
				accountNameInput = new EditText(ctx);
				accountNameInput.setTextColor(android.graphics.Color.WHITE);
				accountNameInput.setSingleLine(true);
				accountNameInput.setHint("Enter an username");
				accountClientIdInput = new EditText(ctx);
				accountClientIdInput.setTextColor(android.graphics.Color.WHITE);
				accountClientIdInput.setHint("Enter a client id (wip, added later)");
				var okButton = clientButton("Ok");
				var cancelButton = clientButton("Cancel");
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(accountTitle);
				dialogLayout.addView(accountNameInput);
				//dialogLayout.addView(accountClientIdInput);
				dialogLayout.addView(okButton);
				dialogLayout.addView(cancelButton);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("Add account");
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				okButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						accountName = accountNameInput.getText().toString();
						if(accountName == null || accountName == "" || accountName.replaceAll(" ", "") == "") {
							VertexClientPE.toast("Enter an username!");
							return;
						}
						//accountClientId = accountClientIdInput.getText().toString();
						if(VertexClientPE.accounts.length() != undefined && VertexClientPE.accounts.length() != undefined) {
							for(var i = 0; i < VertexClientPE.accounts.length(); i++) {
								if(VertexClientPE.accounts.get(i) == accountName) {
									VertexClientPE.toast("This account already exists in your accounts list!");
									return;
								}
							}
						}
						VertexClientPE.accounts.put(accountName);
						//print("\'" + accountName + "\'");
						VertexClientPE.saveAccounts();
						dialog.dismiss();
						accountManager.dismiss();
						exitAccountManagerUI.dismiss();
						VertexClientPE.showAccountManager();
						exitAccountManager();
					}
				});
				cancelButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

VertexClientPE.showProDialog = function(featureName) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				var dialogTitle = clientTextView("Pro");
				dialogTitle.setTextSize(25);
				var dialogDesc = clientTextView(featureName + " requires Vertex Client PE Pro!\n");
				var btn = clientButton("Get Pro for free!");
				var btn1 = clientButton("Close");
				var inputBar = new EditText(ctx);
				var dialogLayout = new LinearLayout(ctx);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(dialogTitle);
				dialogLayout.addView(dialogDesc);
				dialogLayout.addView(btn);
				dialogLayout.addView(btn1);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle(featureName + " requires Vertex Client PE Pro");
				dialog.show();
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
						VertexClientPE.downloadPro();
					}
				});
				btn1.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

var consoleInput;

VertexClientPE.showJavascriptConsoleDialog = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				dialogGUI = new widget.PopupWindow();
				var javascriptConsoleTitle = clientTextView("Javascript Console", true);
				var btn = clientButton("Send");
				var btn1 = clientButton("Cancel");
				var inputBar = new EditText(ctx);
				var dialogLayout = new LinearLayout(ctx);
				var spritesheet = android.graphics.Bitmap.createScaledBitmap(trimImage(GetSpritesheet(), 0, 0, 16, 16), 16 * GuiSize, 16 * GuiSize, false);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(javascriptConsoleTitle);
				dialogLayout.addView(inputBar);
				dialogLayout.addView(btn);
				dialogLayout.addView(btn1);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("Javascript Console");
				inputBar.setHint("Javascript input");
				inputBar.setTextColor(android.graphics.Color.WHITE);
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialogGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.TOP, 0, 0);
				dialog.show();
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
					consoleInput = "js " + inputBar.getText();
					  var jsLine,
						  funcResult,
						  jsRex = /(?:^js(?:\s+)(.*)$)|(?:^js$)/,
						  matches;

					  if(jsRex.test(consoleInput)) {

						matches = jsRex.exec(consoleInput);

						if(matches[1] === undefined || matches[1] === '') {
						  print('Usage: js <JavaScript code>');
						}
						else {
						  jsLine = matches[1];
						  // Evaluate the second part of the command as a JavaScript snippet and collect the result
						  try {
							funcResult = eval(jsLine);
						  }
						  catch(e) {
							clientMessage('JavaScript Error: ' + e.message);
						  }
						  
						  // If a value was returned, post it on the PE chat console
						  if(funcResult != null) {
							clientMessage(funcResult.toString());
						  }
						}
					  }
					}
				});
				btn1.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

VertexClientPE.showKitsScreen = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var kitsScreenLayout = new LinearLayout(ctx);
					kitsScreenLayout.setOrientation(0);
					kitsScreenLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var kitsScreenScrollView = new ScrollView(ctx);
					kitsScreenLayout.addView(kitsScreenScrollView);
					
					var kitsScreenLayout1 = new LinearLayout(ctx);
					kitsScreenLayout1.setOrientation(LinearLayout.HORIZONTAL);
					kitsScreenLayout1.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenScrollView.addView(kitsScreenLayout1);
					
					var kitsScreenLayoutLeft = new LinearLayout(ctx);
					kitsScreenLayoutLeft.setOrientation(1);
					kitsScreenLayoutLeft.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					kitsScreenLayout1.addView(kitsScreenLayoutLeft);
					
					var kitsScreenLayoutCenter = new LinearLayout(ctx);
					kitsScreenLayoutCenter.setOrientation(1);
					kitsScreenLayoutCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenLayoutCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					kitsScreenLayout1.addView(kitsScreenLayoutCenter);
					
					var kitsScreenLayoutRight = new LinearLayout(ctx);
					kitsScreenLayoutRight.setOrientation(1);
					kitsScreenLayoutRight.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					kitsScreenLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, LinearLayout.LayoutParams.WRAP_CONTENT));
					kitsScreenLayout1.addView(kitsScreenLayoutRight);
					
					var combatKitButton = new Button(ctx);
					combatKitButton.setText("Combat");
					combatKitButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.widthPixels / 4));
					combatKitButton.setBackgroundDrawable(combatKitClientGUI);
					combatKitButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//todo
						}
					}));
					kitsScreenLayoutLeft.addView(combatKitButton);
					
					var toolsKitButton = clientButton("Tools");
					toolsKitButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					toolsKitButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//todo
						}
					}));
					//kitsScreenLayoutCenter.addView(toolsKitButton);
					
					var kitsButtonBlue = clientButton("Unknown");
					kitsButtonBlue.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					kitsButtonBlue.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//todo
						}
					}));
					//kitsScreenLayoutRight.addView(kitsButtonBlue);
					
					kitsScreen = new widget.PopupWindow(kitsScreenLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
					kitsScreen.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#0080FF")));
					kitsScreen.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occurred: ' + error);
					VertexClientPE.showBugReportDialog(error);
				}
			}
		}));
}

VertexClientPE.showCategoryDialog = function(titleView, currentName, categoryId) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			try {
				var _0x25ea=["\x69\x73\x50\x72\x6F","\x74\x72\x75\x65","\x52\x65\x6E\x61\x6D\x69\x6E\x67\x20\x63\x61\x74\x65\x67\x6F\x72\x69\x65\x73","\x73\x68\x6F\x77\x50\x72\x6F\x44\x69\x61\x6C\x6F\x67"];if(VertexClientPE[_0x25ea[0]]()!=_0x25ea[1]){VertexClientPE[_0x25ea[3]](_0x25ea[2]);return}
				dialogGUI = new widget.PopupWindow();
				var categoryDialogTitle = clientTextView("Rename category \'" + currentName + "\'", true);
				var btn = clientButton("Close");
				var inputBar = new EditText(ctx);
				var dialogLayout = new LinearLayout(ctx);
				dialogLayout.setBackgroundDrawable(backgroundGradient());
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(categoryDialogTitle);
				dialogLayout.addView(inputBar);
				dialogLayout.addView(btn);
				var dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle("Rename category \'" + currentName + "\'");
				inputBar.setHint("Category name");
				inputBar.setText(currentName);
				inputBar.setTextColor(android.graphics.Color.WHITE);
				dialogGUI.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
				dialog.show();
				inputBar.addTextChangedListener(new android.text.TextWatcher() {
					onTextChanged: function() {
						currentName = inputBar.getText();
					}
				});
				btn.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function(view) {
						dialog.dismiss();
					}
				});
				dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener() {
					onDismiss: function() {
						switch(categoryId) {
							case 0:
								combatName = currentName;
								break;
							case 1:
								buildingName = currentName;
								break;
							case 2:
								movementName = currentName;
								break;
							case 3:
								chatName = currentName;
								break;
							case 4:
								miscName = currentName;
								break;
							default:
								VertexClientPE.toast("An error occurred!");
								break;
						}
						VertexClientPE.saveMainSettings();
						VertexClientPE.loadMainSettings();
						titleView.getMiddleButton().setText(currentName);
					}
				});
			} catch(e) {
				print("Error: " + e);
				VertexClientPE.showBugReportDialog(e);
			}
		}
	});
}

VertexClientPE.switchGameMode = function() {
	if(Level.getGameMode() == 0) {
		Level.setGameMode(1);
	} else if(Level.getGameMode() == 1) {
		Level.setGameMode(0);
	}
}

VertexClientPE.spectate = function(playerName) {
	var players = Server.getAllPlayers();
	for (var i = 0; i < players.length; i++) {
		if(Player.getName(players[i]) == playerName) {
			ModPE.setCamera(players[i]);
		}
	}
}

VertexClientPE.clientMessage = function(message) {
	var clientName = VertexClientPE.getName();
	if(VertexClientPE.isPro() == "true") {
		clientName += " Pro";
	}
	clientMessage(ChatColor.RED + "[" + ChatColor.DARK_GREEN + clientName + ChatColor.RED + "] " + ChatColor.WHITE + message);
}

VertexClientPE.toast = function(message, vibrate) {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function() {
			if(vibrate || vibrate == null) {
				ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
			}
			var layout = new LinearLayout(ctx);
			layout.setBackground(backgroundGradient());
			var title = VertexClientPE.getName();
			var _0xc62b=["\x69\x73\x50\x72\x6F","\x74\x72\x75\x65","\x20\x50\x72\x6F"];if(VertexClientPE[_0xc62b[0]]()==_0xc62b[1]){title+=_0xc62b[2]}
			var text = clientTextView(new android.text.Html.fromHtml("<b>" + title + "</b> " + message), 0);
			layout.addView(text);
			toast = new widget.Toast(ctx);
			toast.setView(layout);
			toast.show();
		}
	}));
}

VertexClientPE.syntaxError = function(syntax) {
	VertexClientPE.clientMessage(ChatColor.DARK_RED + "Syntax error!");
	VertexClientPE.clientMessage(syntax);
}

VertexClientPE.getVersion = function(type) {
	switch(type) {
		case "current":
		case undefined:
		case null:
			return "Current version: v" + VertexClientPE.currentVersion;
		case "target":
			return "Target version: " + VertexClientPE.targetVersion;
		case "latest":
			if(VertexClientPE.latestVersion != undefined) {
				return "Latest version: v" + VertexClientPE.latestVersion;
			} else {
				return "Latest version: No internet connection.";
			}
	}
}

var p, y, xx, yy, zz;

var sayMsg;

VertexClientPE.commandManager = function(cmd) {
	var finished = false;
	commandSplit = cmd.split(" ");
	VertexClientPE.modules.forEach(function(element, index, array) {
		if(element.syntax != null && commandSplit[0] == element.syntax.split(" ")[0] && element.type == "Command") {
			if(element.onCall) {
				element.onCall(cmd);
				finished = true;
				return;
			}
		}
	});
	switch(commandSplit[0]) {
		case "gm": //2
			VertexClientPE.switchGameMode();
			VertexClientPE.clientMessage("Your gamemode has been updated!");
			break;
		case "spectate": //3
			if(commandSplit[1] == null || commandSplit[1] == undefined) {
				VertexClientPE.syntaxError(".spectate <player>");
			} else {
				VertexClientPE.spectate(commandSplit[1]);
			}
			break;
		case "t": //4
		case "toggle": //4
			try {
				if (cmd.substring(2, cmd.length) != null && cmd.substring(2, cmd.length) != undefined && commandSplit[1] != null) {
					var shouldReturn = false;
					VertexClientPE.modules.forEach(function (element, index, array) {
						if (element.name.toLowerCase() == cmd.substring(2, cmd.length)
							.toLowerCase() && !shouldReturn) {
							if (element.isStateMod()) {
								if(element.requiresPro && element.requiresPro() && !VertexClientPE.isPro()) {
									VertexClientPE.showProDialog(element.name);
									return;
								}
								VertexClientPE.modules[index].onToggle();
								if(hacksList != null && hacksList.isShowing()) {
									updateHacksList();
								}
								VertexClientPE.toast("Sucessfully toggled module " + element.name);
							} else {
								VertexClientPE.toast(element.name + " can't be toggled!");
							}
							shouldReturn = true;
						}
					});
					if(shouldReturn) {
						return;
					}
					VertexClientPE.toast("Module " + cmd.substring(2, cmd.length) + " can't be found/toggled!");
				} else {
					throw new SyntaxError();
				}
			} catch(e) {
				if(e instanceof SyntaxError) {
					VertexClientPE.syntaxError(".toggle <module>");
				} else {
					VertexClientPE.showBugReportDialog(e);
				}
			}
			break;
		case "drop": //5
			try {
				if(commandSplit[1] == null || commandSplit[1] == undefined || commandSplit[1] == "infinite") {
					for(var i = 0; i <= 512; i++) {
						p = ((Entity.getPitch(getPlayerEnt()) + 90) * Math.PI) / 180;
						y = ((Entity.getYaw(getPlayerEnt()) + 90) * Math.PI) / 180;
						xx = Math.sin(p) * Math.cos(y);
						yy = Math.sin(p) * Math.sin(y);
						zz = Math.cos(p);
						Level.dropItem(Player.getX() + xx, Player.getY() + zz, Player.getZ() + yy, 1, i, 1);
					}
				} else {
					throw new SyntaxError();
				}
			} catch(e) {
				if(e instanceof SyntaxError) {
					VertexClientPE.syntaxError(".drop [infinite]");
				} else {
					VertexClientPE.showBugReportDialog(e);
				}
			}
			break;
		case "version": //6
			if(typeof VertexClientPE.getVersion(commandSplit[1]) !== "undefined") {
				VertexClientPE.clientMessage(VertexClientPE.getVersion(commandSplit[1]));
			} else {
				VertexClientPE.syntaxError(".version <current|target|latest>");
			}
			break;
		case "p": //7
		case "panic":
			panic.onToggle();
			if(hacksList != null && hacksList.isShowing()) {
				updateHacksList();
			}
			break;
		case "js": //8
			VertexClientPE.showJavascriptConsoleDialog();
			break;
		case "give": //10
			if(commandSplit[1] != null) {
				if(Item.internalNameToId(commandSplit[1]) != null) {
					var itemId = Item.internalNameToId(commandSplit[1]);
				} else {
					var itemId = commandSplit[1];
				}
			} else {
				VertexClientPE.syntaxError(".give (<item_name|item_id>) [<amount>] [<data>]");
				break;
			}
			if(commandSplit[2] != null) {
				var count = commandSplit[2];
			} else {
				var count = 1;
			}
			if(commandSplit[3] != null) {
				var data = commandSplit[3];
			} else {
				var data = 0;
			}
			if(Item.isValidItem(itemId)) {
				Player.addItemInventory(itemId, count, data);
			} else {
				VertexClientPE.syntaxError(".give (<item_name|item_id>) [<amount>] [<data>]");
			}
			break;
		case "tp": //11
			if(commandSplit[1] != null) {
				var x = commandSplit[1];
			} else {
				VertexClientPE.syntaxError(".tp <x> <y> <z>");
				break;
			}
			if(commandSplit[2] != null) {
				var y = commandSplit[2];
			} else {
				VertexClientPE.syntaxError(".tp <x> <y> <z>");
				break;
			}
			if(commandSplit[3] != null) {
				var z = commandSplit[3];
			} else {
				VertexClientPE.syntaxError(".tp <x> <y> <z>");
				break;
			}
			if(getTile(x, y, z) != null) {
				VertexClientPE.teleporter(x, y, z);
			}
			break;
		default:
			if(!finished) {
				VertexClientPE.clientMessage(ChatColor.RED + "Error: command \"" + cmd + "\" not found!");
			}
			break;
	}
}

var mp;

var music = [
	["Jim Yosef – Eclipse [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Jim%20Yosef%20-%20Eclipse.mp3"],
	["Ahrix – Nova [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Ahrix%20-%20Nova.mp3"],
	["SirensCeol – Coming Home [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/SirensCeol%20-%20Coming%20Home.mp3"],
	["Diviners feat. Contacreast – Tropic Love [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Diviners%20ft.%20Contacreast%20-%20Tropic%20Love%20%28Original%20Mix%29.mp3"],
	["Distrion & Alex Skrindo – Entropy", "http://files-cdn.nocopyrightsounds.co.uk/Distrion%20%26%20Alex%20Skrindo%20-%20Entropy.mp3"],
	["Disfigure – Blank [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Disfigure%20-%20Blank.mp3"],
	["DEAF KEV – Invincible [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/DEAF%20KEV%20-%20Invincible.mp3"],
	["Different Heaven & EH!DE – My Heart [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Different%20Heaven%20%26%20EH%21DE%20-%20My%20Heart.mp3"],
	["William Ekh – Adventure (feat. Alexa Lusader)", "http://files-cdn.nocopyrightsounds.co.uk/William%20Ekh%20-%20Adventure%20%28feat.%20Alexa%20Lusader%29.mp3"],
	["Different Heaven – Nekozilla", "http://files-cdn.nocopyrightsounds.co.uk/Different%20Heaven%20-%20Nekozilla.mp3"],
	["Tobu – Candyland [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Tobu%20-%20Candyland.mp3"],
	["Jim Yosef – Firefly [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/jim-yosef-firefly-ncs-release.mp3"]
];

VertexClientPE.resetMusic = function() {
	music = [
		["Jim Yosef – Eclipse [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Jim%20Yosef%20-%20Eclipse.mp3"],
		["Ahrix – Nova [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Ahrix%20-%20Nova.mp3"],
		["SirensCeol – Coming Home [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/SirensCeol%20-%20Coming%20Home.mp3"],
		["Diviners feat. Contacreast – Tropic Love [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Diviners%20ft.%20Contacreast%20-%20Tropic%20Love%20%28Original%20Mix%29.mp3"],
		["Distrion & Alex Skrindo – Entropy", "http://files-cdn.nocopyrightsounds.co.uk/Distrion%20%26%20Alex%20Skrindo%20-%20Entropy.mp3"],
		["Disfigure – Blank [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Disfigure%20-%20Blank.mp3"],
		["DEAF KEV – Invincible [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/DEAF%20KEV%20-%20Invincible.mp3"],
		["Different Heaven & EH!DE – My Heart [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Different%20Heaven%20%26%20EH%21DE%20-%20My%20Heart.mp3"],
		["William Ekh – Adventure (feat. Alexa Lusader)", "http://files-cdn.nocopyrightsounds.co.uk/William%20Ekh%20-%20Adventure%20%28feat.%20Alexa%20Lusader%29.mp3"],
		["Different Heaven – Nekozilla", "http://files-cdn.nocopyrightsounds.co.uk/Different%20Heaven%20-%20Nekozilla.mp3"],
		["Tobu – Candyland [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/Tobu%20-%20Candyland.mp3"],
		["Jim Yosef – Firefly [NCS Release]", "http://files-cdn.nocopyrightsounds.co.uk/jim-yosef-firefly-ncs-release.mp3"]
	];
}

VertexClientPE.playMusic = function() {
	if(playMusicSetting != "off" && playMusicSetting != "on" && music.length != 0) {
		try {
			var randomMusic = music[Math.floor(Math.random() * music.length)];
			mp = new android.media.MediaPlayer();
			mp.setDataSource(randomMusic[1]);
			mp.setOnPreparedListener(new android.media.MediaPlayer.OnPreparedListener() {
				onPrepared: function(mp) {
					musicText = randomMusic[0];
					if(hacksList != null) {
						updateHacksList();
					}
					mp.start();
				}
			});
			mp.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener() {
				onCompletion: function(arg0) {
					mp = null;
					music.slice(randomMusic);
					eval(VertexClientPE.playMusic());
				}
			});
			mp.prepareAsync();
		} catch(e) {
			print(e);
		}
	} else if(music.length == 0) {
		VertexClientPE.resetMusic();
		eval(VertexClientPE.playMusic());
	}
}

VertexClientPE.healthTags = function() {
    var mobs = Entity.getAll();

    for(var i = 0; i < mobs.length; i++) {


        /* now the variable "mobs" is now "mobs[i]",
        if you are asking why they are they now like this, it is because we split all gotten entities as their own, that means you can personalize them, (that is very useful when you are using Entity.get() scripts. So I can give all entities a personalized (as example) nametag which shows their own health. */


        var xq = Entity.getX(mobs[i]) - getPlayerX();

        var yq = Entity.getY(mobs[i]) - getPlayerY();

        var zq = Entity.getZ(mobs[i]) - getPlayerZ();



        if(xq * xq + yq * yq + zq * zq <= 14 * 14 && mobs[i] != getPlayerEnt()) {

            /* the 14 stands for, that the entities you want to give (as example) a nametag need to be in a radius of 14 blocks */

            /* You can disable it by removing the above script. */
            if(Entity.getEntityTypeId(mobs[i]) == 10) {
                Entity.setNameTag(mobs[i], nameColor + "Chicken " + healthColor + Entity.getHealth(mobs[i]) + "/4");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 11) {
                Entity.setNameTag(mobs[i], nameColor + "Cow " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 12) {
                Entity.setNameTag(mobs[i], nameColor + "Pig " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 13) {
                Entity.setNameTag(mobs[i], nameColor + "Sheep " + healthColor + Entity.getHealth(mobs[i]) + "/8");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 14) {
                Entity.setNameTag(mobs[i], nameColor + "Wolf " + healthColor + Entity.getHealth(mobs[i]) + "/8");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 15) {
                Entity.setNameTag(mobs[i], nameColor + "Villager " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 16) {
                Entity.setNameTag(mobs[i], nameColor + "Mooshroom " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 17) {
                Entity.setNameTag(mobs[i], nameColor + "Squid " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
			if(Entity.getEntityTypeId(mobs[i]) == 18) {
                Entity.setNameTag(mobs[i], nameColor + "Rabbit " + healthColor + Entity.getHealth(mobs[i]) + "/3");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 19) {
                Entity.setNameTag(mobs[i], nameColor + "Bat " + healthColor + Entity.getHealth(mobs[i]) + "/6");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 20) {
                Entity.setNameTag(mobs[i], nameColor + "Iron Golem " + healthColor + Entity.getHealth(mobs[i]) + "/100");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 21) {
                Entity.setNameTag(mobs[i], nameColor + "Snow Golem " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 22) {
                Entity.setNameTag(mobs[i], nameColor + "Ocelot " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 32) {
                Entity.setNameTag(mobs[i], nameColor + "Zombie " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 33) {
                Entity.setNameTag(mobs[i], nameColor + "Creeper " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 34) {
                Entity.setNameTag(mobs[i], nameColor + "Skeleton " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 35) {
                Entity.setNameTag(mobs[i], nameColor + "Spider " + healthColor + Entity.getHealth(mobs[i]) + "/16");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 36) {
                Entity.setNameTag(mobs[i], nameColor + "Zombie Pigman " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 37) {
                Entity.setNameTag(mobs[i], nameColor + "Slime " + healthColor + Entity.getHealth(mobs[i]) + "/16");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 38) {
                Entity.setNameTag(mobs[i], nameColor + "Enderman " + healthColor + Entity.getHealth(mobs[i]) + "/40");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 39) {
                Entity.setNameTag(mobs[i], nameColor + "Silverfish " + healthColor + Entity.getHealth(mobs[i]) + "/8");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 40) {
                Entity.setNameTag(mobs[i], nameColor + "Cave Spider " + healthColor + Entity.getHealth(mobs[i]) + "/12");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 41) {
                Entity.setNameTag(mobs[i], nameColor + "Ghast " + healthColor + Entity.getHealth(mobs[i]) + "/10");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 42) {
                Entity.setNameTag(mobs[i], nameColor + "Magma Cube " + healthColor + Entity.getHealth(mobs[i]) + "/16");
            }
            if(Entity.getEntityTypeId(mobs[i]) == 43) {
                Entity.setNameTag(mobs[i], nameColor + "Blaze " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
			if(Entity.getEntityTypeId(mobs[i]) == 44) {
                Entity.setNameTag(mobs[i], nameColor + "Zombie Villager " + healthColor + Entity.getHealth(mobs[i]) + "/20");
            }
			if(Entity.getEntityTypeId(mobs[i]) == 45) {
                Entity.setNameTag(mobs[i], nameColor + "Witch " + healthColor + Entity.getHealth(mobs[i]) + "/26");
            }
        }
    }
}

VertexClientPE.xRay = function(onOrOff) {
    switch(onOrOff) {
	    case 0: {
	        OpaqLayer = 0;
	
	        Block.setLightLevel(54, 0);
	        Block.setLightLevel(86, 15);
	        Block.setLightLevel(89, 15);
	
	        Block.setRenderLayer(1, OpaqLayer);
	        Block.setRenderLayer(2, OpaqLayer);
	        Block.setRenderLayer(3, OpaqLayer);
	        Block.setRenderLayer(4, OpaqLayer);
	        Block.setRenderLayer(5, OpaqLayer);
	        Block.setRenderLayer(6, OpaqLayer);
	        Block.setRenderLayer(7, OpaqLayer);
	        Block.setRenderLayer(8, OpaqLayer);
	        Block.setRenderLayer(9, OpaqLayer);
	        Block.setRenderLayer(10, OpaqLayer);
	        Block.setRenderLayer(11, OpaqLayer);
	        Block.setRenderLayer(12, OpaqLayer);
	        Block.setRenderLayer(13, OpaqLayer);
	        Block.setRenderLayer(14, OpaqLayer);
	        Block.setRenderLayer(15, OpaqLayer);
	        Block.setRenderLayer(17, OpaqLayer);
	        Block.setRenderLayer(18, OpaqLayer);
	        Block.setRenderLayer(19, OpaqLayer);
	        Block.setRenderLayer(20, 1);
	        Block.setRenderLayer(21, OpaqLayer);
	        Block.setRenderLayer(22, OpaqLayer);
	        Block.setRenderLayer(23, OpaqLayer);
	        Block.setRenderLayer(24, OpaqLayer);
	        Block.setRenderLayer(25, OpaqLayer);
	        Block.setRenderLayer(26, OpaqLayer);
	        Block.setRenderLayer(27, OpaqLayer);
	        Block.setRenderLayer(28, OpaqLayer);
	        Block.setRenderLayer(29, OpaqLayer);
	        Block.setRenderLayer(30, OpaqLayer);
	        Block.setRenderLayer(31, 1);
	        Block.setRenderLayer(32, OpaqLayer);
	        Block.setRenderLayer(33, OpaqLayer);
	        Block.setRenderLayer(34, OpaqLayer);
	        Block.setRenderLayer(35, OpaqLayer);
	        Block.setRenderLayer(36, OpaqLayer);
	        Block.setRenderLayer(37, OpaqLayer);
	        Block.setRenderLayer(38, OpaqLayer);
	        Block.setRenderLayer(39, OpaqLayer);
	        Block.setRenderLayer(40, OpaqLayer);
	        Block.setRenderLayer(41, OpaqLayer);
	        Block.setRenderLayer(42, OpaqLayer);
	        Block.setRenderLayer(43, OpaqLayer);
	        Block.setRenderLayer(44, OpaqLayer);
	        Block.setRenderLayer(45, OpaqLayer);
	        Block.setRenderLayer(46, OpaqLayer);
	        Block.setRenderLayer(47, OpaqLayer);
	        Block.setRenderLayer(48, OpaqLayer);
	        Block.setRenderLayer(49, OpaqLayer);
	        Block.setRenderLayer(50, OpaqLayer);
	        Block.setRenderLayer(51, OpaqLayer);
	        Block.setRenderLayer(52, OpaqLayer);
	        Block.setRenderLayer(53, OpaqLayer);
	        Block.setRenderLayer(54, OpaqLayer);
	        Block.setRenderLayer(55, OpaqLayer);
	        Block.setRenderLayer(56, OpaqLayer);
	        Block.setRenderLayer(57, OpaqLayer);
	        Block.setRenderLayer(58, OpaqLayer);
	        Block.setRenderLayer(59, OpaqLayer);
	        Block.setRenderLayer(60, OpaqLayer);
	        Block.setRenderLayer(61, OpaqLayer);
	        Block.setRenderLayer(62, OpaqLayer);
	        Block.setRenderLayer(63, OpaqLayer);
	        Block.setRenderLayer(64, OpaqLayer);
	        Block.setRenderLayer(65, OpaqLayer);
	        Block.setRenderLayer(66, OpaqLayer);
	        Block.setRenderLayer(67, OpaqLayer);
	        Block.setRenderLayer(68, OpaqLayer);
	        Block.setRenderLayer(69, OpaqLayer);
	        Block.setRenderLayer(70, OpaqLayer);
	        Block.setRenderLayer(71, OpaqLayer);
	        Block.setRenderLayer(72, OpaqLayer);
	        Block.setRenderLayer(73, OpaqLayer);
	        Block.setRenderLayer(74, OpaqLayer);
	        Block.setRenderLayer(75, OpaqLayer);
	        Block.setRenderLayer(76, OpaqLayer);
	        Block.setRenderLayer(77, OpaqLayer);
	        Block.setRenderLayer(78, OpaqLayer);
	        Block.setRenderLayer(79, OpaqLayer);
	        Block.setRenderLayer(80, OpaqLayer);
	        Block.setRenderLayer(81, OpaqLayer);
	        Block.setRenderLayer(82, OpaqLayer);
	        Block.setRenderLayer(83, OpaqLayer);
	        Block.setRenderLayer(84, OpaqLayer);
	        Block.setRenderLayer(85, OpaqLayer);
	        Block.setRenderLayer(86, OpaqLayer);
	        Block.setRenderLayer(87, OpaqLayer);
	        Block.setRenderLayer(88, OpaqLayer);
	        Block.setRenderLayer(89, OpaqLayer);
	        Block.setRenderLayer(90, OpaqLayer);
	        Block.setRenderLayer(91, OpaqLayer);
	        Block.setRenderLayer(92, OpaqLayer);
	        Block.setRenderLayer(93, OpaqLayer);
	        Block.setRenderLayer(94, OpaqLayer);
	        Block.setRenderLayer(95, OpaqLayer);
	        Block.setRenderLayer(96, OpaqLayer);
	        Block.setRenderLayer(97, OpaqLayer);
	        Block.setRenderLayer(98, OpaqLayer);
	        Block.setRenderLayer(99, OpaqLayer);
	        Block.setRenderLayer(100, OpaqLayer);
	        Block.setRenderLayer(101, OpaqLayer);
	        Block.setRenderLayer(102, 1);
	        Block.setRenderLayer(103, OpaqLayer);
	        Block.setRenderLayer(104, OpaqLayer);
	        Block.setRenderLayer(105, OpaqLayer);
	        Block.setRenderLayer(106, 1);
	        Block.setRenderLayer(107, OpaqLayer);
	        Block.setRenderLayer(108, OpaqLayer);
	        Block.setRenderLayer(109, OpaqLayer);
	        Block.setRenderLayer(110, OpaqLayer);
	        Block.setRenderLayer(111, OpaqLayer);
	        Block.setRenderLayer(112, OpaqLayer);
	        Block.setRenderLayer(113, OpaqLayer);
	        Block.setRenderLayer(114, OpaqLayer);
	        Block.setRenderLayer(115, OpaqLayer);
	        Block.setRenderLayer(117, OpaqLayer);
	        Block.setRenderLayer(118, OpaqLayer);
	        Block.setRenderLayer(119, OpaqLayer);
	        Block.setRenderLayer(120, OpaqLayer);
	        Block.setRenderLayer(121, OpaqLayer);
	        Block.setRenderLayer(122, OpaqLayer);
	        Block.setRenderLayer(123, OpaqLayer);
	        Block.setRenderLayer(124, OpaqLayer);
	        Block.setRenderLayer(125, OpaqLayer);
	        Block.setRenderLayer(126, OpaqLayer);
	        Block.setRenderLayer(127, OpaqLayer);
	        Block.setRenderLayer(128, OpaqLayer);
	        Block.setRenderLayer(129, OpaqLayer);
	        Block.setRenderLayer(130, OpaqLayer);
	        Block.setRenderLayer(131, OpaqLayer);
	        Block.setRenderLayer(132, OpaqLayer);
	        Block.setRenderLayer(133, OpaqLayer);
	        Block.setRenderLayer(134, OpaqLayer);
	        Block.setRenderLayer(135, OpaqLayer);
	        Block.setRenderLayer(136, OpaqLayer);
	        Block.setRenderLayer(137, OpaqLayer);
	        Block.setRenderLayer(138, OpaqLayer);
	        Block.setRenderLayer(139, OpaqLayer);
	        Block.setRenderLayer(140, OpaqLayer);
	        Block.setRenderLayer(141, OpaqLayer);
	        Block.setRenderLayer(142, OpaqLayer);
	        Block.setRenderLayer(143, OpaqLayer);
	        Block.setRenderLayer(144, OpaqLayer);
	        Block.setRenderLayer(145, OpaqLayer);
	        Block.setRenderLayer(146, OpaqLayer);
	        Block.setRenderLayer(147, OpaqLayer);
	        Block.setRenderLayer(148, OpaqLayer);
	        Block.setRenderLayer(149, OpaqLayer);
	        Block.setRenderLayer(150, OpaqLayer);
	        Block.setRenderLayer(151, OpaqLayer);
	        Block.setRenderLayer(152, OpaqLayer);
	        Block.setRenderLayer(153, OpaqLayer);
	        Block.setRenderLayer(154, OpaqLayer);
	        Block.setRenderLayer(155, OpaqLayer);
	        Block.setRenderLayer(156, OpaqLayer);
	        Block.setRenderLayer(157, OpaqLayer);
	        Block.setRenderLayer(158, OpaqLayer);
	        Block.setRenderLayer(159, OpaqLayer);
	        Block.setRenderLayer(160, OpaqLayer);
	        Block.setRenderLayer(161, OpaqLayer);
	        Block.setRenderLayer(162, OpaqLayer);
	        Block.setRenderLayer(163, OpaqLayer);
	        Block.setRenderLayer(164, OpaqLayer);
	        Block.setRenderLayer(165, OpaqLayer);
	        Block.setRenderLayer(166, OpaqLayer);
	        Block.setRenderLayer(167, OpaqLayer);
	        Block.setRenderLayer(168, OpaqLayer);
	        Block.setRenderLayer(169, OpaqLayer);
	        Block.setRenderLayer(170, OpaqLayer);
	        Block.setRenderLayer(171, OpaqLayer);
	        Block.setRenderLayer(172, OpaqLayer);
	        Block.setRenderLayer(173, OpaqLayer);
	        Block.setRenderLayer(174, OpaqLayer);
	        Block.setRenderLayer(175, 1);
	        Block.setRenderLayer(176, OpaqLayer);
	        Block.setRenderLayer(177, OpaqLayer);
	        Block.setRenderLayer(178, OpaqLayer);
	        Block.setRenderLayer(179, OpaqLayer);
	        Block.setRenderLayer(180, OpaqLayer);
	        Block.setRenderLayer(181, OpaqLayer);
	        Block.setRenderLayer(182, OpaqLayer);
	        Block.setRenderLayer(183, OpaqLayer);
	        Block.setRenderLayer(184, OpaqLayer);
	        Block.setRenderLayer(185, OpaqLayer);
	        Block.setRenderLayer(186, OpaqLayer);
	        Block.setRenderLayer(187, OpaqLayer);
	        Block.setRenderLayer(188, OpaqLayer);
	        Block.setRenderLayer(189, OpaqLayer);
	        Block.setRenderLayer(190, OpaqLayer);
	        Block.setRenderLayer(191, OpaqLayer);
	        Block.setRenderLayer(192, OpaqLayer);
	        Block.setRenderLayer(193, OpaqLayer);
	        Block.setRenderLayer(194, OpaqLayer);
	        Block.setRenderLayer(195, OpaqLayer);
	        Block.setRenderLayer(196, OpaqLayer);
	        Block.setRenderLayer(197, OpaqLayer);
	        Block.setRenderLayer(198, OpaqLayer);
	        Block.setRenderLayer(199, OpaqLayer);
	        Block.setRenderLayer(200, OpaqLayer);
	        Block.setRenderLayer(201, OpaqLayer);
	        Block.setRenderLayer(202, OpaqLayer);
	        Block.setRenderLayer(203, OpaqLayer);
	        Block.setRenderLayer(204, OpaqLayer);
	        Block.setRenderLayer(205, OpaqLayer);
	        Block.setRenderLayer(206, OpaqLayer);
	        Block.setRenderLayer(207, OpaqLayer);
	        Block.setRenderLayer(208, OpaqLayer);
	        Block.setRenderLayer(209, OpaqLayer);
	        Block.setRenderLayer(210, OpaqLayer);
	        Block.setRenderLayer(211, OpaqLayer);
	        Block.setRenderLayer(212, OpaqLayer);
	        Block.setRenderLayer(213, OpaqLayer);
	        Block.setRenderLayer(214, OpaqLayer);
	        Block.setRenderLayer(215, OpaqLayer);
	        Block.setRenderLayer(217, OpaqLayer);
	        Block.setRenderLayer(218, OpaqLayer);
	        Block.setRenderLayer(219, OpaqLayer);
	        Block.setRenderLayer(220, OpaqLayer);
	        Block.setRenderLayer(221, OpaqLayer);
	        Block.setRenderLayer(222, OpaqLayer);
	        Block.setRenderLayer(223, OpaqLayer);
	        Block.setRenderLayer(224, OpaqLayer);
	        Block.setRenderLayer(225, OpaqLayer);
	        Block.setRenderLayer(226, OpaqLayer);
	        Block.setRenderLayer(227, OpaqLayer);
	        Block.setRenderLayer(228, OpaqLayer);
	        Block.setRenderLayer(229, OpaqLayer);
	        Block.setRenderLayer(230, OpaqLayer);
	        Block.setRenderLayer(231, OpaqLayer);
	        Block.setRenderLayer(232, OpaqLayer);
	        Block.setRenderLayer(233, OpaqLayer);
	        Block.setRenderLayer(234, OpaqLayer);
	        Block.setRenderLayer(235, OpaqLayer);
	        Block.setRenderLayer(236, OpaqLayer);
	        Block.setRenderLayer(237, OpaqLayer);
	        Block.setRenderLayer(238, OpaqLayer);
	        Block.setRenderLayer(239, OpaqLayer);
	        Block.setRenderLayer(240, OpaqLayer);
	        Block.setRenderLayer(241, OpaqLayer);
	        Block.setRenderLayer(242, OpaqLayer);
	        Block.setRenderLayer(243, OpaqLayer);
	        Block.setRenderLayer(244, OpaqLayer);
	        Block.setRenderLayer(245, OpaqLayer);
	        Block.setRenderLayer(248, OpaqLayer);
	        Block.setRenderLayer(249, OpaqLayer);
	        Block.setRenderLayer(250, OpaqLayer);
	        Block.setRenderLayer(251, OpaqLayer);
	        Block.setRenderLayer(252, OpaqLayer);
	        Block.setRenderLayer(253, OpaqLayer);
	        Block.setRenderLayer(254, OpaqLayer);
	        Block.setRenderLayer(255, OpaqLayer);
	        break;
		} case 1: {
	        var RenderLayer = 1;
	        ///////// CHESTS ARE NOW GLOWING OR HAVE THE SAME BRIGHTNESS AS TORCHES, ITS GOOD TO TROLL YOUR FRIENDS, GLOWSTONE AND ANSMALL BLOCK HAS NOW NO BRIGHTNESS, THE PLAYER CAN SEE NOW BETTER THROUGH BLOCKS
	        Block.setLightLevel(54, 15);
	        Block.setLightLevel(86, 0);
	        Block.setLightLevel(89, 0);
	
	        Block.setRenderLayer(1, RenderLayer);
	        Block.setRenderLayer(2, RenderLayer);
	        Block.setRenderLayer(3, RenderLayer);
	        Block.setRenderLayer(4, RenderLayer);
	        Block.setRenderLayer(5, RenderLayer);
	        Block.setRenderLayer(6, RenderLayer);
	        Block.setRenderLayer(7, RenderLayer);
	        Block.setRenderLayer(8, RenderLayer);
	        Block.setRenderLayer(9, RenderLayer);
	        Block.setRenderLayer(10, RenderLayer);
	        Block.setRenderLayer(11, RenderLayer);
	        Block.setRenderLayer(12, RenderLayer);
	        Block.setRenderLayer(13, RenderLayer);
	        Block.setRenderLayer(14, RenderLayer);
	        Block.setRenderLayer(15, RenderLayer);
	        Block.setRenderLayer(16, RenderLayer);
	        Block.setRenderLayer(17, RenderLayer);
	        Block.setRenderLayer(18, RenderLayer);
	        Block.setRenderLayer(19, RenderLayer);
	        Block.setRenderLayer(20, RenderLayer);
	        Block.setRenderLayer(21, RenderLayer);
	        Block.setRenderLayer(22, RenderLayer);
	        Block.setRenderLayer(23, RenderLayer);
	        Block.setRenderLayer(24, RenderLayer);
	        Block.setRenderLayer(25, RenderLayer);
	        Block.setRenderLayer(26, RenderLayer);
	        Block.setRenderLayer(27, RenderLayer);
	        Block.setRenderLayer(28, RenderLayer);
	        Block.setRenderLayer(29, RenderLayer);
	        Block.setRenderLayer(30, RenderLayer);
	        Block.setRenderLayer(31, RenderLayer);
	        Block.setRenderLayer(32, RenderLayer);
	        Block.setRenderLayer(33, RenderLayer);
	        Block.setRenderLayer(34, RenderLayer);
	        Block.setRenderLayer(35, RenderLayer);
	        Block.setRenderLayer(36, RenderLayer);
	        Block.setRenderLayer(37, RenderLayer);
	        Block.setRenderLayer(38, RenderLayer);
	        Block.setRenderLayer(39, RenderLayer);
	        Block.setRenderLayer(40, RenderLayer);
	        Block.setRenderLayer(41, RenderLayer);
	        Block.setRenderLayer(42, RenderLayer);
	        Block.setRenderLayer(43, RenderLayer);
	        Block.setRenderLayer(44, RenderLayer);
	        Block.setRenderLayer(45, RenderLayer);
	        Block.setRenderLayer(46, RenderLayer);
	        Block.setRenderLayer(47, RenderLayer);
	        Block.setRenderLayer(48, RenderLayer);
	        Block.setRenderLayer(49, RenderLayer);
	        Block.setRenderLayer(50, RenderLayer);
	        Block.setRenderLayer(51, RenderLayer);
	        Block.setRenderLayer(52, RenderLayer);
	        Block.setRenderLayer(53, RenderLayer);
	        Block.setRenderLayer(54, RenderLayer);
	        Block.setRenderLayer(55, RenderLayer);
	        Block.setRenderLayer(56, RenderLayer);
	        Block.setRenderLayer(57, RenderLayer);
	        Block.setRenderLayer(58, RenderLayer);
	        Block.setRenderLayer(59, RenderLayer);
	        Block.setRenderLayer(60, RenderLayer);
	        Block.setRenderLayer(61, RenderLayer);
	        Block.setRenderLayer(62, RenderLayer);
	        Block.setRenderLayer(63, RenderLayer);
	        Block.setRenderLayer(64, RenderLayer);
	        Block.setRenderLayer(65, RenderLayer);
	        Block.setRenderLayer(66, RenderLayer);
	        Block.setRenderLayer(67, RenderLayer);
	        Block.setRenderLayer(68, RenderLayer);
	        Block.setRenderLayer(69, RenderLayer);
	        Block.setRenderLayer(70, RenderLayer);
	        Block.setRenderLayer(71, RenderLayer);
	        Block.setRenderLayer(72, RenderLayer);
	        Block.setRenderLayer(73, RenderLayer);
	        Block.setRenderLayer(74, RenderLayer);
	        Block.setRenderLayer(75, RenderLayer);
	        Block.setRenderLayer(76, RenderLayer);
	        Block.setRenderLayer(77, RenderLayer);
	        Block.setRenderLayer(78, RenderLayer);
	        Block.setRenderLayer(79, RenderLayer);
	        Block.setRenderLayer(80, RenderLayer);
	        Block.setRenderLayer(81, RenderLayer);
	        Block.setRenderLayer(82, RenderLayer);
	        Block.setRenderLayer(83, RenderLayer);
	        Block.setRenderLayer(84, RenderLayer);
	        Block.setRenderLayer(85, RenderLayer);
	        Block.setRenderLayer(86, RenderLayer);
	        Block.setRenderLayer(87, RenderLayer);
	        Block.setRenderLayer(88, RenderLayer);
	        Block.setRenderLayer(89, RenderLayer);
	        Block.setRenderLayer(90, RenderLayer);
	        Block.setRenderLayer(91, RenderLayer);
	        Block.setRenderLayer(92, RenderLayer);
	        Block.setRenderLayer(93, RenderLayer);
	        Block.setRenderLayer(94, RenderLayer);
	        Block.setRenderLayer(95, RenderLayer);
	        Block.setRenderLayer(96, RenderLayer);
	        Block.setRenderLayer(97, RenderLayer);
	        Block.setRenderLayer(98, RenderLayer);
	        Block.setRenderLayer(99, RenderLayer);
	        Block.setRenderLayer(100, RenderLayer);
	        Block.setRenderLayer(101, RenderLayer);
	        Block.setRenderLayer(102, RenderLayer);
	        Block.setRenderLayer(103, RenderLayer);
	        Block.setRenderLayer(104, RenderLayer);
	        Block.setRenderLayer(105, RenderLayer);
	        Block.setRenderLayer(106, RenderLayer);
	        Block.setRenderLayer(107, RenderLayer);
	        Block.setRenderLayer(108, RenderLayer);
	        Block.setRenderLayer(109, RenderLayer);
	        Block.setRenderLayer(110, RenderLayer);
	        Block.setRenderLayer(111, RenderLayer);
	        Block.setRenderLayer(112, RenderLayer);
	        Block.setRenderLayer(113, RenderLayer);
	        Block.setRenderLayer(114, RenderLayer);
	        Block.setRenderLayer(115, RenderLayer);
	        Block.setRenderLayer(117, RenderLayer);
	        Block.setRenderLayer(118, RenderLayer);
	        Block.setRenderLayer(119, RenderLayer);
	        Block.setRenderLayer(120, RenderLayer);
	        Block.setRenderLayer(121, RenderLayer);
	        Block.setRenderLayer(122, RenderLayer);
	        Block.setRenderLayer(123, RenderLayer);
	        Block.setRenderLayer(124, RenderLayer);
	        Block.setRenderLayer(125, RenderLayer);
	        Block.setRenderLayer(126, RenderLayer);
	        Block.setRenderLayer(127, RenderLayer);
	        Block.setRenderLayer(128, RenderLayer);
	        Block.setRenderLayer(129, RenderLayer);
	        Block.setRenderLayer(130, RenderLayer);
	        Block.setRenderLayer(131, RenderLayer);
	        Block.setRenderLayer(132, RenderLayer);
	        Block.setRenderLayer(133, RenderLayer);
	        Block.setRenderLayer(134, RenderLayer);
	        Block.setRenderLayer(135, RenderLayer);
	        Block.setRenderLayer(136, RenderLayer);
	        Block.setRenderLayer(137, RenderLayer);
	        Block.setRenderLayer(138, RenderLayer);
	        Block.setRenderLayer(139, RenderLayer);
	        Block.setRenderLayer(140, RenderLayer);
	        Block.setRenderLayer(141, RenderLayer);
	        Block.setRenderLayer(142, RenderLayer);
	        Block.setRenderLayer(143, RenderLayer);
	        Block.setRenderLayer(144, RenderLayer);
	        Block.setRenderLayer(145, RenderLayer);
	        Block.setRenderLayer(146, RenderLayer);
	        Block.setRenderLayer(147, RenderLayer);
	        Block.setRenderLayer(148, RenderLayer);
	        Block.setRenderLayer(149, RenderLayer);
	        Block.setRenderLayer(150, RenderLayer);
	        Block.setRenderLayer(151, RenderLayer);
	        Block.setRenderLayer(152, RenderLayer);
	        Block.setRenderLayer(153, RenderLayer);
	        Block.setRenderLayer(154, RenderLayer);
	        Block.setRenderLayer(155, RenderLayer);
	        Block.setRenderLayer(156, RenderLayer);
	        Block.setRenderLayer(157, RenderLayer);
	        Block.setRenderLayer(158, RenderLayer);
	        Block.setRenderLayer(159, RenderLayer);
	        Block.setRenderLayer(160, RenderLayer);
	        Block.setRenderLayer(161, RenderLayer);
	        Block.setRenderLayer(162, RenderLayer);
	        Block.setRenderLayer(163, RenderLayer);
	        Block.setRenderLayer(164, RenderLayer);
	        Block.setRenderLayer(165, RenderLayer);
	        Block.setRenderLayer(166, RenderLayer);
	        Block.setRenderLayer(167, RenderLayer);
	        Block.setRenderLayer(168, RenderLayer);
	        Block.setRenderLayer(169, RenderLayer);
	        Block.setRenderLayer(170, RenderLayer);
	        Block.setRenderLayer(171, RenderLayer);
	        Block.setRenderLayer(172, RenderLayer);
	        Block.setRenderLayer(173, RenderLayer);
	        Block.setRenderLayer(174, RenderLayer);
	        Block.setRenderLayer(175, RenderLayer);
	        Block.setRenderLayer(176, RenderLayer);
	        Block.setRenderLayer(177, RenderLayer);
	        Block.setRenderLayer(178, RenderLayer);
	        Block.setRenderLayer(179, RenderLayer);
	        Block.setRenderLayer(180, RenderLayer);
	        Block.setRenderLayer(181, RenderLayer);
	        Block.setRenderLayer(182, RenderLayer);
	        Block.setRenderLayer(183, RenderLayer);
	        Block.setRenderLayer(184, RenderLayer);
	        Block.setRenderLayer(185, RenderLayer);
	        Block.setRenderLayer(186, RenderLayer);
	        Block.setRenderLayer(187, RenderLayer);
	        Block.setRenderLayer(188, RenderLayer);
	        Block.setRenderLayer(189, RenderLayer);
	        Block.setRenderLayer(190, RenderLayer);
	        Block.setRenderLayer(191, RenderLayer);
	        Block.setRenderLayer(192, RenderLayer);
	        Block.setRenderLayer(193, RenderLayer);
	        Block.setRenderLayer(194, RenderLayer);
	        Block.setRenderLayer(195, RenderLayer);
	        Block.setRenderLayer(196, RenderLayer);
	        Block.setRenderLayer(197, RenderLayer);
	        Block.setRenderLayer(198, RenderLayer);
	        Block.setRenderLayer(199, RenderLayer);
	        Block.setRenderLayer(200, RenderLayer);
	        Block.setRenderLayer(201, RenderLayer);
	        Block.setRenderLayer(202, RenderLayer);
	        Block.setRenderLayer(203, RenderLayer);
	        Block.setRenderLayer(204, RenderLayer);
	        Block.setRenderLayer(205, RenderLayer);
	        Block.setRenderLayer(206, RenderLayer);
	        Block.setRenderLayer(207, RenderLayer);
	        Block.setRenderLayer(208, RenderLayer);
	        Block.setRenderLayer(209, RenderLayer);
	        Block.setRenderLayer(210, RenderLayer);
	        Block.setRenderLayer(211, RenderLayer);
	        Block.setRenderLayer(212, RenderLayer);
	        Block.setRenderLayer(213, RenderLayer);
	        Block.setRenderLayer(214, RenderLayer);
	        Block.setRenderLayer(215, RenderLayer);
	        Block.setRenderLayer(217, RenderLayer);
	        Block.setRenderLayer(218, RenderLayer);
	        Block.setRenderLayer(219, RenderLayer);
	        Block.setRenderLayer(220, RenderLayer);
	        Block.setRenderLayer(221, RenderLayer);
	        Block.setRenderLayer(222, RenderLayer);
	        Block.setRenderLayer(223, RenderLayer);
	        Block.setRenderLayer(224, RenderLayer);
	        Block.setRenderLayer(225, RenderLayer);
	        Block.setRenderLayer(226, RenderLayer);
	        Block.setRenderLayer(227, RenderLayer);
	        Block.setRenderLayer(228, RenderLayer);
	        Block.setRenderLayer(229, RenderLayer);
	        Block.setRenderLayer(230, RenderLayer);
	        Block.setRenderLayer(231, RenderLayer);
	        Block.setRenderLayer(232, RenderLayer);
	        Block.setRenderLayer(233, RenderLayer);
	        Block.setRenderLayer(234, RenderLayer);
	        Block.setRenderLayer(235, RenderLayer);
	        Block.setRenderLayer(236, RenderLayer);
	        Block.setRenderLayer(237, RenderLayer);
	        Block.setRenderLayer(238, RenderLayer);
	        Block.setRenderLayer(239, RenderLayer);
	        Block.setRenderLayer(240, RenderLayer);
	        Block.setRenderLayer(241, RenderLayer);
	        Block.setRenderLayer(242, RenderLayer);
	        Block.setRenderLayer(243, RenderLayer);
	        Block.setRenderLayer(244, RenderLayer);
	        Block.setRenderLayer(245, RenderLayer);
	        Block.setRenderLayer(246, RenderLayer);
	        Block.setRenderLayer(247, RenderLayer);
	        Block.setRenderLayer(248, RenderLayer);
	        Block.setRenderLayer(249, RenderLayer);
	        Block.setRenderLayer(250, RenderLayer);
	        Block.setRenderLayer(251, RenderLayer);
	        Block.setRenderLayer(252, RenderLayer);
	        Block.setRenderLayer(253, RenderLayer);
	        Block.setRenderLayer(254, RenderLayer);
	        Block.setRenderLayer(255, RenderLayer);
			break;
        }
    }
    var originalTile = getTile(Player.getX(), Player.getY(), Player.getZ());
	var originalTileData = Level.getData(Player.getX(), Player.getY(), Player.getZ());
    setTile(Player.getX(), Player.getY(), Player.getZ(), 1, 0);
    setTile(Player.getX(), Player.getY(), Player.getZ(), 2, 0);
    setTile(Player.getX(), Player.getY(), Player.getZ(), originalTile, originalTileData);
}

VertexClientPE.nuker = function(x, y, z, range, mode) {
	mode = (mode==null)?"cube":mode;
	range = (range==null)?3:range;
	if(mode == "cube") {
		for(var blockX = - range; blockX <= range; blockX++) {
			for(var blockY = - range; blockY <= range; blockY++) {
				for(var blockZ = - range; blockZ <= range; blockZ++) {
					setTile(x + blockX, y + blockY, z + blockZ, 0);
				}
			}
		}
	}if(mode == "flat") {
		for(var blockX = - range; blockX <= range; blockX++) {
			for(var blockY = - 1; blockY <= range; blockY++) {
				for(var blockZ = - range; blockZ <= range; blockZ++) {
					setTile(x + blockX, y + blockY, z + blockZ, 0);
				}
			}
		}
	}if(mode == "smash") {
		for(var blockX = - range; blockX <= range; blockX++) {
			for(var blockY = - range; blockY <= range; blockY++) {
				for(var blockZ = - range; blockZ <= range; blockZ++) {
					if(Block.getDestroyTime(getTile(x + blockX, y + blockY, z + blockZ)) == 0) {
						setTile(x + blockX, y + blockY, z + blockZ, 0);
					}
				}
			}
		}
	}
}

VertexClientPE.tapExplosion = function(x, y, z) {
	Level.explode(x, y, z, 4);
}

VertexClientPE.dronePlus = function() {
	var mobs = Entity.getAll();
	
	for(var i = 0; i < mobs.length; i++) {

		var x = Entity.getX(mobs[i]) - getPlayerX();

		var y = Entity.getY(mobs[i]) - getPlayerY();

		var z = Entity.getZ(mobs[i]) - getPlayerZ();

		mobYaw = getYaw(mobs[i])

		if(Entity.getEntityTypeId(mobs[i]) == 63) {
			zahl = 0;
		}

		if(Entity.getEntityTypeId(mobs[i]) != 63) {
			zahl = 2;
		}

		if(x * x + y * y + z * z <= 4.5 * 4.5 && mobs[i] != getPlayerEnt())

		{

			if(randomAki == 1) {
				Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]) - 2.75, Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]));

				Entity.setRot(Player.getEntity(), 270, getPitch(Player.getEntity()));
			}


			if(randomAki == 2) {
				Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]) + 2.75, Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]));

				Entity.setRot(Player.getEntity(), 90, getPitch(Player.getEntity()));

			}


			if(randomAki == 3) {
				Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]), Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]) + 2.75);

				Entity.setRot(Player.getEntity(), 180, getPitch(Player.getEntity()));
			}

			if(randomAki == 4) {

				Entity.setPosition(Player.getEntity(), Entity.getX(mobs[i]), Entity.getY(mobs[i]) + zahl, Entity.getZ(mobs[i]) - 2.75);

				Entity.setRot(Player.getEntity(), 0, getPitch(Player.getEntity()));
			}
		}
	}
}

VertexClientPE.regen = function() {
	if(Entity.getHealth(getPlayerEnt()) < 20) {
		Player.setHealth(20);
	}
}

VertexClientPE.godMode = function() {
	Entity.setMaxHealth(getPlayerEnt(), 10000);
	Player.setHealth(10000);
}

VertexClientPE.autoPlace = function() {
	var x = Player.getPointedBlockX();
	var y = Player.getPointedBlockY();
	var z = Player.getPointedBlockZ();
	var side = Player.getPointedBlockSide();
	var blockId = Player.getCarriedItem();
	var blockData = Player.getCarriedItemData();
	if(blockId < 257) {
		setTile(x-(side==4?1:0)+(side==5?1:0)+0.5,y-(side==0?1:0)+(side==1?1:0)+0.5,z-(side==2?1:0)+(side==3?1:0)+0.5, blockId, blockData);
	}
}

var autoLeaveStage = 0;

VertexClientPE.autoLeave = function() {
	if(Entity.getHealth(getPlayerEnt()) <= 8 && autoLeaveStage == 0) {
		autoLeaveStage = 1;
		ModPE.leaveGame();
	}
}

VertexClientPE.flight = function(onOrOff) {
	switch(onOrOff) {
		case 0:
			Player.setFlying(0);
			if(Level.getGameMode() == 0) {
				Player.setCanFly(0);
			}
			break;
		case 1:
			Player.setCanFly(1);
			Player.setFlying(1);
			break;
	}
}

VertexClientPE.glide = function() {
	if(Entity.getVelY(getPlayerEnt()) <= 0 && Player.isFlying() == false) {
		setVelY(Player.getEntity(), - 0.07);
	}
}

VertexClientPE.autoMine = function() {
	Level.destroyBlock(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ());
}

VertexClientPE.instaKill = function(a, v) {
	if(getPlayerEnt() == a) {
		Entity.setHealth(v, 1);
	}
}

var fancyChatMsg;
var fancyChatEndChar;

VertexClientPE.fancyChat = function(str) {
	fancyChatMsg = new java.lang.String(str);
	switch(fancyChatMode) {
		case "normal":
			fancyChatEndChar = 0xFEE0;
			break;
		default:
			fancyChatEndChar = null;
			break;
	}
	var newMsg = "";
	for(i in fancyChatMsg.toCharArray()) {
		var chr = fancyChatMsg.toCharArray()[i];
		if(chr >= 0x21 && chr <= 0x80) {
			newMsg += new java.lang.String(java.lang.Character.toChars(chr + fancyChatEndChar));
		} else {
			newMsg += chr;
		}
	}
	Server.sendChat(newMsg);
}

var killAuraStage = 0;

VertexClientPE.killAura = function() {
	var mobs = Entity.getAll();
	for(var i = 0; i < mobs.length; i++) {
		var x = Entity.getX(mobs[i]) - getPlayerX();
		var y = Entity.getY(mobs[i]) - getPlayerY();
		var z = Entity.getZ(mobs[i]) - getPlayerZ();
		if(x*x+y*y+z*z<=killAuraRange*killAuraRange && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION && Entity.getHealth(mobs[i]) != 0) {
			//setRot(getPlayerEnt(), (Math.atan2(z, x) - 90) * Math.pi / 180, getPitch());
			switch(Entity.getEntityTypeId(mobs[i])) {
				case EntityType.COW:
					Level.playSoundEnt(mobs[i], "mob.cowhurt");
					break;
				case EntityType.CHICKEN:
					Level.playSoundEnt(mobs[i], "mob.chickenhurt");
					break;
				case EntityType.ZOMBIE:
					Level.playSoundEnt(mobs[i], "mob.zombiehurt");
					break;
				case EntityType.SKELETON:
					Level.playSoundEnt(mobs[i], "mob.skeletonhurt");
					break;
				case EntityType.PIG_ZOMBIE:
					Level.playSoundEnt(mobs[i], "mob.zombiepig.zpighurt");
					break;
				default:
					Level.playSoundEnt(mobs[i], "random.hurt");
					break;
			}
			Entity.setHealth(mobs[i], 0);
			break;
		}
	}
	killAuraStage = 0;
}

VertexClientPE.freezeAura = function() {
	var mobs = Entity.getAll();
	for(var i = 0; i < mobs.length; i++) {
		var x = Entity.getX(mobs[i]) - getPlayerX();
		var y = Entity.getY(mobs[i]) - getPlayerY();
		var z = Entity.getZ(mobs[i]) - getPlayerZ();
		if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {
			//setRot(getPlayerEnt(), (Math.atan2(z, x) - 90) * Math.pi / 180, getPitch());
			Entity.setImmobile(mobs[i], true);
		}
	}
}

var followStage = 0;

VertexClientPE.follow = function() {
	var mobs = Entity.getAll();
	for(var i = 0; i < mobs.length; i++) {
		var x = Entity.getX(mobs[i]) - getPlayerX();
		var y = Entity.getY(mobs[i]) - getPlayerY();
		var z = Entity.getZ(mobs[i]) - getPlayerZ();
		if(x*x+y*y+z*z<=10*10 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {
			if(Entity.getX(mobs[i]) > getPlayerX() && Entity.getZ(mobs[i]) > getPlayerZ()) {
				setRot(getPlayerEnt(), 90, getPitch());
			}
			if(x*x+y*y+z*z>=2*2) {
				setVelX(getPlayerEnt(), x);
				setVelZ(getPlayerEnt(), z);
				setVelY(getPlayerEnt(), y);
			}
			followStage = 0;
			break;
		}
	}
}

var tpAuraStage = 0;

VertexClientPE.tpAura = function() {
	
}

VertexClientPE.autoSword = function(a, v) {
	if(a == getPlayerEnt()) {
		for(var i = 0; i <= 36; i++) {
			var gCI = Player.getCarriedItem();
			var gCID = Player.getCarriedItemData();
			var gCIA = Player.getCarriedItemCount();
			if(Player.getInventorySlot(i) == 268) {
				Player.setInventorySlot(i, gCI, gCIA, gCID);
				Entity.setCarriedItem(getPlayerEnt(), 268, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
				break;
			}
		}
		for(var i = 0; i <= 36; i++) {
			var gCI = Player.getCarriedItem();
			var gCID = Player.getCarriedItemData();
			var gCIA = Player.getCarriedItemCount();
			if(Player.getInventorySlot(i) == 283) {
				Player.setInventorySlot(i, gCI, gCIA, gCID);
				Entity.setCarriedItem(getPlayerEnt(), 283, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
				break;
			}
		}
		for(var i = 0; i <= 36; i++) {
			var gCI = Player.getCarriedItem();
			var gCID = Player.getCarriedItemData();
			var gCIA = Player.getCarriedItemCount();
			if(Player.getInventorySlot(i) == 272) {
				Player.setInventorySlot(i, gCI, gCIA, gCID);
				Entity.setCarriedItem(getPlayerEnt(), 272, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
				break;
			}
		}
		for(var i = 0; i <= 36; i++) {
			var gCI = Player.getCarriedItem();
			var gCID = Player.getCarriedItemData();
			var gCIA = Player.getCarriedItemCount();
			if(Player.getInventorySlot(i) == 267) {
				Player.setInventorySlot(i, gCI, gCIA, gCID);
				Entity.setCarriedItem(getPlayerEnt(), 267, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
				break;
			}
		}
		for(var i = 0; i <= 36; i++) {
			var gCI = Player.getCarriedItem();
			var gCID = Player.getCarriedItemData();
			var gCIA = Player.getCarriedItemCount();
			if(Player.getInventorySlot(i) == 276) {
				Player.setInventorySlot(i, gCI, gCIA, gCID);
				Entity.setCarriedItem(getPlayerEnt(), 276, Player.getInventorySlotCount(i), Player.getInventorySlotData(i));
				break;
			}
		}
	}
}

VertexClientPE.criticals = function() {
	/*Entity.setVelY(Player.getEntity(), -0.54);
	Entity.setVelY(Player.getEntity(), 0.54);*/
	//Entity.setPositionRelative(getPlayerEnt(), 0, 1.2, 0);
	Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() + 1.3, getPlayerZ());
}

VertexClientPE.ride = function(entity) {
	rideAnimal(getPlayerEnt(), entity);
}

VertexClientPE.onlyDay = function() {
	Level.setTime(1000);
}


VertexClientPE.autoSpammer = function() {
	if(fancyChatState) {
		VertexClientPE.fancyChat(spamMessage);
	} else {
		Server.sendChat(spamMessage);
	}
	if(yesCheatPlusState) {
		Server.sendChat(" ");
	}
}

VertexClientPE.delaySpammer = function() {
	var delaySpamMsg = Math.random().toString(36).replace(/[^a-z]+/g, '');
	var username = Player.getName(getPlayerEnt());
	Entity.setNameTag(getPlayerEnt(), "");
	if(fancyChatState) {
		VertexClientPE.fancyChat(delaySpamMsg);
	} else {
		Server.sendChat(delaySpamMsg);
	}
	Entity.setNameTag(getPlayerEnt(), username);
}

VertexClientPE.coordsDisplay = function() {
	var x = parseInt(getPlayerX());
	var y = parseInt(getPlayerY());
	var z = parseInt(getPlayerZ());
	ModPE.showTipMessage("\n\n\n" + "X: " + parseInt(x) + " Y: " + parseInt(y) + " Z: " + parseInt(z));
}

var ent;

VertexClientPE.bowAimbot = function(e) {
	var mobs = Entity.getAll();
	for(var i=0; i<mobs.length; i++) {
		ent = mobs[i];
		x = Entity.getX(ent) - Entity.getX(getPlayerEnt());
		z = Entity.getZ(ent) - Entity.getZ(getPlayerEnt());
		if(Entity.getEntityTypeId(ent) != EntityType.ITEM && Entity.getEntityTypeId(ent) != EntityType.ARROW && ent != getPlayerEnt()) {
			setVelX(e, x / 4.5);
			setVelY(e, 0);
			setVelZ(e, z / 4.5);
		}
	}
}

VertexClientPE.autoWalk = function() { //some parts of this function are made by @zhuowei
	toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
    var player = getPlayerEnt();
    setVelX(player, playerWalkSpeed * playerDir[0]);
    setVelZ(player, playerWalkSpeed * playerDir[2]);
}

VertexClientPE.boatFly = function() { //some parts of this function are made by @zhuowei
	if(Entity.getRiding(getPlayerEnt()) != null/* && Entity.getEntityTypeId(Entity.getRiding(getPlayerEnt())) == EntityType.BOAT*/) {
		toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
		/*var ent = Entity.getRiding(getPlayerEnt());
		setVelX(ent, playerWalkSpeed * playerDir[0]);
		setVelY(ent, playerWalkSpeed * playerDir[1]);
		setVelZ(ent, playerWalkSpeed * playerDir[2]);
		var ent = Entity.getRider(getPlayerEnt());
		setVelX(ent, playerWalkSpeed * playerDir[0]);
		setVelY(ent, playerWalkSpeed * playerDir[1]);
		setVelZ(ent, playerWalkSpeed * playerDir[2]);*/
		var ent = getPlayerEnt();
		setVelX(ent, playerWalkSpeed * playerDir[0]);
		setVelY(ent, playerWalkSpeed * playerDir[1]);
		setVelZ(ent, playerWalkSpeed * playerDir[2]);
	}
}

var freecamEntity;

VertexClientPE.freecam = function(onOrOff) {
	switch(onOrOff) {
		case 0: {
			ModPE.setCamera(Player.getEntity());
			if(freecamEntity != null) {
				Entity.remove(freecamEntity);
			}
			freecamEntity = null;
			break;
		} case 1: {
			freecamEntity = Level.spawnMob(getPlayerX(), getPlayerY(), getPlayerZ(), EntityType.VILLAGER);
			ModPE.setCamera(freecamEntity);
			//Entity.setRenderType(freecamEntity, EntityRenderType.player2);
			break;
		}
	}
}

VertexClientPE.fastWalk = function() {
		if(f == 1) {
            Xpos = getPlayerX();
            Zpos = getPlayerZ();
            f = f + 1;
        } else if(f == 3) {
            f = 1;
            Xdiff = getPlayerX() - Xpos;
            Zdiff = getPlayerZ() - Zpos;
            setVelX(getPlayerEnt(), Xdiff);
            setVelZ(getPlayerEnt(), Zdiff);
            Xdiff = 0;
            Zdiff = 0;
        }
        if(f != 1) {
            f = f + 1;
        }
}

VertexClientPE.teleporter = function(x, y, z) {
	setPosition(getPlayerEnt(), x, y, z);
	while(getTile(getPlayerX(), getPlayerY()-2, getPlayerZ()) != 0) {
		Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY()+1, getPlayerZ());
	}
}

VertexClientPE.fireAura = function() {
  
  var mobs = Entity.getAll();
	for(var i = 0; i < mobs.length; i++) {
		var x = Entity.getX(mobs[i]) - getPlayerX();
		var y = Entity.getY(mobs[i]) - getPlayerY();
		var z = Entity.getZ(mobs[i]) - getPlayerZ();
		if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {
			if(Entity.getX(mobs[i]) > getPlayerX() && Entity.getZ(mobs[i]) > getPlayerZ()) {
				setRot(90, getPitch());
			}
			Entity.setFireTicks(mobs[i], 100);
		}
	}
  
}

var settingsPath = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe/";

VertexClientPE.saveAutoSpammerMessage = function() {
    java.io.File(settingsPath).mkdirs();
    var newFile = new java.io.File(settingsPath, "vertexclientpe_spammessage.txt");
    newFile.createNewFile();
    var outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
    outWrite.append(spamMessage.toString());

    outWrite.close();
}

VertexClientPE.loadAutoSpammerSettings = function() {
    if(!java.io.File(settingsPath + "vertexclientpe_spammessage.txt").exists())
        return;
    var file = new java.io.File(settingsPath + "vertexclientpe_spammessage.txt");
    var fos = new java.io.FileInputStream(file);
    var str = new java.lang.StringBuilder();
    var ch;
    while((ch = fos.read()) != -1)
        str.append(java.lang.Character(ch));
	if(str != null && str != undefined) {
		spamMessage = str.toString();
	}
    fos.close();
	return true;
}

VertexClientPE.saveCategorySettings = function() {
    java.io.File(settingsPath).mkdirs();
    var newFile = new java.io.File(settingsPath, "vertexclientpe_categories.txt");
    newFile.createNewFile();
    var outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
    outWrite.append(combatName.toString());
    outWrite.append("," + buildingName.toString());
    outWrite.append("," + movementName.toString());
    outWrite.append("," + chatName.toString());
    outWrite.append("," + miscName.toString());

    outWrite.close();
}

VertexClientPE.loadCategorySettings = function() {
    if(!java.io.File(settingsPath + "vertexclientpe_categories.txt").exists())
        return;
    var file = new java.io.File(settingsPath + "vertexclientpe_categories.txt");
    var fos = new java.io.FileInputStream(file);
    var str = new java.lang.StringBuilder();
    var ch;
    while((ch = fos.read()) != -1)
        str.append(java.lang.Character(ch));
	if(str != null && str != undefined) {
		var _0xbbeb=["\x69\x73\x50\x72\x6F","\x74\x72\x75\x65","\x2C","\x73\x70\x6C\x69\x74"];if(VertexClientPE[_0xbbeb[0]]()==_0xbbeb[1]){combatName=str.toString()[_0xbbeb[3]](_0xbbeb[2])[0];buildingName=str.toString()[_0xbbeb[3]](_0xbbeb[2])[1];movementName=str.toString()[_0xbbeb[3]](_0xbbeb[2])[2];chatName=str.toString()[_0xbbeb[3]](_0xbbeb[2])[3];miscName=str.toString()[_0xbbeb[3]](_0xbbeb[2])[4]}
	}
    fos.close();
	return true;
}

VertexClientPE.saveAccounts = function() {
	java.io.File(settingsPath).mkdirs();
    var newFile = new java.io.File(settingsPath, "vertexclientpe_accounts.dat");
    newFile.createNewFile();
    var stream = new java.io.FileOutputStream(newFile);
	try {
		stream.write(VertexClientPE.accounts.toString().getBytes());
	} finally {
		stream.close();
	}
}

VertexClientPE.loadAccounts = function() {
	try {
		if(!java.io.File(settingsPath + "vertexclientpe_accounts.dat").exists())
			return;
		var file = new java.io.File(settingsPath + "vertexclientpe_accounts.dat");
		var readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
		var data = new java.lang.StringBuilder();
		var string;
		while((string = readed.readLine()) != null) {
			data.append(string);
			data.append("\n");
		}
		VertexClientPE.accounts = new org.json.JSONArray(data.toString());
	} catch(e) {
		//error
	}
}

VertexClientPE.saveMainSettings = function() {
    java.io.File(settingsPath).mkdirs();
    var newFile = new java.io.File(settingsPath, "vertexclientpe.txt");
    newFile.createNewFile();
    var outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
    outWrite.append(hacksListModeSetting.toString());
    outWrite.append("," + mainButtonPositionSetting.toString());
    outWrite.append("," + healthTagsSetting.toString());
    outWrite.append("," + themeSetting.toString());
    outWrite.append("," + playMusicSetting.toString());
    outWrite.append("," + showNewsSetting.toString());
    outWrite.append("," + menuAnimationsSetting.toString());
    outWrite.append("," + nukerMode.toString());
    outWrite.append("," + timerSpeed.toString());
    outWrite.append("," + themeSetup.toString());
    outWrite.append("," + nukerRange.toString());
    outWrite.append("," + killAuraRange.toString());
    outWrite.append("," + spamDelayTime.toString());
	outWrite.append("," + sizeSetting.toString());
	outWrite.append("," + tapNukerRange.toString());

    outWrite.close();
	
	VertexClientPE.saveAutoSpammerMessage();
	VertexClientPE.saveCategorySettings();
}

VertexClientPE.loadMainSettings = function() {
    if(!java.io.File(settingsPath + "vertexclientpe.txt").exists())
        return;
    var file = new java.io.File(settingsPath + "vertexclientpe.txt");
    var fos = new java.io.FileInputStream(file);
    var str = new java.lang.StringBuilder();
    var ch;
    while((ch = fos.read()) != -1)
        str.append(java.lang.Character(ch));
	if(str.toString().split(",")[0] != null && str.toString().split(",")[0] != undefined) {
		hacksListModeSetting = str.toString().split(",")[0]; //Here we split text by ","
	}
	if(str.toString().split(",")[1] != null && str.toString().split(",")[1] != undefined) {
		mainButtonPositionSetting = str.toString().split(",")[1]; //Here we split text by ","
	}
	if(str.toString().split(",")[2] != null && str.toString().split(",")[2] != undefined) {
		healthTagsSetting = str.toString().split(",")[2]; //Here we split text by ","
	}
	if(str.toString().split(",")[3] != null && str.toString().split(",")[3] != undefined) {
		themeSetting = str.toString().split(",")[3]; //Here we split text by ","
	}
	if(str.toString().split(",")[4] != null && str.toString().split(",")[4] != undefined) {
		playMusicSetting = str.toString().split(",")[4]; //Here we split text by ","
	}
	if(str.toString().split(",")[5] != null && str.toString().split(",")[5] != undefined) {
		showNewsSetting = str.toString().split(",")[5]; //Here we split text by ","
	}
	if(str.toString().split(",")[6] != null && str.toString().split(",")[6] != undefined) {
		menuAnimationsSetting = str.toString().split(",")[6]; //Here we split text by ","
	}
	if(str.toString().split(",")[7] != null && str.toString().split(",")[7] != undefined) {
		nukerMode = str.toString().split(",")[7]; //Here we split text by ","
	}
	if(str.toString().split(",")[8] != null && str.toString().split(",")[8] != undefined) {
		timerSpeed = str.toString().split(",")[8]; //Here we split text by ","
	}
	if(str.toString().split(",")[9] != null && str.toString().split(",")[9] != undefined) {
		themeSetup = str.toString().split(",")[9]; //Here we split text by ","
	}
	if(str.toString().split(",")[10] != null && str.toString().split(",")[10] != undefined) {
		nukerRange = str.toString().split(",")[10]; //Here we split text by ","
	}
	if(str.toString().split(",")[11] != null && str.toString().split(",")[11] != undefined) {
		killAuraRange = str.toString().split(",")[11]; //Here we split text by ","
	}
	if(str.toString().split(",")[12] != null && str.toString().split(",")[12] != undefined) {
		spamDelayTime = str.toString().split(",")[12]; //Here we split text by ","
	}
	if(str.toString().split(",")[13] != null && str.toString().split(",")[13] != undefined) {
		sizeSetting = str.toString().split(",")[13]; //Here we split text by ","
		if(sizeSetting == "normal") {
			customHeight = topBarHeight / 2;
		} else if(sizeSetting == "small") {
			customHeight = topBarHeight;
		}
	}
	if(str.toString().split(",")[14] != null && str.toString().split(",")[14] != undefined) {
		tapNukerRange = str.toString().split(",")[14]; //Here we split text by ","
	}
    fos.close();
	VertexClientPE.loadAutoSpammerSettings();
	VertexClientPE.loadCategorySettings();
	return true;
}

VertexClientPE.setupTheme = function() {
	VertexClientPE.loadMainSettings();
	ModPE.overrideTexture("images/gui/title.png","http://Vertex-Client.github.io/bootstrap/img/title.png");
	if(themeSetting == "green") {
		ModPE.overrideTexture("images/gui/spritesheet.png","http://i.imgur.com/BCA6vgv.png");
		ModPE.overrideTexture("images/gui/touchgui.png","http://i.imgur.com/dY3c1Jl.png");
	}
	if(themeSetting == "red") {
		ModPE.overrideTexture("images/gui/spritesheet.png","http://i.imgur.com/BxuGkEJ.png");
		ModPE.overrideTexture("images/gui/touchgui.png","http://i.imgur.com/S3qiQ01.png");
	}
	if(themeSetting == "blue") {
		ModPE.overrideTexture("images/gui/spritesheet.png","http://i.imgur.com/X5rCyoN.png");
		ModPE.overrideTexture("images/gui/touchgui.png","http://i.imgur.com/t6tGtMk.png");
	}
	if(themeSetting == "purple") {
		ModPE.overrideTexture("images/gui/spritesheet.png","http://i.imgur.com/3xsluNN.png");
		ModPE.overrideTexture("images/gui/touchgui.png","http://i.imgur.com/R9te7Bd.png");
	}
	if(themeSetting == "white") {
		ModPE.overrideTexture("images/gui/spritesheet.png","http://i.imgur.com/GlwhFt5.png");
		ModPE.overrideTexture("images/gui/touchgui.png","http://i.imgur.com/gsn6Qfp.png");
	}
	if(themeSetting == "black") {
		ModPE.overrideTexture("images/gui/spritesheet.png","http://i.imgur.com/l7nG7ZU.png");
		ModPE.overrideTexture("images/gui/touchgui.png","http://i.imgur.com/MZeX8XN.png");
	}
}

VertexClientPE.setupTheme();

var createUiThread = function(func) {
    getContext().runOnUiThread(new java.lang.Runnable({
        run: function() {
            func(getContext());
        }
    }));
};

var GuiSize = android.util.TypedValue.applyDimension(android.util.TypedValue.COMPLEX_UNIT_DIP, 2, getContext().getResources().getDisplayMetrics());
var GetGui = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/gui.png"));
};
var TrimImage = function(bitmap, x, y, width, height) {
    return android.graphics.Bitmap.createBitmap(bitmap, x, y, width, height);
};
var GetSpritesheet = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/spritesheet.png"));
};
var GetTouchgui = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/touchgui.png"));
};
var GetGui = function() {
    return android.graphics.BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack("images/gui/gui.png"));
};

var trimImage = function(bitmap, x, y, width, height) {
    return android.graphics.Bitmap.createBitmap(bitmap, x, y, width, height);
};

var getStretchedImage = function(bm, x, y, stretchWidth, stretchHeight, width, height) {
    var blank = android.graphics.Bitmap.createBitmap(width, height, android.graphics.Bitmap.Config.ARGB_8888);
    var Bitmap = android.graphics.Bitmap;
    var part1 = Bitmap.createBitmap(bm, 0, 0, x, y);
    var part2 = Bitmap.createBitmap(bm, x, 0, stretchWidth, y);
    var part3 = Bitmap.createBitmap(bm, x + stretchWidth, 0, bm.getWidth() - x - stretchWidth, y);
    var part4 = Bitmap.createBitmap(bm, 0, y, x, stretchHeight);
    var part5 = Bitmap.createBitmap(bm, x, y, stretchWidth, stretchHeight);
    var part6 = Bitmap.createBitmap(bm, x + stretchWidth, y, bm.getWidth() - x - stretchWidth, stretchHeight);
    var part7 = Bitmap.createBitmap(bm, 0, y + stretchHeight, x, bm.getHeight() - y - stretchHeight);
    var part8 = Bitmap.createBitmap(bm, x, y + stretchHeight, stretchWidth, bm.getHeight() - y - stretchHeight);
    var part9 = Bitmap.createBitmap(bm, x + stretchWidth, y + stretchHeight, bm.getWidth() - x - stretchWidth, bm.getHeight() - y - stretchHeight);
    var canvas = new android.graphics.Canvas(blank);
    canvas.drawBitmap(part1, 0, 0, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part2, width - bm.getWidth() + stretchWidth, y, false), x, 0, null);
    canvas.drawBitmap(part3, width - bm.getWidth() + stretchWidth + x, 0, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part4, x, height - bm.getHeight() + stretchHeight, false), 0, y, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part5, width - bm.getWidth() + stretchWidth, height - bm.getHeight() + stretchHeight, false), x, y, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part6, part3.getWidth(), height - bm.getHeight() + stretchHeight, false), width - bm.getWidth() + stretchWidth + x, y, null);
    canvas.drawBitmap(part7, 0, height - bm.getHeight() + stretchHeight + y, null);
    canvas.drawBitmap(Bitmap.createScaledBitmap(part8, width - bm.getWidth() + stretchWidth, part7.getHeight(), false), x, height - bm.getHeight() + stretchHeight + y, null);
    canvas.drawBitmap(part9, width - bm.getWidth() + stretchWidth + x, height - bm.getHeight() + stretchHeight + y, null);

    return new android.graphics.drawable.BitmapDrawable(blank);
};

function clientButton(text, desc, color, round) //menu buttons
{
	if(color == null) {
		color = themeSetting;
	}
    var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var defaultButton = new Button(ctx);
    defaultButton.setText(text);
	if(color == "white") {
		defaultButton.setTextColor(android.graphics.Color.BLACK);
	} else {
		defaultButton.setTextColor(android.graphics.Color.WHITE);
	}
	defaultButton.setTypeface(VertexClientPE.font);
	if(desc != null && desc != undefined) {
		defaultButton.setOnLongClickListener(new android.view.View.OnLongClickListener() {
			onLongClick: function(v, t) {
				VertexClientPE.toast(desc);
				return true;
			}
		});
	}

	var bg = android.graphics.drawable.GradientDrawable();
	if(round) {
		bg.setCornerRadius(10);
	}
	bg.setColor(android.graphics.Color.parseColor("#0B5B25"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#0F8219"));
	if(color == "red") {
		bg.setColor(android.graphics.Color.parseColor("#5B0C0C"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#821010"));
	}if(color == "blue") {
		bg.setColor(android.graphics.Color.parseColor("#0A175B"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#0E3882"));
	}if(color == "purple") {
		bg.setColor(android.graphics.Color.parseColor("#9F018C"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#BC21AB"));
	}if(color == "white") {
		bg.setColor(android.graphics.Color.parseColor("#E1E1E1"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#FFFFFF"));
	}if(color == "black") {
		bg.setColor(android.graphics.Color.parseColor("#141414"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#1E1E1E"));
	}
	
	defaultButton.setTransformationMethod(null);
    defaultButton.setOnTouchListener(new android.view.View.OnTouchListener() {
        onTouch: function(v, event) {
            var action = event.getActionMasked();
            if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
				bg.setColor(android.graphics.Color.parseColor("#0B5B25"));
                if(color == "red") {
					bg.setColor(android.graphics.Color.parseColor("#5B0C0C"));
				}if(color == "blue") {
					bg.setColor(android.graphics.Color.parseColor("#0A175B"));
				}if(color == "purple") {
					bg.setColor(android.graphics.Color.parseColor("#9F018C"));
				}if(color == "white") {
					bg.setColor(android.graphics.Color.parseColor("#E1E1E1"));
				}if(color == "black") {
					bg.setColor(android.graphics.Color.parseColor("#141414"));
				}
            } else {
				bg.setColor(android.graphics.Color.parseColor("#0F8219"));
                if(color == "red") {
					bg.setColor(android.graphics.Color.parseColor("#821010"));
				}if(color == "blue") {
					bg.setColor(android.graphics.Color.parseColor("#0E3882"));
				}if(color == "purple") {
					bg.setColor(android.graphics.Color.parseColor("#BC21AB"));
				}if(color == "white") {
					bg.setColor(android.graphics.Color.parseColor("#FFFFFF"));
				}if(color == "black") {
					bg.setColor(android.graphics.Color.parseColor("#1E1E1E"));
				}
            }
            return false;
        }
    });

	defaultButton.setBackgroundDrawable(bg);
    defaultButton.setPaintFlags(defaultButton.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
    defaultButton.setTextSize(15);
	if(color == "white") {
		defaultButton.setShadowLayer(dip2px(1), dip2px(1), dip2px(1), android.graphics.Color.WHITE);
	} else {
		defaultButton.setShadowLayer(dip2px(1), dip2px(1), dip2px(1), android.graphics.Color.BLACK);
	}
	defaultButton.setPadding(0, 0, 0, 0);
    defaultButton.setLineSpacing(0, 1.15);
    return defaultButton;
}

function modButton(mod) {
	if(type == null) {
		var type = "Mod";
	}
	
	var modButtonName = mod.name;
	if(mod.requiresPro && mod.requiresPro() && !VertexClientPE.isPro()) modButtonName = "🔒 " + mod.name;
	
	if(mod.state) {
		if(mod.canBypassYesCheatPlus && !mod.canBypassYesCheatPlus()) {
			mod.onToggle();
			mod.state = true;
		}
	}
	
	var modButtonLayout = new LinearLayout(ctx);
	modButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
	
	var modButtonLayoutLeft = new LinearLayout(ctx);
	modButtonLayoutLeft.setOrientation(1);
	modButtonLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 2.5, display.heightPixels / 10));
	modButtonLayout.addView(modButtonLayoutLeft);
	
	var modButtonLayoutRight = new LinearLayout(ctx);
	modButtonLayoutRight.setOrientation(1);
	modButtonLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 2 - display.heightPixels / 2.5, display.heightPixels / 10));
	modButtonLayout.addView(modButtonLayoutRight);
	
	var defaultClientButton = clientButton(modButtonName, mod.desc);
	defaultClientButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2.5, display.heightPixels / 10));
	defaultClientButton.setAlpha(0.54);
	defaultClientButton.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
	defaultClientButton.setMarqueeRepeatLimit(-1);
	defaultClientButton.setSingleLine();
	defaultClientButton.setHorizontallyScrolling(true);
	defaultClientButton.setSelected(true);
	if(mod.isStateMod() && mod.state) {
		if(yesCheatPlusState && mod.canBypassYesCheatPlus && !mod.canBypassYesCheatPlus()) {
			defaultClientButton.setTextColor(android.graphics.Color.RED);
		} else {
			defaultClientButton.setTextColor(android.graphics.Color.GREEN);
		}
	}
	defaultClientButton.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function(viewarg) {
			if(mod.requiresPro && mod.requiresPro() && !VertexClientPE.isPro()) {
				VertexClientPE.showProDialog(mod.name);
				return;
			}
			if(mod.name == "YesCheat+") {
				mod.onToggle();
			} else {
				if(!yesCheatPlusState) {
					mod.onToggle();
				} else if(yesCheatPlusState && mod.canBypassYesCheatPlus == undefined || mod.canBypassYesCheatPlus == null) {
					mod.onToggle();
				} else if(yesCheatPlusState && mod.canBypassYesCheatPlus && !mod.canBypassYesCheatPlus()) {
					if(mod.isStateMod() && mod.state) {
						mod.onToggle();
					} else if(mod.isStateMod() && !mod.state) {
						mod.state = true;
					} else if(!mod.isStateMod()) {
						VertexClientPE.toast("This mod is blocked by YesCheat+!");
					}
				}
			}
			if(mod.isStateMod()) {
				if(mod.state) {
					if(yesCheatPlusState && mod.canBypassYesCheatPlus && !mod.canBypassYesCheatPlus()) {
						defaultClientButton.setTextColor(android.graphics.Color.RED);
					} else {
						defaultClientButton.setTextColor(android.graphics.Color.GREEN);
					}
				} else if(!mod.state) {
					if(themeSetting == "white") {
						defaultClientButton.setTextColor(android.graphics.Color.BLACK);
					} else {
						defaultClientButton.setTextColor(android.graphics.Color.WHITE);
					}
				}
			}
		}
	}));
	//var _0x9276=["\x69\x73\x50\x72\x6F","\x74\x72\x75\x65","\uD83D\uDD12\x20","\x73\x65\x74\x54\x65\x78\x74"];if(isProFeature&&VertexClientPE[_0x9276[0]]()!=_0x9276[1]){defaultClientButton[_0x9276[3]](_0x9276[2]+mod.name)}
	modButtonLayoutLeft.addView(defaultClientButton);
	
	var defaultInfoButton = clientButton("...", mod.name + " settings");
	defaultInfoButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2 - display.heightPixels / 2.5, display.heightPixels / 10));
	defaultInfoButton.setAlpha(0.54);
	defaultInfoButton.setOnClickListener(new android.view.View.OnClickListener({
	onClick: function(viewarg){
		VertexClientPE.showModDialog(mod, defaultClientButton);
	}
	}));
	modButtonLayoutRight.addView(defaultInfoButton);
	
	return modButtonLayout;
}

function addonButton(addon) {
	var addonButtonLayout = new LinearLayout(ctx);
	addonButtonLayout.setOrientation(1);
	addonButtonLayout.setGravity(android.view.Gravity.CENTER);
	
	var defaultClientButton = clientButton(addon.name + " v" + addon.current_version, addon.desc);
	defaultClientButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2, display.heightPixels / 8));
	defaultClientButton.setAlpha(0.54);
	defaultClientButton.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
	defaultClientButton.setMarqueeRepeatLimit(-1);
	defaultClientButton.setSingleLine();
	defaultClientButton.setHorizontallyScrolling(true);
	defaultClientButton.setSelected(true);
	defaultClientButton.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function(viewarg) {
			VertexClientPE.toast(addon.desc);
		}
	}));
	//var _0x9276=["\x69\x73\x50\x72\x6F","\x74\x72\x75\x65","\uD83D\uDD12\x20","\x73\x65\x74\x54\x65\x78\x74"];if(isProFeature&&VertexClientPE[_0x9276[0]]()!=_0x9276[1]){defaultClientButton[_0x9276[3]](_0x9276[2]+mod.name)}
	addonButtonLayout.addView(defaultClientButton);
	
	return addonButtonLayout;
}

function accountButton(account, layout) {
	var accountManagerAccountLayout = new LinearLayout(ctx);
	accountManagerAccountLayout.setOrientation(LinearLayout.HORIZONTAL);
	/*if(account.name == null || account.name == undefined) {
		return accountManagerAccountLayout;
	}
	if(account.clientId == null || account.clientId == undefined) {
		return accountManagerAccountLayout;
	}*/
	
	var accountManagerAccountLayoutLeft = new LinearLayout(ctx);
	accountManagerAccountLayoutLeft.setOrientation(1);
	accountManagerAccountLayoutLeft.setGravity(android.view.Gravity.CENTER_VERTICAL);
	accountManagerAccountLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
	accountManagerAccountLayout.addView(accountManagerAccountLayoutLeft);
	
	var accountManagerAccountLayoutCenter = new LinearLayout(ctx);
	accountManagerAccountLayoutCenter.setOrientation(1);
	accountManagerAccountLayoutCenter.setGravity(android.view.Gravity.CENTER);
	accountManagerAccountLayoutCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
	accountManagerAccountLayout.addView(accountManagerAccountLayoutCenter);
	
	var accountManagerAccountLayoutRight = new LinearLayout(ctx);
	accountManagerAccountLayoutRight.setOrientation(LinearLayout.HORIZONTAL);
	accountManagerAccountLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 3, display.heightPixels / 10));
	accountManagerAccountLayout.addView(accountManagerAccountLayoutRight);
	var usernameText = clientTextView(account);
	usernameText.setTextSize(15);
	accountManagerAccountLayoutLeft.addView(usernameText);
	/*var clientIdText = clientTextView(account.clientId);
	clientIdText.setTextSize(15);
	accountManagerAccountLayoutCenter.addView(clientIdText);*/
	var useButton = clientButton("Use");
	useButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
	useButton.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function(viewarg) {
			var playerName = account.toString();
			//var playerClientId = account.clientId.toString();
			var shouldRestart = false;
			if(playerName != ModPE.getPlayerName()) {
				ModPE.setPlayerName(playerName);
				shouldRestart = true;
			}
			/*if(playerClientId != ModPE.getClientId()) {
				ModPE.changeClientId(playerClientId);
				shouldRestart = true;
			}*/
			if(shouldRestart) {
				ModPE.restart();
				return;
			}
			accountManager.dismiss();
			exitAccountManagerUI.dismiss();
			showMenuButton();
			showAccountManagerButton();
		}
	}));
	accountManagerAccountLayoutRight.addView(useButton);
	var deleteButton = clientButton("x");
	deleteButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 3 - display.widthPixels / 4, display.heightPixels / 10));
	deleteButton.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function(viewarg) {
			VertexClientPE.removeAccount(account.toString(), layout, accountManagerAccountLayout);
			/*accountManager.dismiss();
			exitAccountManagerUI.dismiss();
			showMenuButton();
			showAccountManagerButton();*/
		}
	}));
	accountManagerAccountLayoutRight.addView(deleteButton);
	
	return accountManagerAccountLayout;
}

function clientTextButton(text, shadow) //menu buttons
{
    var defaultTextButton = new Button(ctx);
    defaultTextButton.setText(text);
	
	if(shadow == true && shadow != null && shadow != undefined) {
		if(android.os.Build.VERSION.SDK_INT > 19) { // KITKAT
			defaultTextButton.setShadowLayer(1, Math.round(defaultTextButton.getLineHeight() / 8), Math.round(defaultTextButton.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
		} else {
			defaultTextButton.setShadowLayer(0.0001, Math.round(defaultTextButton.getLineHeight() / 8), Math.round(defaultTextButton.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
		}
	}
    defaultTextButton.setPadding(0, 0, 0, 0);
    defaultTextButton.setLineSpacing(0, 1.15);
    return defaultTextButton;
}

function clientTextView(text, shadow) //menu buttons
{
    var defaultTextView = new widget.TextView(ctx);
    defaultTextView.setText(text);
	if(themeSetting == "white") {
		defaultTextView.setTextColor(android.graphics.Color.BLACK);
	} else {
		defaultTextView.setTextColor(android.graphics.Color.WHITE);
	}
    defaultTextView.setTypeface(VertexClientPE.font);
	
	if(shadow == true && shadow != null && shadow != undefined) {
		if(themeSetting == "white") {
			defaultTextView.setShadowLayer(dip2px(1), dip2px(1), dip2px(1), android.graphics.Color.WHITE);
		} else {
			defaultTextView.setShadowLayer(dip2px(1), dip2px(1), dip2px(1), android.graphics.Color.BLACK);
		}
	}
    defaultTextView.setPadding(0, 0, 0, 0);
    defaultTextView.setLineSpacing(0, 1.15);
    return defaultTextView;
}

function categoryTitle(text) {
	var categoryTitleLayout = new LinearLayout(ctx);
	categoryTitleLayout.setOrientation(LinearLayout.HORIZONTAL);
	
	var categoryTitleLayoutLeft = new LinearLayout(ctx);
	categoryTitleLayoutLeft.setOrientation(1);
	categoryTitleLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 3 - display.heightPixels / 4, display.heightPixels / 20));
	categoryTitleLayout.addView(categoryTitleLayoutLeft);
	
	var categoryTitleLayoutMiddle = new LinearLayout(ctx);
	categoryTitleLayoutMiddle.setOrientation(1);
	categoryTitleLayoutMiddle.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 3, display.heightPixels / 20));
	categoryTitleLayout.addView(categoryTitleLayoutMiddle);
	
	var categoryTitleLayoutRight = new LinearLayout(ctx);
	categoryTitleLayoutRight.setOrientation(1);
	categoryTitleLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 3 - display.heightPixels / 4, display.heightPixels / 20));
	categoryTitleLayout.addView(categoryTitleLayoutRight);
	
	var defaultSettingsButton = clientButton("\u270E");
	defaultSettingsButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 3 - display.heightPixels / 4, display.heightPixels / 20));
	defaultSettingsButton.setAlpha(0.54);
	categoryTitleLayoutLeft.addView(defaultSettingsButton);
	
	var defaultTitle = greenSubTitle(text);
	if(themeSetting == "blue") {
		defaultTitle = blueSubTitle(text);
	} if(themeSetting == "red") {
		defaultTitle = redSubTitle(text);
	} if(themeSetting == "purple") {
		defaultTitle = purpleSubTitle(text);
	} if(themeSetting == "white") {
		defaultTitle = whiteSubTitle(text);
	} if(themeSetting == "black") {
		defaultTitle = blackSubTitle(text);
	}
	defaultTitle.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 3, display.heightPixels / 20));
	defaultTitle.setGravity(view.Gravity.CENTER);
	categoryTitleLayoutMiddle.addView(defaultTitle);
	
	var defaultArrowButton = clientButton("▽");
	defaultArrowButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 3 - display.heightPixels / 4, display.heightPixels / 20));
	defaultArrowButton.setAlpha(0.54);
	categoryTitleLayoutRight.addView(defaultArrowButton);
	
	this.getName = function() {
		return text;
	}
	
	this.getLeftButton = function() {
		return defaultSettingsButton;
	}
	
	this.getMiddleButton = function() {
		return defaultTitle;
	}
	
	this.getRightButton = function() {
		return defaultArrowButton;
	}
	
	this.getLayout = function() {
		return categoryTitleLayout;
	}
}

function greenSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#0B5B25"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#0F8219"));

	var title = clientTextView(subtitle, true);
	title.setAlpha(0.54);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function redSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#5B0C0C"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#821010"));

	var title = clientTextView(subtitle, true);
	title.setAlpha(0.54);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function blueSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#0A175B"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#0E3882"));

	var title = clientTextView(subtitle, true);
	title.setAlpha(0.54);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function purpleSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#9F018C"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#BC21AB"));

	var title = clientTextView(subtitle, true);
	title.setAlpha(0.54);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function whiteSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#E1E1E1"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#FFFFFF"));

	var title = clientTextView(subtitle, true);
	title.setAlpha(0.54);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function blackSubTitle(subtitle) // TextView with colored background (edited by peacestorm)
{
	var padding = dip2px(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#141414"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#1E1E1E"));

	var title = clientTextView(subtitle, true);
	title.setAlpha(0.54);
	title.setBackgroundDrawable(bg);
	//title.setPadding(padding, padding, padding, padding);

	return title;
}

function backgroundGradient(round) // TextView with colored background (edited by peacestorm)
{
	var bg = android.graphics.drawable.GradientDrawable();
	if(round) {
		bg.setCornerRadius(20);
	}
	bg.setColor(android.graphics.Color.parseColor("#700B5B25"));
	bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#700F8219"));
	if(themeSetting == "red") {
		bg.setColor(android.graphics.Color.parseColor("#705B0C0C"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#70821010"));
	}if(themeSetting == "blue") {
		bg.setColor(android.graphics.Color.parseColor("#700A175B"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#700E3882"));
	}if(themeSetting == "purple") {
		bg.setColor(android.graphics.Color.parseColor("#709F018C"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#70BC21AB"));
	}if(themeSetting == "white") {
		bg.setColor(android.graphics.Color.parseColor("#70E1E1E1"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#70FFFFFF"));
	}if(themeSetting == "black") {
		bg.setColor(android.graphics.Color.parseColor("#70141414"));
		bg.setStroke(dip2px(2), android.graphics.Color.parseColor("#701E1E1E"));
	}
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);

	return bg;
}

(VertexClientPE.editCopyrightText = function() {
	VertexClientPE.loadMainSettings();
	ModPE.langEdit("menu.copyright", "©Mojang AB | §2Vertex Client PE by peacestorm");
	if(themeSetting == "red") {
		ModPE.langEdit("menu.copyright", "©Mojang AB | §4Vertex Client PE by peacestorm");
	} if(themeSetting == "blue") {
		ModPE.langEdit("menu.copyright", "©Mojang AB | §1Vertex Client PE by peacestorm");
	} if(themeSetting == "purple") {
		ModPE.langEdit("menu.copyright", "©Mojang AB | §5Vertex Client PE by peacestorm");
	} if(themeSetting == "white") {
		ModPE.langEdit("menu.copyright", "©Mojang AB | §fVertex Client PE by peacestorm");
		ModPE.langEdit("", "");
	} if(themeSetting == "black") {
		ModPE.langEdit("menu.copyright", "©Mojang AB | §0Vertex Client PE by peacestorm");
	}
})();

var shouldOverride = false;

VertexClientPE.checkForUpdates = function() {
    try {
        // download content
        var url = new java.net.URL("https://raw.githubusercontent.com/Vertex-Client/Vertex-Client-PE/update/Updater/Version");
        var connection = url.openConnection();

        // get content
        inputStream = connection.getInputStream();

        // read result
        var loadedVersion = "";
        var bufferedVersionReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
        var rowVersion = "";
        while((rowVersion = bufferedVersionReader.readLine()) != null) {
            loadedVersion += rowVersion;
        }
        VertexClientPE.latestVersion = loadedVersion.split(" ")[0] + " " + loadedVersion.split(" ")[1];
        latestPocketEditionVersion = loadedVersion.split(" ")[2];

        // close what needs to be closed
        bufferedVersionReader.close();
		
		shouldOverride = true;

        // test
        //clientMessage(VertexClientPE.getVersion("current"); + " " + latestVersion);
    } catch(err) {
        VertexClientPE.clientMessage("Can't check for updates, please check your Internet connection.");
        ModPE.log("[Vertex Client PE] VertexClientPE.checkForUpdates() caught an error: " + err);
		shouldOverride = false;
    }
	if(shouldOverride) {
		themeSetup = "off";
		VertexClientPE.setupTheme();
	}
}

VertexClientPE.loadNews = function() {
    try {
        // download content
        var url = new java.net.URL("https://raw.githubusercontent.com/Vertex-Client/Vertex-Client-PE/news/News");
        var connection = url.openConnection();

        // get content
        newsInputStream = connection.getInputStream();

        // read result
        var loadedNews = "";
        var bufferedNewsReader = new java.io.BufferedReader(new java.io.InputStreamReader(newsInputStream));
        var rowNews = "";
        while((rowNews = bufferedNewsReader.readLine()) != null) {
            loadedNews += rowNews;
        }
		news = loadedNews.toString();

        // close what needs to be closed
        bufferedNewsReader.close();

        // test
        //clientMessage(VertexClientPE.getVersion("current"); + " " + latestVersion);
    } catch(err) {
		news = "News couldn't be loaded";
        ModPE.log("[Vertex Client PE] VertexClientPE.loadNews() caught an error: " + err);
    }
}

VertexClientPE.loadSupport = function() {
    try {
        // download content
        var url = new java.net.URL("https://raw.githubusercontent.com/Vertex-Client/Vertex-Client-PE/update/Support/" + VertexClientPE.currentVersion + "/support");
        var connection = url.openConnection();

        // get content
        supportInputStream = connection.getInputStream();

        // read result
        var loadedSupport = "";
        var bufferedSupportReader = new java.io.BufferedReader(new java.io.InputStreamReader(supportInputStream));
        var rowSupport = "";
        while((rowSupport = bufferedNewsReader.readLine()) != null) {
            loadedSupport += rowSupport;
        }
		isSupported = loadedSupport.toString()==="unsupported"?false:true;

        // close what needs to be closed
        bufferedSupportReader.close();

        // test
        //clientMessage(VertexClientPE.getVersion("current"); + " " + latestVersion);
    } catch(err) {
		var sharedPref = ctx.getPreferences(ctx.MODE_PRIVATE);
		if(sharedPref.getString("VertexClientPE.isSupported_" + VertexClientPE.currentVersion, null) === "false") {
			isSupported = false;
		} else {
			isSupported = true;
		}
        ModPE.log("[Vertex Client PE] VertexClientPE.loadSupport() caught an error: " + err);
		return;
    }
	var sharedPref = ctx.getPreferences(ctx.MODE_PRIVATE);
	var editor = sharedPref.edit();
	editor.putString("VertexClientPE.isSupported_" + VertexClientPE.currentVersion, isSupported.toString());
	editor.commit();
}

new java.lang.Thread(new java.lang.Runnable() {
	run: function() {
		VertexClientPE.loadMainSettings();
		if(showNewsSetting == "on") {
			VertexClientPE.loadNews();
			var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
			ctx.runOnUiThread(new java.lang.Runnable({
				run: function() {
					VertexClientPE.toast(news);
				}
			}));
		}
	}
}).start();

VertexClientPE.showSplashScreen = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    var mainMenuListLayout = new LinearLayout(ctx);
                    mainMenuListLayout.setOrientation(1);
                    mainMenuListLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
                    //--------Add Buttons-------//
					var mainMenuListLayoutTop = new LinearLayout(ctx);
					mainMenuListLayoutTop.setOrientation(1);
					mainMenuListLayoutTop.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight() / 6));
					var logo1 = android.util.Base64.decode(logoImage, 0);
					var logoViewer1 = new widget.ImageView(ctx);
					logoViewer1.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 2, ctx.getWindowManager().getDefaultDisplay().getHeight() / 4));
					logoViewer1.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(logo1, 0, logo1.length));
					var VertexClientPEMainMenuText = "<font color='#008000'>" + VertexClientPE.getVersion("current") + "</font>";
					if(themeSetting == "red") {
						VertexClientPEMainMenuText = "<font color='#FF0000'>" + VertexClientPE.getVersion("current") + "</font>";
					}if(themeSetting == "blue") {
						VertexClientPEMainMenuText = "<font color='#0000FF'>" + VertexClientPE.getVersion("current") + "</font>";
					}if(themeSetting == "purple") {
						VertexClientPEMainMenuText = "<font color='#800080'>" + VertexClientPE.getVersion("current") + "</font>";
					}
					var text = VertexClientPEMainMenuText + " - Welcome back " + ModPE.getPlayerName() + "!";
					var TitleText = clientTextView(text, true);
					TitleText.setText(android.text.Html.fromHtml("<blink>" + text + "</blink>"), widget.TextView.BufferType.SPANNABLE);
					TitleText.setTextSize(18);
					TitleText.setGravity(android.view.Gravity.CENTER);
					TitleText.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
					TitleText.setMarqueeRepeatLimit(-1);
					TitleText.setSingleLine();
					TitleText.setHorizontallyScrolling(true);
					TitleText.setSelected(true);
					var newLineText = new widget.TextView(ctx);
					newLineText.setText("\n\n\n");
					newLineText.setTextSize(10);
					var mainMenuListLayoutMiddle = new LinearLayout(ctx);
					mainMenuListLayoutMiddle.setOrientation(LinearLayout.HORIZONTAL);
					mainMenuListLayoutMiddle.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight() / 3));
					var mainMenuListLayoutMiddleLeft = new LinearLayout(ctx);
					mainMenuListLayoutMiddleLeft.setOrientation(1);
					mainMenuListLayoutMiddleLeft.setGravity(android.view.Gravity.RIGHT);
					mainMenuListLayoutMiddleLeft.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 3, ctx.getWindowManager().getDefaultDisplay().getHeight() / 3));
					var mainMenuListLayoutMiddleMiddle = new LinearLayout(ctx);
					mainMenuListLayoutMiddleMiddle.setOrientation(1);
					mainMenuListLayoutMiddleMiddle.setGravity(android.view.Gravity.CENTER);
					mainMenuListLayoutMiddleMiddle.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 3, ctx.getWindowManager().getDefaultDisplay().getHeight() / 3));
					var mainMenuListLayoutMiddleRight = new LinearLayout(ctx);
					mainMenuListLayoutMiddleRight.setOrientation(1);
					mainMenuListLayoutMiddleRight.setGravity(android.view.Gravity.LEFT);
					mainMenuListLayoutMiddleRight.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 3, ctx.getWindowManager().getDefaultDisplay().getHeight() / 3));
					mainMenuListLayoutMiddle.addView(mainMenuListLayoutMiddleLeft);
					mainMenuListLayoutMiddle.addView(mainMenuListLayoutMiddleMiddle);
					mainMenuListLayoutMiddle.addView(mainMenuListLayoutMiddleRight);
					var youTubeButton = new Button(ctx);
					youTubeButton.setBackground(splashYouTubeButtonClientGUI);
					youTubeButton.setGravity(android.view.Gravity.CENTER);
					youTubeButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 5, display.heightPixels / 5));
					youTubeButton.setOnTouchListener(new android.view.View.OnTouchListener() {
						onTouch: function(v, event) {
							youTubeButton.setSoundEffectsEnabled(false);
							var action = event.getActionMasked();
							if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
								var bNP = splashYouTubeButtonClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								youTubeButton.setBackgroundDrawable(bNP);
								youTubeButton.setPadding(0, 0, 0, 0);
							} else {
								var bNP = splashYouTubeButtonClickedClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								youTubeButton.setBackgroundDrawable(bNP);
								youTubeButton.setPadding(0, Math.round(youTubeButton.getLineHeight() / 8), 0, 0);
							}
							return false;
						}
					});
					var playButton = new Button(ctx);
					playButton.setBackground(playButtonClientGUI);
					playButton.setGravity(android.view.Gravity.CENTER);
					playButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 3, display.heightPixels / 3));
					playButton.setOnTouchListener(new android.view.View.OnTouchListener() {
						onTouch: function(v, event) {
							playButton.setSoundEffectsEnabled(false);
							var action = event.getActionMasked();
							if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
								var bNP = playButtonClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								playButton.setBackgroundDrawable(bNP);
								playButton.setPadding(0, 0, 0, 0);
							} else {
								var bNP = playButtonClickedClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								playButton.setBackgroundDrawable(bNP);
								playButton.setPadding(0, Math.round(playButton.getLineHeight() / 8), 0, 0);
							}
							return false;
						}
					});
					var twitterButton = new Button(ctx);
					twitterButton.setBackgroundDrawable(splashTwitterButtonClientGUI);
					twitterButton.setGravity(android.view.Gravity.CENTER);
					twitterButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 5, display.heightPixels / 5));
					twitterButton.setOnTouchListener(new android.view.View.OnTouchListener() {
						onTouch: function(v, event) {
							twitterButton.setSoundEffectsEnabled(false);
							var action = event.getActionMasked();
							if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
								var bNP = splashTwitterButtonClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								twitterButton.setBackgroundDrawable(bNP);
								twitterButton.setPadding(0, 0, 0, 0);
							} else {
								var bNP = splashTwitterButtonClickedClientGUI;
								bNP.setFilterBitmap(false);
								bNP.setAntiAlias(false);
								twitterButton.setBackgroundDrawable(bNP);
								twitterButton.setPadding(0, Math.round(twitterButton.getLineHeight() / 8), 0, 0);
							}
							return false;
						}
					});
					
					youTubeButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							mainMenuTextList.dismiss();
							showMenuButton();
							VertexClientPE.clientTick();
							VertexClientPE.specialTick();
							VertexClientPE.secondTick();
							//showAccountManagerButton();
							ModPE.goToURL("https://www.youtube.com/c/AgameRGaming");
					}}));
					playButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							mainMenuTextList.dismiss();
							showMenuButton();
							VertexClientPE.clientTick();
							VertexClientPE.specialTick();
							VertexClientPE.secondTick();
							showAccountManagerButton();
					}}));
					twitterButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							mainMenuTextList.dismiss();
							showMenuButton();
							VertexClientPE.clientTick();
							VertexClientPE.specialTick();
							VertexClientPE.secondTick();
							//showAccountManagerButton();
							ModPE.goToURL("http://twitter.com/VertexHX");
					}}));
					
					/*var splashSlider = new ViewPager(ctx);
					splashSlider.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
						onPageSelected: function(position) {
							VertexClientPE.toast("Page" + position);
							switch (position) {
								case 0:
									break;

								case 1:
									break;

								case 2:
									break;

								case 3:
									break;

								default:
									break;
							}
						}
					});*/

                    mainMenuListLayout.addView(mainMenuListLayoutTop);
                    mainMenuListLayoutTop.addView(TitleText);
                    mainMenuListLayout.addView(logoViewer1);
                    mainMenuListLayout.addView(newLineText);
                    mainMenuListLayout.addView(mainMenuListLayoutMiddle);
                    mainMenuListLayoutMiddleLeft.addView(youTubeButton);
                    mainMenuListLayoutMiddleMiddle.addView(playButton);
                    mainMenuListLayoutMiddleRight.addView(twitterButton);
					//mainMenuListLayout.addView(splashSlider);

                    //More buttons...
                    mainMenuTextList = new widget.PopupWindow(mainMenuListLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
                    mainMenuTextList.setBackgroundDrawable(backgroundGradient());
                    mainMenuTextList.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
                } catch(error) {
                    print('An error occurred: ' + error);
                }
            }
        }));
}

VertexClientPE.showSetupScreen = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var setupScreenLayout = new LinearLayout(ctx);
					setupScreenLayout.setOrientation(1);
					setupScreenLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var setupScreenLayoutBottom = new LinearLayout(ctx);
					setupScreenLayoutBottom.setOrientation(LinearLayout.HORIZONTAL);
					
					var setupScreenLayoutBottomLeft = new LinearLayout(ctx);
					setupScreenLayoutBottomLeft.setOrientation(1);
					setupScreenLayoutBottomLeft.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					setupScreenLayoutBottomLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					setupScreenLayoutBottom.addView(setupScreenLayoutBottomLeft);
					
					var setupScreenLayoutBottomCenter = new LinearLayout(ctx);
					setupScreenLayoutBottomCenter.setOrientation(1);
					setupScreenLayoutBottomCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					setupScreenLayoutBottomCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					setupScreenLayoutBottom.addView(setupScreenLayoutBottomCenter);
					
					var setupScreenLayoutBottomCenter1 = new LinearLayout(ctx);
					setupScreenLayoutBottomCenter1.setOrientation(1);
					setupScreenLayoutBottomCenter1.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					setupScreenLayoutBottomCenter1.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					setupScreenLayoutBottom.addView(setupScreenLayoutBottomCenter1);
					
					var setupScreenLayoutBottomRight = new LinearLayout(ctx);
					setupScreenLayoutBottomRight.setOrientation(1);
					setupScreenLayoutBottomRight.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					setupScreenLayoutBottomRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					setupScreenLayoutBottom.addView(setupScreenLayoutBottomRight);
					
					var logo3 = android.util.Base64.decode(logoImage, 0);
					var logoViewer3 = new widget.ImageView(ctx);
					logoViewer3.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(logo3, 0, logo3.length));
					setupScreenLayout.addView(logoViewer3);
					setupScreenLayout.addView(setupScreenLayoutBottom);
					
					var setupButtonGreen = clientButton("Green", null, "green");
					setupButtonGreen.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonGreen.setTextColor(android.graphics.Color.GREEN);
					setupButtonGreen.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							setupColor = "green";
							setupButtonGreen.setTextColor(android.graphics.Color.GREEN);
							setupButtonRed.setTextColor(android.graphics.Color.WHITE);
							setupButtonBlue.setTextColor(android.graphics.Color.WHITE);
							setupButtonPurple.setTextColor(android.graphics.Color.WHITE);
						}
					}));
					setupScreenLayoutBottomLeft.addView(setupButtonGreen);
					
					var setupButtonRed = clientButton("Red", null, "red");
					setupButtonRed.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonRed.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							setupColor = "red";
							setupButtonGreen.setTextColor(android.graphics.Color.WHITE);
							setupButtonRed.setTextColor(android.graphics.Color.GREEN);
							setupButtonBlue.setTextColor(android.graphics.Color.WHITE);
							setupButtonPurple.setTextColor(android.graphics.Color.WHITE);
						}
					}));
					setupScreenLayoutBottomCenter.addView(setupButtonRed);
					
					var setupButtonBlue = clientButton("Blue", null, "blue");
					setupButtonBlue.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonBlue.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							setupColor = "blue";
							setupButtonGreen.setTextColor(android.graphics.Color.WHITE);
							setupButtonRed.setTextColor(android.graphics.Color.WHITE);
							setupButtonBlue.setTextColor(android.graphics.Color.GREEN);
							setupButtonPurple.setTextColor(android.graphics.Color.WHITE);
						}
					}));
					setupScreenLayoutBottomCenter1.addView(setupButtonBlue);
					
					var setupButtonPurple = clientButton("Purple", null, "purple");
					setupButtonPurple.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					setupButtonPurple.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							setupColor = "purple";
							setupButtonGreen.setTextColor(android.graphics.Color.WHITE);
							setupButtonRed.setTextColor(android.graphics.Color.WHITE);
							setupButtonBlue.setTextColor(android.graphics.Color.WHITE);
							setupButtonPurple.setTextColor(android.graphics.Color.GREEN);
						}
					}));
					setupScreenLayoutBottomRight.addView(setupButtonPurple);
					
					var setupText = clientTextView("You can always change the color on the Settings Screen.");
					setupText.setGravity(android.view.Gravity.CENTER);
					setupScreenLayout.addView(setupText);
					
					setupScreen = new widget.PopupWindow(setupScreenLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
					setupScreen.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#0080FF")));
					setupScreen.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occurred: ' + error);
					VertexClientPE.showBugReportDialog(error);
			}
		}
	}));
}

var accountManager;
var accountManagerLayoutLeft;
var accountManagerLayoutCenter;
var accountManagerLayoutRight;

ModPE.restart = function() {
	if(Launcher.isBlockLauncher()) {
		net.zhuoweizhang.mcpelauncher.ui.NerdyStuffActivity.forceRestart(ctx, 500, true);
	}
}

VertexClientPE.addAccount = function(str) {
	var username = str.split(" ")[0];
	var clientId = str.split(" ")[1];
	VertexClientPE.accounts.push({
		username: username,
		clientId: clientId
	})
}

VertexClientPE.removeAccount = function(str, layout, view) {
	if(VertexClientPE.accounts.length() != null) {
		var tempAccounts = new org.json.JSONArray();
		for(var i = 0; i < VertexClientPE.accounts.length(); i++) {
			if(VertexClientPE.accounts.get(i) != str) {
				tempAccounts.put(VertexClientPE.accounts.get(i));
			}
		}
		VertexClientPE.accounts = tempAccounts;
	}
	if(layout != null && view != null) {
		try {
			layout.removeView(view);
		} catch(e) {
			//error
		}
	}
	VertexClientPE.saveAccounts();
}

VertexClientPE.showAccountManager = function() {
	VertexClientPE.loadAccounts();
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var accountManagerLayout = new LinearLayout(ctx);
					accountManagerLayout.setOrientation(1);
					accountManagerLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var accountManagerTitle = clientTextView("Account Manager", true);
					accountManagerTitle.setTextSize(25);
					accountManagerTitle.setGravity(android.view.Gravity.CENTER);
					accountManagerLayout.addView(accountManagerTitle);
					
					var addAccountButton = clientButton("Add account");
					addAccountButton.setLayoutParams(new LinearLayout.LayoutParams(display.widthPixels / 4, display.heightPixels / 10));
					addAccountButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							//show add account dialog
							VertexClientPE.showAddAccountDialog();
						}
					}));
					accountManagerLayout.addView(addAccountButton);
					
					var accountManagerScrollView = new ScrollView(ctx);
					
					var accountManagerLayout1 = new LinearLayout(ctx);
					accountManagerLayout1.setOrientation(1);
					
					accountManagerScrollView.addView(accountManagerLayout1);
					accountManagerLayout.addView(accountManagerScrollView);
					
					var accountsLength = VertexClientPE.accounts.length();
					if(VertexClientPE.accounts != null && accountsLength != -1) {
						for(var i = 0; i < accountsLength; i++) {
							//if(VertexClientPE.accounts[i].username != null && VertexClientPE.accounts[i].username != undefined && VertexClientPE.accounts[i].username != " ") {
								var usernameLayout = accountButton(VertexClientPE.accounts.get(i), accountManagerLayout1);
								accountManagerLayout1.addView(usernameLayout);
							//}
						}
					}
					
					accountManager = new widget.PopupWindow(accountManagerLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
					accountManager.setBackgroundDrawable(backgroundGradient());
					accountManager.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occurred: ' + error);
				}
			}
		}));
}

VertexClientPE.downloadPro = function() {
	ModPE.goToURL("http://filecred.com/A8C1G574");
}

VertexClientPE.setup = function() {
	VertexClientPE.loadSupport();
	//print(isSupported);
	if(VertexClientPE.loadMainSettings() == null) {
		VertexClientPE.showSetupScreen();
		setupDone();
	} else {
		VertexClientPE.showSplashScreen();
	}
}

VertexClientPE.setup();

var coordsButton;

/*var keybind = new JavaAdapter(android.view.KeyEvent.Callback, {
    onKeyUp: function (keyCode, event) {
       switch(keyCode) {
			case KeyEvent.KEYCODE_D:
				print("test");
				return true;
			case KeyEvent.KEYCODE_F:
				moveShip(MOVE_RIGHT);
				return true;
			case KeyEvent.KEYCODE_J:
				fireMachineGun();
				return true;
			case KeyEvent.KEYCODE_K:
				fireMissile();
				return true;
	}
   }
});*/

VertexClientPE.getHighestBlockDifference = function() {
	var x = getPlayerX();
	var y = getPlayerY();
	var z = getPlayerZ();
	while(getTile(x, y, z) == 0) {
		y--;
	} if(getTile(x, y, z) != 0) {
		return getPlayerY() - 2 - y;
	}
}

var hasLoadedAddons = false;

function newLevel() {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function() {
			if(accountManager != null) {
				accountManager.dismiss();
				exitAccountManagerUI.dismiss();
			}
			if(accountManagerGUI != null) {
				accountManagerGUI.dismiss();
			}
		}
	});
	autoLeaveStage = 0;
	VertexClientPE.playerIsInGame = true;
	VertexClientPE.loadMainSettings();
	if(!hasLoadedAddons) {
		hasLoadedAddons = true;
		VertexClientPE.loadAddons();
	}
	VertexClientPE.playMusic();
	new java.lang.Thread(new java.lang.Runnable() {
		run: function() {
			VertexClientPE.checkForUpdates();
			if(VertexClientPE.latestVersion != VertexClientPE.currentVersion && VertexClientPE.latestVersion != undefined) {
				VertexClientPE.clientMessage("There is a new version available (v" + VertexClientPE.latestVersion + " for Minecraft Pocket Edition v" + latestPocketEditionVersion + ")!");
			} else {
				ctx.runOnUiThread(new java.lang.Runnable() {
					run: function() {
						VertexClientPE.toast("You have the latest version");
					}
				});
			}
		}
	}).start();
	if(hacksList == null) {
		showHacksList();
	}if(hacksList != null) {
		if(!hacksList.isShowing()) {
			showHacksList();
		}
	}
	if(VertexClientPE.isDevMode()) {
		VertexClientPE.showBugReportDialog("Warning: Dev mode is enabled!");
	}
}

function leaveGame() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
			if(hacksList != null) {
				hacksList.dismiss();
				GUI.dismiss();
			}
			if(topBar != null) {
				topBar.dismiss();
				vertexclientpecombatmenu.dismiss(); //Close
				vertexclientpebuildingmenu.dismiss(); //Close
				vertexclientpemovementmenu.dismiss(); //Close
				vertexclientpechatmenu.dismiss(); //Close
				vertexclientpemiscmenu.dismiss(); //Close
				//vertexclientpefavmenu.dismiss(); //Close
			}
			showMenuButton();
			showAccountManagerButton();
			VertexClientPE.saveMainSettings();
			VertexClientPE.editCopyrightText();
			if(mp != null) {
				mp.stop();
			}
			musicText = "None";
			VertexClientPE.playerIsInGame = false;
			VertexClientPE.isRemote = false;
		}
	}));
}

function settingsScreen() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    var settingsMenuLayout = new LinearLayout(ctx);
                    settingsMenuLayout.setOrientation(1);
                    settingsMenuLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var settingsMenuScroll = new ScrollView(ctx);
					
					var settingsMenuLayout1 = new LinearLayout(ctx);
                    settingsMenuLayout1.setOrientation(1);
                    settingsMenuLayout1.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					settingsMenuScroll.addView(settingsMenuLayout);
					settingsMenuLayout1.addView(settingsMenuScroll);
					
					var settingsTitle = clientTextView("Settings", true);
					settingsTitle.setTextSize(25);
					settingsTitle.setGravity(android.view.Gravity.CENTER);
					settingsMenuLayout.addView(settingsTitle);
					
					var hacksListModeSettingButton = clientButton("Hacks List Mode");
					if(hacksListModeSetting == "on") {
						hacksListModeSettingButton.setText("Hacks List Mode | Normal");
					} else if(hacksListModeSetting == "counter") {
						hacksListModeSettingButton.setText("Hacks List Mode | Counter");
					} else if(hacksListModeSetting == "off") {
						hacksListModeSettingButton.setText("Hacks List Mode | Hidden");
					}
					hacksListModeSettingButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg){
							if(hacksListModeSetting == "off") {
								hacksListModeSetting = "on";
								hacksListModeSettingButton.setText("Hacks List Mode | Normal");
								VertexClientPE.saveMainSettings();
								VertexClientPE.loadMainSettings();
							} else if(hacksListModeSetting == "on"){
								hacksListModeSetting = "counter";
								hacksListModeSettingButton.setText("Hacks List Mode | Counter");
								VertexClientPE.saveMainSettings();
								VertexClientPE.loadMainSettings();
							} else if(hacksListModeSetting == "counter"){
								hacksListModeSetting = "off";
								hacksListModeSettingButton.setText("Hacks List Mode | Hidden");
								VertexClientPE.saveMainSettings();
								VertexClientPE.loadMainSettings();
							}
						}
					}));
					
					var mainButtonPositionSettingButton = clientButton("Main button position", "Sets the main menu's button position");
					if(mainButtonPositionSetting == "top-right") {
						mainButtonPositionSettingButton.setText("Main button position | Top-right");
					} else if(mainButtonPositionSetting == "bottom-right") {
						mainButtonPositionSettingButton.setText("Main button position | Bottom-right");
					}
					mainButtonPositionSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(mainButtonPositionSetting == "top-right") {
							mainButtonPositionSetting = "bottom-right";
							mainButtonPositionSettingButton.setText("Main button position | Bottom-right");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(mainButtonPositionSetting == "bottom-right") {
							mainButtonPositionSetting = "top-right";
							mainButtonPositionSettingButton.setText("Main button position | Top-right");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						}
					}
					}));
					
					var themeSettingButton = clientButton("Theme", "Sets the Client's theme");
					if(themeSetting == "green") {
						themeSettingButton.setText("Theme | Green");
					} else if(themeSetting == "red") {
						themeSettingButton.setText("Theme | Red");
					} else if(themeSetting == "blue") {
						themeSettingButton.setText("Theme | Blue");
					} else if(themeSetting == "purple") {
						themeSettingButton.setText("Theme | Purple");
					} else if(themeSetting == "white") {
						themeSettingButton.setText("Theme | White");
					} else if(themeSetting == "black") {
						themeSettingButton.setText("Theme | Black");
					}
					themeSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(themeSetting == "green") {
							themeSetting = "red";
							themeSettingButton.setText("Theme | Red");
							themeSetup = "off";
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.setupTheme();
						} else if(themeSetting == "red") {
							themeSetting = "blue";
							themeSettingButton.setText("Theme | Blue");
							themeSetup = "off";
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.setupTheme();
						} else if(themeSetting == "blue") {
							themeSetting = "purple";
							themeSettingButton.setText("Theme | Purple");
							themeSetup = "off";
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.setupTheme();
						} else if(themeSetting == "purple") {
							themeSetting = "white";
							themeSettingButton.setText("Theme | White");
							themeSetup = "off";
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.setupTheme();
						} else if(themeSetting == "white") {
							themeSetting = "black";
							themeSettingButton.setText("Theme | Black");
							themeSetup = "off";
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.setupTheme();
						} else if(themeSetting == "black") {
							themeSetting = "green";
							themeSettingButton.setText("Theme | Green");
							themeSetup = "off";
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.setupTheme();
						}
					}
					}));
					
					var showNewsSettingButton = clientButton("Show news", "Show news at start");
					if(showNewsSetting == "on") {
						showNewsSettingButton.setText("Show news | ON");
					} else if(showNewsSetting == "off") {
						showNewsSettingButton.setText("Show news | OFF");
					}
					showNewsSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(showNewsSetting == "on") {
							showNewsSetting = "off";
							showNewsSettingButton.setText("Show news | OFF");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(showNewsSetting == "off") {
							showNewsSetting = "on";
							showNewsSettingButton.setText("Show news | ON");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						}
					}
					}));
					
					var menuAnimationsSettingButton = clientButton("Menu animations", "Show menu animations");
					if(menuAnimationsSetting == "on") {
						menuAnimationsSettingButton.setText("Menu animations | ON");
					} else if(menuAnimationsSetting == "off") {
						menuAnimationsSettingButton.setText("Menu animations | OFF");
					}
					menuAnimationsSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(menuAnimationsSetting == "on") {
							menuAnimationsSetting = "off";
							menuAnimationsSettingButton.setText("Menu animations | OFF");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(menuAnimationsSetting == "off") {
							menuAnimationsSetting = "on";
							menuAnimationsSettingButton.setText("Menu animations | ON");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						}
					}
					}));
					
					var playMusicSettingButton = clientButton("Automatically play music", "Automatically play music");
					if(playMusicSetting == "on") playMusicSetting = "off";
					/*if(playMusicSetting == "on") {
						playMusicSettingButton.setText("Automatically play music | NORMAL");
					} else */if(playMusicSetting == "shuffle") {
						playMusicSettingButton.setText("Automatically play music | SHUFFLE");
					} else if(playMusicSetting == "off") {
						playMusicSettingButton.setText("Automatically play music | OFF");
					}
					playMusicSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						//if(playMusicSetting == "on") {
						if(playMusicSetting == "off") {
							playMusicSetting = "shuffle";
							playMusicSettingButton.setText("Music | SHUFFLE");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							if(mp != null) {
								mp.stop();
								mp = null;
							}
							VertexClientPE.resetMusic();
							VertexClientPE.playMusic();
						} else if(playMusicSetting == "shuffle") {
							playMusicSetting = "off";
							playMusicSettingButton.setText("Music | OFF");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.resetMusic();
							if(mp != null) {
								mp.stop();
								mp = null;
							}
							musicText = "None";
						}/* else if(playMusicSetting == "off") {
							playMusicSetting = "on";
							playMusicSettingButton.setText("Music | NORMAL");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
							VertexClientPE.resetMusic();
							//VertexClientPE.playMusic();
							print("This mode is not ready yet!");
						}*/
					}
					}));
					
					var sizeSettingButton = clientButton("Size setting", "Change menu size to fit your screen size better");
					if(sizeSetting == "normal") {
						sizeSettingButton.setText("Size setting | NORMAL");
					} else if(sizeSetting == "small") {
						sizeSettingButton.setText("Size setting | SMALL");
					}
					sizeSettingButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						if(sizeSetting == "normal") {
							sizeSetting = "small";
							customHeight = topBarHeight;
							sizeSettingButton.setText("Size setting | SMALL");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						} else if(sizeSetting == "small") {
							sizeSetting = "normal";
							customHeight = customHeight;
							sizeSettingButton.setText("Size setting | NORMAL");
							VertexClientPE.saveMainSettings();
							VertexClientPE.loadMainSettings();
						}
						VertexClientPE.toast("Now restart your launcher to make it work!");
					}
					}));
					
					settingsMenuLayout.addView(hacksListModeSettingButton);
					settingsMenuLayout.addView(mainButtonPositionSettingButton);
					settingsMenuLayout.addView(themeSettingButton);
					settingsMenuLayout.addView(showNewsSettingButton);
					
					settingsMenuLayout.addView(menuAnimationsSettingButton);
					settingsMenuLayout.addView(playMusicSettingButton);
					settingsMenuLayout.addView(sizeSettingButton);

                    settingsMenu = new widget.PopupWindow(settingsMenuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
                    settingsMenu.setBackgroundDrawable(backgroundGradient());
                    settingsMenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
                } catch(error) {
                    print('An error occured: ' + error);
					VertexClientPE.showBugReportDialog(error);
                }
            }
        }));
}

function informationScreen() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
                    var informationMenuLayout = new LinearLayout(ctx);
                    informationMenuLayout.setOrientation(1);
                    informationMenuLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var informationTitle = clientTextView("Information", true);
					informationTitle.setTextSize(25);
					informationTitle.setGravity(android.view.Gravity.CENTER);
					informationMenuLayout.addView(informationTitle);
					
					var informationText = clientTextView("© peacestorm 2015 - 2016. Some rights reserved.\nThanks to @Herqux_ and @MyNameIsTriXz for graphic designs.", true);
					
					var websiteButton = clientButton("Website", "Go to the official Vertex Client PE website");
					websiteButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg){
						ModPE.goToURL("http://Vertex-Client.github.io/");
					}
					}));
					
					informationMenuLayout.addView(informationText);
					informationMenuLayout.addView(websiteButton);

                    informationMenu = new widget.PopupWindow(informationMenuLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
                    informationMenu.setBackgroundDrawable(backgroundGradient());
                    informationMenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
                } catch(error) {
                    print('An error occurred: ' + error);
                }
            }
        }));
}

function addonScreen() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var addonMenuLayout = new LinearLayout(ctx);
                    addonMenuLayout.setOrientation(1);
                    addonMenuLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var addonMenuLayoutScroll = new ScrollView(ctx);
					
					var addonMenuLayout1 = new LinearLayout(ctx);
                    addonMenuLayout1.setOrientation(1);
                    addonMenuLayout1.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					addonMenuLayoutScroll.addView(addonMenuLayout);
					addonMenuLayout1.addView(addonMenuLayoutScroll);
					
					var addonTitle = clientTextView("Addons", true);
					addonTitle.setTextSize(25);
					addonTitle.setGravity(android.view.Gravity.CENTER);
					addonMenuLayout.addView(addonTitle);
					
					if(VertexClientPE.addons.length == 0) {
						var noAddonsText = clientTextView("You don't have any addons!");
						addonMenuLayout.addView(noAddonsText);
						noAddonsText.setGravity(android.view.Gravity.CENTER);
					}
					
					VertexClientPE.addons.forEach(function(element, index, array) {
						addonMenuLayout.addView(new addonButton(element));
					});

                    addonMenu = new widget.PopupWindow(addonMenuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
                    addonMenu.setBackgroundDrawable(backgroundGradient());
                    addonMenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
                } catch(error) {
                    print('An error occurred: ' + error);
                }
            }
        }));
}

VertexClientPE.showTopBar = function() {
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					var topBarLayout = new LinearLayout(ctx);
					topBarLayout.setOrientation(LinearLayout.HORIZONTAL);
					topBarLayout.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					
					var topBarLayoutLeft = new LinearLayout(ctx);
					topBarLayoutLeft.setOrientation(1);
					topBarLayoutLeft.setGravity(android.view.Gravity.LEFT);
					topBarLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					topBarLayout.addView(topBarLayoutLeft);
					
					var topBarLayoutCenter = new LinearLayout(ctx);
					topBarLayoutCenter.setOrientation(1);
					topBarLayoutCenter.setGravity(android.view.Gravity.CENTER_HORIZONTAL);
					topBarLayoutCenter.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 2, LinearLayout.LayoutParams.WRAP_CONTENT));
					topBarLayout.addView(topBarLayoutCenter);
					
					var topBarLayoutRight = new LinearLayout(ctx);
					topBarLayoutRight.setOrientation(1);
					topBarLayoutRight.setGravity(android.view.Gravity.RIGHT);
					topBarLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.widthPixels / 4, LinearLayout.LayoutParams.WRAP_CONTENT));
					topBarLayout.addView(topBarLayoutRight);
					
					var moreButton = clientButton("...", null, null, true);
					moreButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 10, display.heightPixels / 10));
					moreButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							VertexClientPE.showMoreDialog();
						}
					}));
					topBarLayoutLeft.addView(moreButton);
					
					var exitButton = clientButton("X", null, null, true);
					exitButton.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 10, display.heightPixels / 10));
					exitButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function(viewarg) {
							topBar.dismiss();
							vertexclientpecombatmenu.dismiss(); //Close
							vertexclientpebuildingmenu.dismiss(); //Close
							vertexclientpemovementmenu.dismiss(); //Close
							vertexclientpechatmenu.dismiss(); //Close
							vertexclientpemiscmenu.dismiss(); //Close
							//vertexclientpefavmenu.dismiss(); //Close
							showMenuButton();
							showHacksList();
						}
					}));
					topBarLayoutRight.addView(exitButton);
					
					var logo4 = android.util.Base64.decode(logoImage, 0);
					var logoViewer4 = new widget.ImageView(ctx);
					logoViewer4.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(logo4, 0, logo4.length));
					topBarLayoutCenter.addView(logoViewer4);
					
					topBar = new widget.PopupWindow(topBarLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), topBarHeight);
					/*topBar.setBackgroundDrawable(backgroundGradient());
					if(themeSetting == "red") {
						topBar.setBackgroundDrawable(backgroundRedClientGUI);
					}if(themeSetting == "blue") {
						topBar.setBackgroundDrawable(backgroundBlueClientGUI);
					}if(themeSetting == "purple") {
						topBar.setBackgroundDrawable(backgroundPurpleClientGUI);
					}*/
					topBar.setBackgroundDrawable(backgroundGradient());
					topBar.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} catch(error) {
					print('An error occurred: ' + error);
			}
		}
	}));
}

var vertexclientpemenu = null;
var menuBtn = null;

var combattpopx = screenWidth / 3, combattpopy = 0;
var combatmX, combatmY;
var combatdown = false;

var buildingtpopx = Math.floor(screenWidth / 3 + screenWidth / 3), buildingtpopy = screenHeight / 2 - customHeight;
var buildingmX, buildingmY;
var buildingdown = false;

var movementtpopx = screenWidth / 3, movementtpopy = screenHeight / 2 - customHeight;
var movementmX, movementmY;
var movementdown = false;

var chattpopx = 0, chattpopy = 0;
var chatmX, chatmY;
var chatdown = false;

var misctpopx = 0, misctpopy = screenHeight / 2 - customHeight;
var miscmX, miscmY;
var miscdown = false;

var favtpopx = Math.floor(screenWidth / 3 + screenWidth / 3), favtpopy = 0;
var favmX, favmY;
var favdown = false;

var combatMenuShown = false;

VertexClientPE.showCombatMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				VertexClientPE.loadMainSettings();

                vertexclientpecombatmenu = new widget.PopupWindow(ctx);
                var combatMenuLayout1 = new LinearLayout(ctx);
                var combatMenuScrollView = new ScrollView(ctx);
                var combatMenuLayout = new LinearLayout(ctx);
				
                combatMenuLayout.setOrientation(1);
                combatMenuLayout1.setOrientation(1);
				
				combatMenuScrollView.addView(combatMenuLayout);
				
				var combat = new categoryTitle(combatName, true);
				var combatSettings = combat.getLeftButton();
				var combatTitle = combat.getMiddleButton();
				var combatArrow = combat.getRightButton();
				
				combatSettings.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function() {
						VertexClientPE.showCategoryDialog(combat, combatName, 0);
					}
				}));
				
				VertexClientPE.addView(combatMenuLayout1, combat);
				
				if(combatMenuShown == true) {
					combatArrow.setText("△");
					combatMenuLayout1.addView(combatMenuScrollView);
				}else if(combatMenuShown == false) {
					combatArrow.setText("▽");
				}
				
				combatArrow.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(combatMenuShown == true) {
							combatMenuLayout1.removeView(combatMenuScrollView);
							combatArrow.setText("▽");
							combatMenuShown = false;
						}else if(combatMenuShown == false) {
							combatMenuLayout1.addView(combatMenuScrollView);
							combatArrow.setText("△");
							combatMenuShown = true;
						}
                    }
                });
                combatTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        combatdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                combatTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!combatdown) {
                            combatmX = e.getX()
                            combatmY = e.getY()
                        }
                        if(combatdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - combatmX) * -1 / 10;
                                var Y = parseInt(e.getY() - combatmY) * -1 / 10;
                                combattpopx = combattpopx + X;
                                combattpopy = combattpopy + Y;
                                vertexclientpecombatmenu.update(parseInt(combattpopx), parseInt(combattpopy), -1, -1);
                            }
                            if(a == 1) combatdown = false;
                        }
                        return false;
                    }
                }));

				VertexClientPE.modules.forEach(function(element, index, array) {
					if(VertexClientPE.modules[index].category == VertexClientPE.category.COMBAT && (VertexClientPE.modules[index].type == "Mod" || VertexClientPE.modules[index].type == "Special")) {
						combatMenuLayout.addView(new modButton(VertexClientPE.modules[index]));
					}
				});

                vertexclientpecombatmenu.setContentView(combatMenuLayout1);
				vertexclientpecombatmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpecombatmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
				vertexclientpecombatmenu.setHeight(screenHeight / 2 - customHeight);
				if(menuAnimationsSetting == "on") {
					vertexclientpecombatmenu.setAnimationStyle(android.R.style.Animation_Translucent);
				}
                vertexclientpecombatmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, combattpopx, combattpopy);

            } catch(error) {
                print("Error: " + error);
				VertexClientPE.showBugReportDialog(error);
            }
        }
    });
}

var buildingMenuShown = false;

VertexClientPE.showBuildingMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				VertexClientPE.loadMainSettings();

                vertexclientpebuildingmenu = new widget.PopupWindow(ctx);
                var buildingMenuLayout1 = new LinearLayout(ctx);
                var buildingMenuScrollView = new ScrollView(ctx);
                var buildingMenuLayout = new LinearLayout(ctx);
				
                buildingMenuLayout.setOrientation(1);
                buildingMenuLayout1.setOrientation(1);
				
				buildingMenuScrollView.addView(buildingMenuLayout);
				
				var building = new categoryTitle(buildingName, true);
				var buildingSettings = building.getLeftButton();
				var buildingTitle = building.getMiddleButton();
				var buildingArrow = building.getRightButton();
				
				buildingSettings.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function() {
						VertexClientPE.showCategoryDialog(building, buildingName, 1);
					}
				}));
				
				VertexClientPE.addView(buildingMenuLayout1, building);
				
				if(buildingMenuShown == true) {
					buildingArrow.setText("△");
					buildingMenuLayout1.addView(buildingMenuScrollView);
				}else if(buildingMenuShown == false) {
					buildingArrow.setText("▽");
				}
				
				buildingArrow.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(buildingMenuShown == true) {
							buildingMenuLayout1.removeView(buildingMenuScrollView);
							buildingArrow.setText("▽");
							buildingMenuShown = false;
						}else if(buildingMenuShown == false) {
							buildingMenuLayout1.addView(buildingMenuScrollView);
							buildingArrow.setText("△");
							buildingMenuShown = true;
						}
                    }
                });
                buildingTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        buildingdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                buildingTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!buildingdown) {
                            buildingmX = e.getX()
                            buildingmY = e.getY()
                        }
                        if(buildingdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - buildingmX) * -1 / 10;
                                var Y = parseInt(e.getY() - buildingmY) * -1 / 10;
                                buildingtpopx = buildingtpopx + X;
                                buildingtpopy = buildingtpopy + Y;
                                vertexclientpebuildingmenu.update(parseInt(buildingtpopx), parseInt(buildingtpopy), -1, -1);
                            }
                            if(a == 1) buildingdown = false;
                        }
                        return false;
                    }
                }));

                VertexClientPE.modules.forEach(function(element, index, array) {
					if(VertexClientPE.modules[index].category == VertexClientPE.category.BUILDING && (VertexClientPE.modules[index].type == "Mod" || VertexClientPE.modules[index].type == "Special")) {
						buildingMenuLayout.addView(new modButton(VertexClientPE.modules[index]));
					}
				});


                vertexclientpebuildingmenu.setContentView(buildingMenuLayout1);
				vertexclientpebuildingmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpebuildingmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpebuildingmenu.setHeight(screenHeight / 2 - customHeight);
				if(menuAnimationsSetting == "on") {
					vertexclientpebuildingmenu.setAnimationStyle(android.R.style.Animation_Translucent);
				}
                vertexclientpebuildingmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, buildingtpopx, buildingtpopy);

            } catch(error) {
                print("Error: " + error);
				VertexClientPE.showBugReportDialog(error);
            }
        }
    });
}

var movementMenuShown = false;

VertexClientPE.showMovementMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				VertexClientPE.loadMainSettings();

                vertexclientpemovementmenu = new widget.PopupWindow(ctx);
                var movementMenuLayout1 = new LinearLayout(ctx);
                var movementMenuScrollView = new ScrollView(ctx);
                movementMenuLayout = new LinearLayout(ctx);
				
                movementMenuLayout.setOrientation(1);
                movementMenuLayout1.setOrientation(1);
				
				movementMenuScrollView.addView(movementMenuLayout);
				
				var movement = new categoryTitle(movementName, true);
				var movementSettings = movement.getLeftButton();
				var movementTitle = movement.getMiddleButton();
				var movementArrow = movement.getRightButton();
				
				movementSettings.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function() {
						VertexClientPE.showCategoryDialog(movement, movementName, 2);
					}
				}));
				
				VertexClientPE.addView(movementMenuLayout1, movement);
				
				if(movementMenuShown == true) {
					movementArrow.setText("△");
					movementMenuLayout1.addView(movementMenuScrollView);
				}else if(movementMenuShown == false) {
					movementArrow.setText("▽");
				}
				
				movementArrow.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(movementMenuShown == true) {
							movementMenuLayout1.removeView(movementMenuScrollView);
							movementArrow.setText("▽");
							movementMenuShown = false;
						}else if(movementMenuShown == false) {
							movementMenuLayout1.addView(movementMenuScrollView);
							movementArrow.setText("△");
							movementMenuShown = true;
						}
                    }
                });
                movementTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        movementdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                movementTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!movementdown) {
                            movementmX = e.getX()
                            movementmY = e.getY()
                        }
                        if(movementdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - movementmX) * -1 / 10;
                                var Y = parseInt(e.getY() - movementmY) * -1 / 10;
                                movementtpopx = movementtpopx + X;
                                movementtpopy = movementtpopy + Y;
                                vertexclientpemovementmenu.update(parseInt(movementtpopx), parseInt(movementtpopy), -1, -1);
                            }
                            if(a == 1) movementdown = false;
                        }
                        return false;
                    }
                }));

				VertexClientPE.modules.forEach(function(element, index, array) {
					if(VertexClientPE.modules[index].category == VertexClientPE.category.MOVEMENT && (VertexClientPE.modules[index].type == "Mod" || VertexClientPE.modules[index].type == "Special")) {
						movementMenuLayout.addView(new modButton(VertexClientPE.modules[index]));
					}
				});

                vertexclientpemovementmenu.setContentView(movementMenuLayout1);
				vertexclientpemovementmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpemovementmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpemovementmenu.setHeight(screenHeight / 2 - customHeight);
				if(menuAnimationsSetting == "on") {
					vertexclientpemovementmenu.setAnimationStyle(android.R.style.Animation_Translucent);
				}
                vertexclientpemovementmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, movementtpopx, movementtpopy);

            } catch(error) {
                print("Error: " + error);
				VertexClientPE.showBugReportDialog(error);
            }
        }
    });
}

var chatMenuShown = false;

VertexClientPE.showChatMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				VertexClientPE.loadMainSettings();

                vertexclientpechatmenu = new widget.PopupWindow(ctx);
                var chatMenuLayout1 = new LinearLayout(ctx);
                var chatMenuScrollView = new ScrollView(ctx);
                var chatMenuLayout = new LinearLayout(ctx);
				
                chatMenuLayout.setOrientation(1);
                chatMenuLayout1.setOrientation(1);
				
				chatMenuScrollView.addView(chatMenuLayout);
				
				var chat = new categoryTitle(chatName, true);
				var chatSettings = chat.getLeftButton();
				var chatTitle = chat.getMiddleButton();
				var chatArrow = chat.getRightButton();
				
				chatSettings.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function() {
						VertexClientPE.showCategoryDialog(chat, chatName, 3);
					}
				}));
				
				VertexClientPE.addView(chatMenuLayout1, chat);
				
				if(chatMenuShown == true) {
					chatArrow.setText("△");
					chatMenuLayout1.addView(chatMenuScrollView);
				}else if(chatMenuShown == false) {
					chatArrow.setText("▽");
				}

				chatArrow.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(chatMenuShown == true) {
							chatMenuLayout1.removeView(chatMenuScrollView);
							chatArrow.setText("▽");
							chatMenuShown = false;
						}else if(chatMenuShown == false) {
							chatMenuLayout1.addView(chatMenuScrollView);
							chatArrow.setText("△");
							chatMenuShown = true;
						}
                    }
                });
                chatTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        chatdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                chatTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!chatdown) {
                            chatmX = e.getX()
                            chatmY = e.getY()
                        }
                        if(chatdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - chatmX) * -1 / 10;
                                var Y = parseInt(e.getY() - chatmY) * -1 / 10;
                                chattpopx = chattpopx + X;
                                chattpopy = chattpopy + Y;
                                vertexclientpechatmenu.update(parseInt(chattpopx), parseInt(chattpopy), -1, -1);
                            }
                            if(a == 1) chatdown = false;
                        }
                        return false;
                    }
                }));
				
				VertexClientPE.modules.forEach(function(element, index, array) {
					if(VertexClientPE.modules[index].category == VertexClientPE.category.CHAT && (VertexClientPE.modules[index].type == "Mod" || VertexClientPE.modules[index].type == "Special")) {
						chatMenuLayout.addView(new modButton(VertexClientPE.modules[index]));
					}
				});

                vertexclientpechatmenu.setContentView(chatMenuLayout1);
                vertexclientpechatmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpechatmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpechatmenu.setHeight(screenHeight / 2 - customHeight);
				if(menuAnimationsSetting == "on") {
					vertexclientpechatmenu.setAnimationStyle(android.R.style.Animation_Translucent);
				}
                vertexclientpechatmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, chattpopx, chattpopy);

            } catch(error) {
                print("Error: " + error);
				VertexClientPE.showBugReportDialog(error);
            }
        }
    });
}

var miscMenuShown = false;

VertexClientPE.showMiscMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				VertexClientPE.loadMainSettings();

                vertexclientpemiscmenu = new widget.PopupWindow(ctx);
                var miscMenuLayout1 = new LinearLayout(ctx);
                var miscMenuScrollView = new ScrollView(ctx);
                var miscMenuLayout = new LinearLayout(ctx);
				
                miscMenuLayout.setOrientation(1);
                miscMenuLayout1.setOrientation(1);
				
				miscMenuScrollView.addView(miscMenuLayout);
				
				var misc = new categoryTitle(miscName, true);
				var miscSettings = misc.getLeftButton();
				var miscTitle = misc.getMiddleButton();
				var miscArrow = misc.getRightButton();
				
				miscSettings.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function() {
						VertexClientPE.showCategoryDialog(misc, miscName, 4);
					}
				}));
				
				VertexClientPE.addView(miscMenuLayout1, misc);
				
				if(miscMenuShown == true) {
					miscArrow.setText("△");
					miscMenuLayout1.addView(miscMenuScrollView);
				}else if(miscMenuShown == false) {
					miscArrow.setText("▽");
				}

				miscArrow.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(miscMenuShown == true) {
							miscMenuLayout1.removeView(miscMenuScrollView);
							miscArrow.setText("▽");
							miscMenuShown = false;
						}else if(miscMenuShown == false) {
							miscMenuLayout1.addView(miscMenuScrollView);
							miscArrow.setText("△");
							miscMenuShown = true;
						}
                    }
                });
                miscTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        miscdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                miscTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!miscdown) {
                            miscmX = e.getX()
                            miscmY = e.getY()
                        }
                        if(miscdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - miscmX) * -1 / 10;
                                var Y = parseInt(e.getY() - miscmY) * -1 / 10;
                                misctpopx = misctpopx + X;
                                misctpopy = misctpopy + Y;
                                vertexclientpemiscmenu.update(parseInt(misctpopx), parseInt(misctpopy), -1, -1);
                            }
                            if(a == 1) miscdown = false;
                        }
                        return false;
                    }
                }));

                VertexClientPE.modules.forEach(function(element, index, array) {
					if(VertexClientPE.modules[index].category == VertexClientPE.category.MISC && (VertexClientPE.modules[index].type == "Mod" || VertexClientPE.modules[index].type == "Special")) {
						miscMenuLayout.addView(new modButton(VertexClientPE.modules[index]));
					}
				});

                vertexclientpemiscmenu.setContentView(miscMenuLayout1);
                vertexclientpemiscmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpemiscmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpemiscmenu.setHeight(screenHeight / 2 - customHeight);
				if(menuAnimationsSetting == "on") {
					vertexclientpemiscmenu.setAnimationStyle(android.R.style.Animation_Translucent);
				}
                vertexclientpemiscmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, misctpopx, misctpopy);

            } catch(error) {
                print("Error: " + error);
				VertexClientPE.showBugReportDialog(error);
            }
        }
    });
}

var favMenuShown = false;

VertexClientPE.showFavMenu = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				VertexClientPE.loadMainSettings();

                vertexclientpefavmenu = new widget.PopupWindow(ctx);
                var favMenuLayout1 = new LinearLayout(ctx);
                var favMenuScrollView = new ScrollView(ctx);
                favMenuLayout = new LinearLayout(ctx);
				
                favMenuLayout.setOrientation(1);
                favMenuLayout1.setOrientation(1);
				
				favMenuScrollView.addView(favMenuLayout);
				
				var favTitleLayout = new LinearLayout(ctx);
				favTitleLayout.setOrientation(LinearLayout.HORIZONTAL);
				
				var favTitleLayoutLeft = new LinearLayout(ctx);
				favTitleLayoutLeft.setOrientation(1);
				favTitleLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 2.5, display.heightPixels / 20));
				favTitleLayout.addView(favTitleLayoutLeft);
				
				var favTitleLayoutRight = new LinearLayout(ctx);
				favTitleLayoutRight.setOrientation(1);
				favTitleLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 2 - display.heightPixels / 2.5, display.heightPixels / 20));
				favTitleLayout.addView(favTitleLayoutRight);
				
				if(themeSetting == "green") {
					var favTitle = greenSubTitle("Favourite", true);
				}if(themeSetting == "red") {
					var favTitle = redSubTitle("Favourite", true);
				}if(themeSetting == "blue") {
					var favTitle = blueSubTitle("Favourite", true);
				}if(themeSetting == "purple") {
					var favTitle = purpleSubTitle("Favourite", true);
				}
				favTitle.setAlpha(0.54);
				favTitle.setGravity(android.view.Gravity.CENTER);
				favTitle.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2.5, display.heightPixels / 20));
				favTitleLayoutLeft.addView(favTitle);
				
				var favArrow = clientButton("*");
				favArrow.setAlpha(0.54);
				favArrow.setGravity(android.view.Gravity.CENTER);
				favArrow.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2 - display.heightPixels / 2.5, display.heightPixels / 20));
				favTitleLayoutRight.addView(favArrow);
				
				favMenuLayout1.addView(favTitleLayout);
				
				if(favMenuShown == true) {
					favArrow.setText("△");
					favMenuLayout1.addView(favMenuScrollView);
				}else if(favMenuShown == false) {
					favArrow.setText("▽");
				}
				
				var favText = clientTextView("Not available yet!", true);

				favArrow.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(favMenuShown == true) {
							favMenuLayout1.removeView(favMenuScrollView);
							favArrow.setText("▽");
							favMenuShown = false;
						}else if(favMenuShown == false) {
							favMenuLayout1.addView(favMenuScrollView);
							favArrow.setText("△");
							favMenuShown = true;
						}
                    }
                });
                favTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        favdown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                favTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!favdown) {
                            favmX = e.getX()
                            favmY = e.getY()
                        }
                        if(favdown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - favmX) * -1 / 10;
                                var Y = parseInt(e.getY() - favmY) * -1 / 10;
                                favtpopx = favtpopx + X;
                                favtpopy = favtpopy + Y;
                                vertexclientpefavmenu.update(parseInt(favtpopx), parseInt(favtpopy), -1, -1);
                            }
                            if(a == 1) favdown = false;
                        }
                        return false;
                    }
                }));

                favMenuLayout.addView(favText);

                vertexclientpefavmenu.setContentView(favMenuLayout1);
                vertexclientpefavmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpefavmenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpefavmenu.setHeight(screenHeight / 2 - customHeight);
				if(menuAnimationsSetting == "on") {
					vertexclientpefavmenu.setAnimationStyle(android.R.style.Animation_Translucent);
				}
                vertexclientpefavmenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, favtpopx, favtpopy);

            } catch(error) {
                print("Error: " + error);
				VertexClientPE.showBugReportDialog(error);
            }
        }
    });
}

/*VertexClientPE.showNavigator = function() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
				
				VertexClientPE.loadMainSettings();

                navigator = new widget.PopupWindow(ctx);
				var navigatorGridLayout = new widget.GridLayout(ctx);
                var navigatorMenuLayout1 = new LinearLayout(ctx);
                var navigatorMenuScrollView = new ScrollView(ctx);
                navigatorMenuLayout = new LinearLayout(ctx);
				
                navigatorMenuLayout.setOrientation(1);
                navigatorMenuLayout1.setOrientation(1);
				
				navigatorMenuLayout.addView(navigatorGridLayout)
				navigatorMenuScrollView.addView(navigatorMenuLayout);
				
				var navigatorTitleLayout = new LinearLayout(ctx);
				navigatorTitleLayout.setOrientation(LinearLayout.HORIZONTAL);
				
				var navigatorTitleLayoutLeft = new LinearLayout(ctx);
				navigatorTitleLayoutLeft.setOrientation(1);
				navigatorTitleLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 2.5, display.heightPixels / 20));
				navigatorTitleLayout.addView(navigatorTitleLayoutLeft);
				
				var navigatorTitleLayoutRight = new LinearLayout(ctx);
				navigatorTitleLayoutRight.setOrientation(1);
				navigatorTitleLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(display.heightPixels / 2 - display.heightPixels / 2.5, display.heightPixels / 20));
				navigatorTitleLayout.addView(navigatorTitleLayoutRight);
				
				if(themeSetting == "green") {
					var navigatorTitle = greenSubTitle("Favourite", true);
				}if(themeSetting == "red") {
					var navigatorTitle = redSubTitle("Favourite", true);
				}if(themeSetting == "blue") {
					var navigatorTitle = blueSubTitle("Favourite", true);
				}if(themeSetting == "purple") {
					var navigatorTitle = purpleSubTitle("Favourite", true);
				}
				navigatorTitle.setAlpha(0.54);
				navigatorTitle.setGravity(android.view.Gravity.CENTER);
				navigatorTitle.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2.5, display.heightPixels / 20));
				navigatorTitleLayoutLeft.addView(navigatorTitle);
				
				var navigatorArrow = clientButton("*");
				navigatorArrow.setAlpha(0.54);
				navigatorArrow.setGravity(android.view.Gravity.CENTER);
				navigatorArrow.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 2 - display.heightPixels / 2.5, display.heightPixels / 20));
				navigatorTitleLayoutRight.addView(navigatorArrow);
				
				navigatorMenuLayout1.addView(navigatorTitleLayout);
				
				if(navigatorMenuShown == true) {
					navigatorArrow.setText("△");
					navigatorMenuLayout1.addView(navigatorMenuScrollView);
				}else if(navigatorMenuShown == false) {
					navigatorArrow.setText("▽");
				}
				
				var navigatorSearchBar = new widget.EditText(ctx);
				navigatorSearchBar.addTextChangedListener(new android.text.TextWatcher() {
					onTextChanged: function() {
						modules.forEach(function(name){
							if(name+"".toLowerCase().indexOf(navigatorSearchBar.getText()+"".toLowerCase())>-1)Display();
						});
					}
				}

				navigatorArrow.setOnClickListener(new android.view.View.OnClickListener() {
                    onClick: function(viewarg) {
						if(navigatorMenuShown == true) {
							navigatorMenuLayout1.removeView(navigatorMenuScrollView);
							navigatorArrow.setText("▽");
							navigatorMenuShown = false;
						}else if(navigatorMenuShown == false) {
							navigatorMenuLayout1.addView(navigatorMenuScrollView);
							navigatorArrow.setText("△");
							navigatorMenuShown = true;
						}
                    }
                });
                navigatorTitle.setOnLongClickListener(new android.view.View.OnLongClickListener() {
                    onLongClick: function(v, t) {
                        navigatordown = true;
                        ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
                        widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> Now you can move the menu!"), 0).show();
                        return true;
                    }
                });
                navigatorTitle.setOnTouchListener(new android.view.View.OnTouchListener({
                    onTouch: function(v, e) {
                        if(!navigatordown) {
                            navigatormX = e.getX()
                            navigatormY = e.getY()
                        }
                        if(navigatordown) {
                            var a = e.getAction()
                            if(a == 2) {
                                var X = parseInt(e.getX() - navigatormX) * -1 / 10;
                                var Y = parseInt(e.getY() - navigatormY) * -1 / 10;
                                navigatortpopx = navigatortpopx + X;
                                navigatortpopy = navigatortpopy + Y;
                                vertexclientpenavigatormenu.update(parseInt(navigatortpopx), parseInt(navigatortpopy), -1, -1);
                            }
                            if(a == 1) navigatordown = false;
                        }
                        return false;
                    }
                }));

                navigatorMenuLayout.addView(navigatorText);

                vertexclientpenavigatormenu.setContentView(navigatorMenuLayout1);
                vertexclientpenavigatormenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                vertexclientpenavigatormenu.setWidth(LinearLayout.LayoutParams.WRAP_CONTENT);
                vertexclientpenavigatormenu.setHeight(screenHeight);
				if(menuAnimationsSetting == "on") {
					vertexclientpenavigatormenu.setAnimationStyle(android.R.style.Animation_Translucent);
				}
                vertexclientpenavigatormenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.RIGHT, navigatortpopx, navigatortpopy);

            } catch(error) {
                print("Error: " + error);
				VertexClientPE.showBugReportDialog(error);
            }
        }
    });
}*/

function changeColor(view) {
	if(view != null) {
		view.setColorFilter(new android.graphics.LightingColorFilter(android.graphics.Color.RED, 0));
	}
}

VertexClientPE.showLSD = function() {
	ctx.runOnUiThread(new java.lang.Runnable() {
        run: function() {
            try {
				lsdLayout = new LinearLayout(ctx);
				lsdMenu = new widget.PopupWindow(lsdLayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
				lsdMenu.setTouchable(false);
				lsdMenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GREEN));
				lsdMenu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
			} catch(e) {
				print(e);
			}
		}
	})
}

function showMenuButton() {
	VertexClientPE.loadMainSettings();
	var layout = new LinearLayout(ctx);
    layout.setOrientation(1);
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    menuBtn = new Button(ctx);
    menuBtn.setTextColor(android.graphics.Color.WHITE); //Color
	menuBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 10, display.heightPixels / 10));
	menuBtn.setBackgroundDrawable(iconClientGUI);
	menuBtn.setAlpha(0.54);
    menuBtn.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
		if(VertexClientPE.playerIsInGame) {
			if(hacksList != null) {
				hacksList.dismiss();
			}
			GUI.dismiss();
			VertexClientPE.showCombatMenu();
			VertexClientPE.showBuildingMenu();
			VertexClientPE.showMovementMenu();
			VertexClientPE.showChatMenu();
			VertexClientPE.showMiscMenu();
			VertexClientPE.showTopBar();
		} else {
			ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(37);
		    widget.Toast.makeText(ctx, new android.text.Html.fromHtml("<b>Vertex Client PE</b> You need to be in game to open the menu!"), 0).show();
		}
    }
    }));
	menuBtn.setOnTouchListener(new android.view.View.OnTouchListener() {
        onTouch: function(v, event) {
            var action = event.getActionMasked();
            if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP) {
                var bNP = iconClientGUI;
                bNP.setFilterBitmap(false);
                bNP.setAntiAlias(false);
                menuBtn.setBackgroundDrawable(bNP);
            } else {
                var bNP = iconClickedClientGUI;
                bNP.setFilterBitmap(false);
                bNP.setAntiAlias(false);
                menuBtn.setBackgroundDrawable(bNP);
            }
            return false;
        }
    });
    layout.addView(menuBtn);
     
    GUI = new widget.PopupWindow(layout, dip2px(40), dip2px(40));
	if(menuAnimationsSetting == "on") {
		GUI.setAnimationStyle(android.R.style.Animation_Translucent);
	}
    GUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
	if(mainButtonPositionSetting == "top-right") {
		GUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 90, 0);
	}if(mainButtonPositionSetting == "bottom-right") {
		GUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 90, 0);
	}
}

function showAccountManagerButton() {
	VertexClientPE.loadMainSettings();
	var layout = new LinearLayout(ctx);
    layout.setOrientation(1);
	var display = new android.util.DisplayMetrics();
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);
    var menuBtn = clientButton("AM");
	menuBtn.setLayoutParams(new LinearLayout.LayoutParams(display.heightPixels / 10, display.heightPixels / 10));
    menuBtn.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
	if(hacksList != null) {
		hacksList.dismiss();
	}
	GUI.dismiss();
	accountManagerGUI.dismiss();
	VertexClientPE.showAccountManager();
	exitAccountManager();
    }
    }));
    layout.addView(menuBtn);
     
    accountManagerGUI = new widget.PopupWindow(layout, dip2px(40), dip2px(40));
	if(menuAnimationsSetting == "on") {
		accountManagerGUI.setAnimationStyle(android.R.style.Animation_Translucent);
	}
    accountManagerGUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
	if(mainButtonPositionSetting == "top-right") {
		accountManagerGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 90, 0);
	}if(mainButtonPositionSetting == "bottom-right") {
		accountManagerGUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 90, 0);
	}
}

VertexClientPE.clientTick = function() {
    ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            new android.os.Handler()
                .postDelayed(new java.lang.Runnable({
                    run: function() {
						try{
							if(GUI != null && GUI.isShowing() == false && (vertexclientpemiscmenu == null || vertexclientpemiscmenu.isShowing() == false) && (settingsMenu == null || settingsMenu.isShowing() == false) && (informationMenu == null || informationMenu.isShowing() == false) && (accountManager == null || accountManager.isShowing() == false) && (addonMenu == null || addonMenu.isShowing() == false)) {
								VertexClientPE.isRemote = true;
								if(Launcher.isBlockLauncher()) {
									net.zhuoweizhang.mcpelauncher.ScriptManager.isRemote = true;
									net.zhuoweizhang.mcpelauncher.ScriptManager.setLevelFakeCallback(true, false);
								}
							}
						}catch(e) {
							print("Use BlockLauncher v1.12.2 or above!");
							ModPE.log(e);
						}
						if(GUI != null && GUI.isShowing() == false && (vertexclientpemiscmenu == null || vertexclientpemiscmenu.isShowing() == false) && (settingsMenu == null || settingsMenu.isShowing() == false) && (informationMenu == null || informationMenu.isShowing() == false) && (accountManager == null || accountManager.isShowing() == false) && (addonMenu == null || addonMenu.isShowing() == false)) {
							VertexClientPE.isRemote = true;
							showMenuButton();
						}
						if(!VertexClientPE.playerIsInGame) {
							if(hacksList != null) {
								if(hacksList.isShowing()) {
									hacksList.dismiss();
								}
							}
						}
                        eval(VertexClientPE.clientTick());
                    }
                }), 1000 / 70);
        }
    }))
}

VertexClientPE.specialTick = function() {
	ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            new android.os.Handler()
                .postDelayed(new java.lang.Runnable({
                    run: function() {
						if(VertexClientPE.playerIsInGame) {
							if(delaySpammerState) {
								VertexClientPE.delaySpammer();
							}
						}
                        eval(VertexClientPE.specialTick());
                    }
                }), 1000 * spamDelayTime);
        }
    }))
}

VertexClientPE.secondTick = function() {
	ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            new android.os.Handler()
                .postDelayed(new java.lang.Runnable({
                    run: function() {
						VertexClientPE.modules.forEach(function(element, index, array) {
							if(element.isStateMod() && element.state && element.onInterval) {
								element.onInterval();
							}
						});
                        eval(VertexClientPE.secondTick());
                    }
                }), 1000);
        }
    }))
}

VertexClientPE.lsdTick = function() {
	var lsdTime = Math.floor((Math.random() * 3) + 1);
	ctx.runOnUiThread(new java.lang.Runnable({
        run: function() {
            /*new android.os.Handler()
                .postDelayed(new java.lang.Runnable({
                    run: function() {*/
						if(VertexClientPE.playerIsInGame && lsdMenu != null) {
							//if(lsdState) {
								var randomLsd = Math.floor((Math.random() * 4) + 1);
								if(randomLsd == 1) {
									lsdMenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.RED));
								} if(randomLsd == 2) {
									lsdMenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GREEN));
								} if(randomLsd == 3) {
									lsdMenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLUE));
								} if(randomLsd == 4) {
									lsdMenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.YELLOW));
								}
							//}
						}
                        /*eval(VertexClientPE.lsdTick());
                    }
                }), 1000 * 1);*/
        }
    }))
}
 
function dip2px(dips){
    var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);
}

var hacksList;
var statesTextView;
var musicTextView;

var enabledHacksCounter = 0;

var musicText = "None";

function showHacksList() {
	if(hacksList == null || !hacksList.isShowing()) {
		var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function() {
				try {
					var display = new android.util.DisplayMetrics();
					com.mojang.minecraftpe.MainActivity.currentMainActivity.get().getWindowManager().getDefaultDisplay().getMetrics(display);

					enabledHacksCounter = 0;
					
					var hacksListLayout = new LinearLayout(ctx);
					hacksListLayout.setOrientation(LinearLayout.HORIZONTAL);
					hacksListLayout.setGravity(android.view.Gravity.CENTER_VERTICAL);
					
					var hacksListLayoutLeft = new LinearLayout(ctx);
					hacksListLayoutLeft.setOrientation(1);
					hacksListLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getWidth() / 15));
					hacksListLayout.addView(hacksListLayoutLeft);
					
					var hacksListLayoutRight = new LinearLayout(ctx);
					hacksListLayoutRight.setOrientation(1);
					hacksListLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getWidth() / 15));
					hacksListLayout.addView(hacksListLayoutRight);
					
					var logo2 = android.util.Base64.decode(logoImage, 0);
					logoViewer2 = new widget.ImageView(ctx);
					logoViewer2.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(logo2, 0, logo2.length));
					logoViewer2.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getWidth() / 16));

					var VertexClientPEHacksListText = "Vertex Client PE " + VertexClientPE.getVersion("current");
					var statesText = "";
					VertexClientPE.modules.forEach(function (element, index, array) {
						if(element.isStateMod() && element.state) {
							if(yesCheatPlusState && element.canBypassYesCheatPlus && !element.canBypassYesCheatPlus()) {
								return;
							}
							if(enabledHacksCounter != 0) {
								statesText += " - "
							}
							statesText += element.name;
							enabledHacksCounter++;
						}
					});
					
					statesTextView = clientTextView(statesText, true);
					if(hacksListModeSetting == "on") {
						statesTextView.setText(statesText);
					} else if(hacksListModeSetting == "counter") {
						statesTextView.setText(enabledHacksCounter.toString() + " mods enabled");
					}
					musicTextView = clientTextView("♫ Currently playing: " + musicText, true);
					
					statesTextView.setTextSize(15);
					statesTextView.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
					statesTextView.setMarqueeRepeatLimit(-1);
					statesTextView.setSingleLine();
					statesTextView.setHorizontallyScrolling(true);
					statesTextView.setSelected(true);
					musicTextView.setTextSize(15);
					musicTextView.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
					musicTextView.setMarqueeRepeatLimit(-1);
					musicTextView.setSingleLine();
					musicTextView.setHorizontallyScrolling(true);
					musicTextView.setSelected(true);
					hacksListLayoutLeft.addView(logoViewer2);
					hacksListLayoutRight.addView(statesTextView);
					hacksListLayoutRight.addView(musicTextView);
					hacksList = new widget.PopupWindow(hacksListLayout, ctx.getWindowManager().getDefaultDisplay().getWidth() / 2, ctx.getWindowManager().getDefaultDisplay().getWidth() / 15);
					hacksList.setBackgroundDrawable(backgroundGradient(true));
					hacksList.setTouchable(false);
					if(hacksListModeSetting != "off") {
						hacksList.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.TOP, 0, 0);
					}
				} catch(error) {
					print('An error occurred: ' + error);
					VertexClientPE.showBugReportDialog(error);
				}
			}
		}));
	}
}

function updateHacksList() {
        var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
        ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                try {
					enabledHacksCounter = 0;
					
					var statesText = "";
					VertexClientPE.modules.forEach(function (element, index, array) {
						if(element.isStateMod() && element.state) {
							if(yesCheatPlusState && element.canBypassYesCheatPlus && !element.canBypassYesCheatPlus()) {
								return;
							}
							if(enabledHacksCounter != 0) {
								statesText += " - "
							}
							statesText += element.name;
							enabledHacksCounter++;
						}
					});
					
					statesTextView.setText(statesText);
					if(hacksListModeSetting == "on") {
						statesTextView.setText(statesText);
					} else if(hacksListModeSetting == "counter") {
						statesTextView.setText(enabledHacksCounter.toString() + " mods enabled");
					}
					musicTextView.setText("♫ Currently playing: " + musicText);
                } catch(error) {
                    print('An error occurred: ' + error);
					VertexClientPE.showBugReportDialog(error);
                }
            }
        }));
}

VertexClientPE.stealChestContent = function(x, y, z) {
	var itemSlot = 0;
	new android.os.Handler()
		.postDelayed(new java.lang.Runnable({
			run: function() {
				var itemId = Level.getChestSlot(x, y, z, itemSlot);
				var itemCount = Level.getChestSlotCount(x, y, z, itemSlot);
				var itemData = Level.getChestSlotData(x, y, z, itemSlot);
				if(itemId != 0) {
					Level.setChestSlot(x, y, z, itemSlot, 0, 0, 0);
					Player.addItemInventory(itemId, itemCount, itemData);
				}
				itemSlot++;
			}
		}), 1000);
}

VertexClientPE.showChestUI = function(x, y, z) {
	ctx.runOnUiThread(new java.lang.Runnable({
            run: function() {
                var chestLayout = new LinearLayout(ctx);
                var chestStealButton = clientButton("Steal");
				chestStealButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function(viewarg) {
						VertexClientPE.stealChestContent(x, y, z);
					}
				}));
                chestLayout.addView(chestStealButton);
                chestUI = new widget.PopupWindow(chestLayout, dip2px(40), dip2px(40));
                chestUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
                chestUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
            }
     }));
}

VertexClientPE.hideChestUI = function() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function() {
			chestUI.dismiss();
		}
	}));
}

function setupDone() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
		try{
			var doneLayout = new LinearLayout(ctx);
			var doneButton = new Button(ctx);
			doneButton.setText("✓");//Text
			doneButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#008000"), android.graphics.PorterDuff.Mode.MULTIPLY);
			doneButton.setTextColor(android.graphics.Color.WHITE);
			doneButton.setOnClickListener(new android.view.View.OnClickListener({
				onClick: function(viewarg){
					themeSetting = setupColor;
					VertexClientPE.saveMainSettings();
					VertexClientPE.editCopyrightText();
					doneUI.dismiss(); //Close
					setupScreen.dismiss();
					showMenuButton();
					//showAccountManagerButton();
				}
			}));
			doneLayout.addView(doneButton);
			
			doneUI = new widget.PopupWindow(doneLayout, dip2px(40), dip2px(40));
			doneUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
			doneUI.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
		} catch(exception) {
			print(exception);
			VertexClientPE.showBugReportDialog(exception);
		}
    }}));
}
	
function exit() {
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xLayout = new LinearLayout(ctxe);
    var xButton = new Button(ctxe);
    xButton.setText("X");//Text
    xButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xButton.setTextColor(android.graphics.Color.WHITE);
    xButton.setOnClickListener(new android.view.View.OnClickListener({
	    onClick: function(viewarg){
			topBar.dismiss();
			showingMenu = false;
	        vertexclientpecombatmenu.dismiss(); //Close
	        vertexclientpebuildingmenu.dismiss(); //Close
	        vertexclientpemovementmenu.dismiss(); //Close
	        vertexclientpechatmenu.dismiss(); //Close
	        vertexclientpemiscmenu.dismiss(); //Close
	        //vertexclientpefavmenu.dismiss(); //Close
			showMenuButton();
			showHacksList();
	    }
    }));
    xLayout.addView(xButton);
	
    var moreLayout = new LinearLayout(ctxe);
    var moreButton = clientButton("...", "Opens the \"More\" menu");
	moreButton.setCornerRadius(20);
    moreButton.setTextColor(android.graphics.Color.WHITE);
    moreButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
		VertexClientPE.showMoreDialog();
    }
    }));
    moreLayout.addView(moreButton);
	
    exitUI = new widget.PopupWindow(xLayout, dip2px(40), dip2px(40));
    exitUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
	
	moreUI = new widget.PopupWindow(moreLayout, dip2px(40), dip2px(40));
    moreUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    moreUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
	VertexClientPE.showBugReportDialog(exception);
    }
    }}));
    }
	
function exitAccountManager(){
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xAccountManagerLayout = new LinearLayout(ctxe);
    var xAccountManagerButton = new Button(ctxe);
    xAccountManagerButton.setText('X');//Text
    xAccountManagerButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xAccountManagerButton.setTextColor(android.graphics.Color.WHITE);
    xAccountManagerButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
    exitAccountManagerUI.dismiss(); //Close
    accountManager.dismiss(); //Close
	showMenuButton();
	showAccountManagerButton();
    }
    }));
    xAccountManagerLayout.addView(xAccountManagerButton);
	
    exitAccountManagerUI = new widget.PopupWindow(xAccountManagerLayout, dip2px(40), dip2px(40));
    exitAccountManagerUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitAccountManagerUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
	VertexClientPE.showBugReportDialog(exception);
    }
    }}));
}
	
function exitSettings(){
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xSettingsLayout = new LinearLayout(ctxe);
    var xSettingsButton = new Button(ctxe);
    xSettingsButton.setText('X');//Text
    xSettingsButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xSettingsButton.setTextColor(android.graphics.Color.WHITE);
    xSettingsButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
    exitSettingsUI.dismiss(); //Close
    settingsMenu.dismiss(); //Close
	showMenuButton();
	showHacksList();
    }
    }));
    xSettingsLayout.addView(xSettingsButton);
	
    exitSettingsUI = new widget.PopupWindow(xSettingsLayout, dip2px(40), dip2px(40));
    exitSettingsUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitSettingsUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
	VertexClientPE.showBugReportDialog(exception);
    }
    }}));
}

function exitInformation(){
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xInformationLayout = new LinearLayout(ctxe);
    var xInformationButton = new Button(ctxe);
    xInformationButton.setText('X');//Text
    xInformationButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xInformationButton.setTextColor(android.graphics.Color.WHITE);
    xInformationButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
    exitInformationUI.dismiss(); //Close
    informationMenu.dismiss(); //Close
	showMenuButton();
	showHacksList();
    }
    }));
    xInformationLayout.addView(xInformationButton);
	
    exitInformationUI = new widget.PopupWindow(xInformationLayout, dip2px(40), dip2px(40));
    exitInformationUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitInformationUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
	VertexClientPE.showBugReportDialog(exception);
    }
    }}));
}

function exitAddon(){
    var ctxe = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
    ctxe.runOnUiThread(new java.lang.Runnable({ run: function(){
    try{
    var xAddonLayout = new LinearLayout(ctxe);
    var xAddonButton = new Button(ctxe);
    xAddonButton.setText('X');//Text
    xAddonButton.getBackground().setColorFilter(android.graphics.Color.parseColor("#FF0000"), android.graphics.PorterDuff.Mode.MULTIPLY);
    xAddonButton.setTextColor(android.graphics.Color.WHITE);
    xAddonButton.setOnClickListener(new android.view.View.OnClickListener({
    onClick: function(viewarg){
    exitAddonUI.dismiss(); //Close
    addonMenu.dismiss(); //Close
	showMenuButton();
	showHacksList();
    }
    }));
    xAddonLayout.addView(xAddonButton);
	
    exitAddonUI = new widget.PopupWindow(xAddonLayout, dip2px(40), dip2px(40));
    exitAddonUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
    exitAddonUI.showAtLocation(ctxe.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0);
    }catch(exception){
    print(exception);
	VertexClientPE.showBugReportDialog(exception);
    }
    }}));
}
	
/*function destroyBlock(x, y, z, side) {
    var data = Level.getData(x, y, z);
    var tile = Level.getTile(x, y, z);
    var gamemode = Level.getGameMode();
    if(gamemode == 0) {
        if(stackDropState == true) {
            if(tile == 1 && getCarriedItem() == 270 || tile == 1 && getCarriedItem() == 257 || tile == 1 && getCarriedItem() == 274 || tile == 1 && getCarriedItem() == 278 || tile == 1 && getCarriedItem() == 285 || tile == 4 && getCarriedItem() == 270 || tile == 4 && getCarriedItem() == 257 || tile == 4 && getCarriedItem() == 274 || tile == 4 && getCarriedItem() == 278 || tile == 4 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 4, 63);
            } else if(tile == 1 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285 || tile == 4 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 4, 64);
            }
            if(tile == 2 || tile == 3) {
                Level.dropItem(x, y, z, 0.5, 3, 63);
            }
            if(tile == 5 || tile == 6 || tile == 12 || tile == 13) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            }
            if(tile == 14 && getCarriedItem() == 257 || tile == 14 && getCarriedItem() == 278 || tile == 14 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 14, 63);
            } else if(tile == 14 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 14, 64);
            }
            if(tile == 15 && getCarriedItem() == 257 || tile == 15 && getCarriedItem() == 274 || tile == 15 && getCarriedItem() == 278 || tile == 15 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 15, 63);
            } else if(tile == 15 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 15, 64);
            }
            if(tile == 16 && getCarriedItem() == 270 || tile == 16 && getCarriedItem() == 257 || tile == 16 && getCarriedItem() == 274 || tile == 16 && getCarriedItem() == 278 || tile == 16 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 263, 63);
            } else if(tile == 16 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 263, 64);
            }
            if(tile == 17) {
                Level.dropItem(x, y, z, 0.5, 17, 63, data);
            }
            if(tile == 18 && getCarriedItem() == 359) {
                Level.dropItem(x, y, z, 0.5, 18, 63);
            } else if(tile == 18 && getCarriedItem() != 359) {
                Level.dropItem(x, y, z, 0.5, 18, 64);
            }
            if(tile == 19 || tile == 20) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            }
            if(tile == 21 && getCarriedItem() == 257 || tile == 21 && getCarriedItem() == 274 || tile == 21 && getCarriedItem() == 278 || tile == 21 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 21, 63);
            } else if(tile == 21 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 21, 64);
            }
            if(tile == 22 && getCarriedItem() == 257 || tile == 22 && getCarriedItem() == 274 || tile == 22 && getCarriedItem() == 278 || tile == 22 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 22, 63);
            } else if(tile == 22 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 22, 64);
            }
            if(tile == 24 && getCarriedItem() == 270 || tile == 24 && getCarriedItem() == 257 || tile == 24 && getCarriedItem() == 274 || tile == 24 && getCarriedItem() == 278 || tile == 24 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 24, 63);
            } else if(tile == 24 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 24, 64);
            }
            if(tile == 26) {
                Level.dropItem(x, y, z, 0.5, 26, 63, data);
            }
            if(tile == 27 && getCarriedItem() == 270 || tile == 27 && getCarriedItem() == 257 || tile == 27 && getCarriedItem() == 274 || tile == 27 && getCarriedItem() == 278 || tile == 27 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 27, 63);
            } else if(tile == 27 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 27, 64);
            }
            if(tile == 30 && getCarriedItem() == 359) {
                Level.dropItem(x, y, z, 0.5, 287, 63);
            } else if(tile == 30 && getCarriedItem() != 359) {
                Level.dropItem(x, y, z, 0.5, 287, 64);
            }
            if(tile == 31 && getCarriedItem() == 359 || tile == 32 & getCarriedItem() == 359) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            } else if(tile == 31 && getCarriedItem() != 359 || tile == 32 && getCarriedItem() != 359) {
                Level.dropItem(x, y, z, 0.5, tile, 64, data);
            }
            if(tile == 37 || tile == 38 || tile == 39 || tile == 40) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 41 && getCarriedItem() == 257 || tile == 41 && getCarriedItem() == 278 || tile == 41 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 41, 63);
            } else if(tile == 41 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 41, 64);
            }
            if(tile == 42 && getCarriedItem() == 257 || tile == 42 && getCarriedItem() == 274 || tile == 42 && getCarriedItem() == 278 || tile == 42 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 42, 63);
            } else if(tile == 42 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 42, 64);
            }
            if(tile == 44 && getCarriedItem() == 257 || tile == 44 && getCarriedItem() == 270 || tile == 44 && getCarriedItem() == 274 || tile == 44 && getCarriedItem() == 278 || tile == 44 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 44, 63);
            } else if(tile == 44 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 44, 64);
            }
            if(tile == 45 && getCarriedItem() == 270 || tile == 45 && getCarriedItem() == 257 || tile == 45 && getCarriedItem() == 274 || tile == 45 && getCarriedItem() == 278 || tile == 45 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 45, 63);
            } else if(tile == 45 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 45, 64);
            }
            if(tile == 47) {
                Level.dropItem(x, y, z, 0.5, 340, 61);
            }
            if(tile == 48 && getCarriedItem() == 270 || tile == 48 && getCarriedItem() == 257 || tile == 48 && getCarriedItem() == 274 || tile == 48 && getCarriedItem() == 278 || tile == 48 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 48, 63);
            } else if(tile == 48 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 48, 64);
            }
            if(tile == 49 && getCarriedItem() == 278 || tile == 246 && getCarriedItem() == 278) {
                Level.dropItem(x, y, z, 0.5, 49, 63);
            } else if(tile == 49 && getCarriedItem() != 278 || tile == 246 && getCarriedItem() != 278) {
                Level.dropItem(x, y, z, 0.5, 49, 64);
            }
            if(tile == 50 || tile == 53 || tile == 54) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 56 && getCarriedItem() == 257 || tile == 57 && getCarriedItem() == 257 || tile == 56 && getCarriedItem() == 278 || tile == 57 && getCarriedItem() == 278 || tile == 56 && getCarriedItem() == 285 || tile == 57 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            } else if(tile == 56 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285 || tile == 57 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, tile, 64);
            }
            if(tile == 61 && getCarriedItem() == 270 || tile == 61 && getCarriedItem() == 257 || tile == 61 && getCarriedItem() == 274 || tile == 61 && getCarriedItem() == 278 || tile == 61 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 61, 63);
            } else if(tile == 61 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 61, 64);
            }
            if(tile == 63 || tile == 64 || tile == 65 || tile == 66) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 67 && getCarriedItem() == 270 || tile == 67 && getCarriedItem() == 257 || tile == 67 && getCarriedItem() == 274 || tile == 67 && getCarriedItem() == 278 || tile == 67 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 67, 63);
            } else if(tile == 67 && getCarriedItem() != 270 && getCarriedItem() != 257 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 67, 64);
            }
            if(tile == 73 && getCarriedItem() == 257 || tile == 73 && getCarriedItem() == 278 || tile == 73 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 331, 63);
            } else if(tile == 73 && getCarriedItem() != 257 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 331, 64);
            }
            if(tile == 78 && getCarriedItem() == 256 || tile == 78 && getCarriedItem() == 269 || tile == 78 && getCarriedItem() == 273 || tile == 78 && getCarriedItem() == 277 || tile == 78 && getCarriedItem() == 284) {
                Level.dropItem(x, y, z, 0.5, 332, 63);
            } else if(tile == 78 && getCarriedItem() != 256 && getCarriedItem() != 269 && getCarriedItem() != 273 && getCarriedItem() != 277 && getCarriedItem() != 284) {
                Level.dropItem(x, y, z, 0.5, 332, 64);
            }
            if(tile == 80 && getCarriedItem() == 256 || tile == 80 && getCarriedItem() == 269 || tile == 80 && getCarriedItem() == 273 || tile == 80 && getCarriedItem() == 277 || tile == 80 && getCarriedItem() == 284) {
                Level.dropItem(x, y, z, 0.5, 332, 60);
            } else if(tile == 80 && getCarriedItem() != 256 && getCarriedItem() != 269 && getCarriedItem() != 273 && getCarriedItem() != 277 && getCarriedItem() != 284) {
                Level.dropItem(x, y, z, 0.5, 332, 64);
            }
            if(tile == 81 || tile == 82 || tile == 83 || tile == 85 || tile == 86 || tile == 89 || tile == 91 || tile == 96 || tile == 102 || tile == 107) {
                Level.dropItem(x, y, z, 0.5, tile, 63);
            }
            if(tile == 87 && getCarriedItem() == 257 || tile == 87 && getCarriedItem() == 270 || tile == 87 && getCarriedItem() == 274 || tile == 87 && getCarriedItem() == 278 || tile == 87 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 87, 63);
            } else if(tile == 87 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 87, 64);
            }
            if(tile == 98 && getCarriedItem() == 257 || tile == 98 && getCarriedItem() == 270 || tile == 98 && getCarriedItem() == 274 || tile == 98 && getCarriedItem() == 278 || tile == 98 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 98, 63);
            } else if(tile == 98 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 98, 64);
            }
            if(tile == 101 && getCarriedItem() == 257 || tile == 101 && getCarriedItem() == 270 || tile == 101 && getCarriedItem() == 274 || tile == 101 && getCarriedItem() == 278 || tile == 101 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 101, 63);
            } else if(tile == 101 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 101, 64);
            }
            if(tile == 103) {
                Level.dropItem(x, y, z, 0.5, 360, 57);
            }
            if(tile == 108 && getCarriedItem() == 257 || tile == 108 && getCarriedItem() == 270 || tile == 108 && getCarriedItem() == 274 || tile == 108 && getCarriedItem() == 278 || tile == 108 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 108, 63);
            } else if(tile == 108 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 108, 64);
            }
            if(tile == 109 && getCarriedItem() == 257 || tile == 109 && getCarriedItem() == 270 || tile == 109 && getCarriedItem() == 274 || tile == 109 && getCarriedItem() == 278 || tile == 109 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 109, 63);
            } else if(tile == 109 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 109, 64);
            }
            if(tile == 112 && getCarriedItem() == 257 || tile == 112 && getCarriedItem() == 270 || tile == 112 && getCarriedItem() == 274 || tile == 112 && getCarriedItem() == 278 || tile == 112 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 112, 63);
            } else if(tile == 112 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 112, 64);
            }
            if(tile == 114 && getCarriedItem() == 257 || tile == 114 && getCarriedItem() == 270 || tile == 114 && getCarriedItem() == 274 || tile == 114 && getCarriedItem() == 278 || tile == 114 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 114, 63);
            } else if(tile == 114 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 114, 64);
            }
            if(tile == 128 && getCarriedItem() == 257 || tile == 128 && getCarriedItem() == 270 || tile == 128 && getCarriedItem() == 274 || tile == 128 && getCarriedItem() == 278 || tile == 128 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 128, 63);
            } else if(tile == 128 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 128, 64);
            }
            if(tile == 134 || tile == 135 || tile == 136 || tile == 158 || tile == 170 || tile == 171 || tile == 245 || tile == 247) {
                Level.dropItem(x, y, z, 0.5, tile, 63, data);
            }
            if(tile == 139 && getCarriedItem() == 257 || tile == 139 && getCarriedItem() == 270 || tile == 139 && getCarriedItem() == 274 || tile == 139 && getCarriedItem() == 278 || tile == 139 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 139, 63);
            } else if(tile == 139 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 139, 64);
            }
            if(tile == 155 && getCarriedItem() == 257 || tile == 155 && getCarriedItem() == 270 || tile == 155 && getCarriedItem() == 274 || tile == 155 && getCarriedItem() == 278 || tile == 155 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 155, 63);
            } else if(tile == 155 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 155, 64);
            }
            if(tile == 156 && getCarriedItem() == 257 || tile == 156 && getCarriedItem() == 270 || tile == 156 && getCarriedItem() == 274 || tile == 156 && getCarriedItem() == 278 || tile == 156 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 156, 63);
            } else if(tile == 156 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 156, 64);
            }
            if(tile == 173 && getCarriedItem() == 257 || tile == 173 && getCarriedItem() == 270 || tile == 173 && getCarriedItem() == 274 || tile == 173 && getCarriedItem() == 278 || tile == 173 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 173, 63);
            } else if(tile == 173 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 173, 64);
            }
            if(tile == 244 && getCarriedItem() == 257 || tile == 244 && getCarriedItem() == 270 || tile == 244 && getCarriedItem() == 274 || tile == 244 && getCarriedItem() == 278 || tile == 244 && getCarriedItem() == 285) {
                Level.dropItem(x, y, z, 0.5, 457, 63);
            } else if(tile == 244 && getCarriedItem() != 257 && getCarriedItem() != 270 && getCarriedItem() != 274 && getCarriedItem() != 278 && getCarriedItem() != 285) {
                Level.dropItem(x, y, z, 0.5, 457, 64);
            }
            if(tile == 250) {
                Level.dropItem(x, y, z, 0, 247, 64);
            }
        }
    }
}*/

function blockEventHook(x, y, z, e, d) {
	if(VertexClientPE.isDevMode()) {
		if(d == 1) {
			if(chestUI == null || !chestUI.isShowing()) {
				VertexClientPE.showChestUI(x, y, z);
			}
		} if(d == 0) {
			if(chestUI != null) {
				VertexClientPE.hideChestUI();
			}
		}
	}
}
 
//End
